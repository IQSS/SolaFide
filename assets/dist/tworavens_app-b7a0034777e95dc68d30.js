!function(Q){function I(B){if(F[B])return F[B].exports;var g=F[B]={i:B,l:!1,exports:{}};return Q[B].call(g.exports,g,g.exports,I),g.l=!0,g.exports}var F={};I.m=Q,I.c=F,I.i=function(Q){return Q},I.d=function(Q,F,B){I.o(Q,F)||Object.defineProperty(Q,F,{configurable:!1,enumerable:!0,get:B})},I.n=function(Q){var F=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return I.d(F,"a",F),F},I.o=function(Q,I){return Object.prototype.hasOwnProperty.call(Q,I)},I.p="",I(I.s=10)}([function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(setImmediate, global) {;(function() {\n"use strict"\nfunction Vnode(tag, key, attrs0, children, text, dom) {\n\treturn {tag: tag, key: key, attrs: attrs0, children: children, text: text, dom: dom, domSize: undefined, state: undefined, _state: undefined, events: undefined, instance: undefined, skip: false}\n}\nVnode.normalize = function(node) {\n\tif (Array.isArray(node)) return Vnode("[", undefined, undefined, Vnode.normalizeChildren(node), undefined, undefined)\n\tif (node != null && typeof node !== "object") return Vnode("#", undefined, undefined, node === false ? "" : node, undefined, undefined)\n\treturn node\n}\nVnode.normalizeChildren = function normalizeChildren(children) {\n\tfor (var i = 0; i < children.length; i++) {\n\t\tchildren[i] = Vnode.normalize(children[i])\n\t}\n\treturn children\n}\nvar selectorParser = /(?:(^|#|\\.)([^#\\.\\[\\]]+))|(\\[(.+?)(?:\\s*=\\s*("|\'|)((?:\\\\["\'\\]]|.)*?)\\5)?\\])/g\nvar selectorCache = {}\nvar hasOwn = {}.hasOwnProperty\nfunction compileSelector(selector) {\n\tvar match, tag = "div", classes = [], attrs = {}\n\twhile (match = selectorParser.exec(selector)) {\n\t\tvar type = match[1], value = match[2]\n\t\tif (type === "" && value !== "") tag = value\n\t\telse if (type === "#") attrs.id = value\n\t\telse if (type === ".") classes.push(value)\n\t\telse if (match[3][0] === "[") {\n\t\t\tvar attrValue = match[6]\n\t\t\tif (attrValue) attrValue = attrValue.replace(/\\\\(["\'])/g, "$1").replace(/\\\\\\\\/g, "\\\\")\n\t\t\tif (match[4] === "class") classes.push(attrValue)\n\t\t\telse attrs[match[4]] = attrValue === "" ? attrValue : attrValue || true\n\t\t}\n\t}\n\tif (classes.length > 0) attrs.className = classes.join(" ")\n\treturn selectorCache[selector] = {tag: tag, attrs: attrs}\n}\nfunction execSelector(state, attrs, children) {\n\tvar hasAttrs = false, childList, text\n\tvar className = attrs.className || attrs.class\n\tfor (var key in state.attrs) {\n\t\tif (hasOwn.call(state.attrs, key)) {\n\t\t\tattrs[key] = state.attrs[key]\n\t\t}\n\t}\n\tif (className !== undefined) {\n\t\tif (attrs.class !== undefined) {\n\t\t\tattrs.class = undefined\n\t\t\tattrs.className = className\n\t\t}\n\t\tif (state.attrs.className != null) {\n\t\t\tattrs.className = state.attrs.className + " " + className\n\t\t}\n\t}\n\tfor (var key in attrs) {\n\t\tif (hasOwn.call(attrs, key) && key !== "key") {\n\t\t\thasAttrs = true\n\t\t\tbreak\n\t\t}\n\t}\n\tif (Array.isArray(children) && children.length === 1 && children[0] != null && children[0].tag === "#") {\n\t\ttext = children[0].children\n\t} else {\n\t\tchildList = children\n\t}\n\treturn Vnode(state.tag, attrs.key, hasAttrs ? attrs : undefined, childList, text)\n}\nfunction hyperscript(selector) {\n\t// Because sloppy mode sucks\n\tvar attrs = arguments[1], start = 2, children\n\tif (selector == null || typeof selector !== "string" && typeof selector !== "function" && typeof selector.view !== "function") {\n\t\tthrow Error("The selector must be either a string or a component.");\n\t}\n\tif (typeof selector === "string") {\n\t\tvar cached = selectorCache[selector] || compileSelector(selector)\n\t}\n\tif (attrs == null) {\n\t\tattrs = {}\n\t} else if (typeof attrs !== "object" || attrs.tag != null || Array.isArray(attrs)) {\n\t\tattrs = {}\n\t\tstart = 1\n\t}\n\tif (arguments.length === start + 1) {\n\t\tchildren = arguments[start]\n\t\tif (!Array.isArray(children)) children = [children]\n\t} else {\n\t\tchildren = []\n\t\twhile (start < arguments.length) children.push(arguments[start++])\n\t}\n\tvar normalized = Vnode.normalizeChildren(children)\n\tif (typeof selector === "string") {\n\t\treturn execSelector(cached, attrs, normalized)\n\t} else {\n\t\treturn Vnode(selector, attrs.key, attrs, normalized)\n\t}\n}\nhyperscript.trust = function(html) {\n\tif (html == null) html = ""\n\treturn Vnode("<", undefined, undefined, html, undefined, undefined)\n}\nhyperscript.fragment = function(attrs1, children) {\n\treturn Vnode("[", attrs1.key, attrs1, Vnode.normalizeChildren(children), undefined, undefined)\n}\nvar m = hyperscript\n/** @constructor */\nvar PromisePolyfill = function(executor) {\n\tif (!(this instanceof PromisePolyfill)) throw new Error("Promise must be called with `new`")\n\tif (typeof executor !== "function") throw new TypeError("executor must be a function")\n\tvar self = this, resolvers = [], rejectors = [], resolveCurrent = handler(resolvers, true), rejectCurrent = handler(rejectors, false)\n\tvar instance = self._instance = {resolvers: resolvers, rejectors: rejectors}\n\tvar callAsync = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction handler(list, shouldAbsorb) {\n\t\treturn function execute(value) {\n\t\t\tvar then\n\t\t\ttry {\n\t\t\t\tif (shouldAbsorb && value != null && (typeof value === "object" || typeof value === "function") && typeof (then = value.then) === "function") {\n\t\t\t\t\tif (value === self) throw new TypeError("Promise can\'t be resolved w/ itself")\n\t\t\t\t\texecuteOnce(then.bind(value))\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tcallAsync(function() {\n\t\t\t\t\t\tif (!shouldAbsorb && list.length === 0) console.error("Possible unhandled promise rejection:", value)\n\t\t\t\t\t\tfor (var i = 0; i < list.length; i++) list[i](value)\n\t\t\t\t\t\tresolvers.length = 0, rejectors.length = 0\n\t\t\t\t\t\tinstance.state = shouldAbsorb\n\t\t\t\t\t\tinstance.retry = function() {execute(value)}\n\t\t\t\t\t})\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (e) {\n\t\t\t\trejectCurrent(e)\n\t\t\t}\n\t\t}\n\t}\n\tfunction executeOnce(then) {\n\t\tvar runs = 0\n\t\tfunction run(fn) {\n\t\t\treturn function(value) {\n\t\t\t\tif (runs++ > 0) return\n\t\t\t\tfn(value)\n\t\t\t}\n\t\t}\n\t\tvar onerror = run(rejectCurrent)\n\t\ttry {then(run(resolveCurrent), onerror)} catch (e) {onerror(e)}\n\t}\n\texecuteOnce(executor)\n}\nPromisePolyfill.prototype.then = function(onFulfilled, onRejection) {\n\tvar self = this, instance = self._instance\n\tfunction handle(callback, list, next, state) {\n\t\tlist.push(function(value) {\n\t\t\tif (typeof callback !== "function") next(value)\n\t\t\telse try {resolveNext(callback(value))} catch (e) {if (rejectNext) rejectNext(e)}\n\t\t})\n\t\tif (typeof instance.retry === "function" && state === instance.state) instance.retry()\n\t}\n\tvar resolveNext, rejectNext\n\tvar promise = new PromisePolyfill(function(resolve, reject) {resolveNext = resolve, rejectNext = reject})\n\thandle(onFulfilled, instance.resolvers, resolveNext, true), handle(onRejection, instance.rejectors, rejectNext, false)\n\treturn promise\n}\nPromisePolyfill.prototype.catch = function(onRejection) {\n\treturn this.then(null, onRejection)\n}\nPromisePolyfill.resolve = function(value) {\n\tif (value instanceof PromisePolyfill) return value\n\treturn new PromisePolyfill(function(resolve) {resolve(value)})\n}\nPromisePolyfill.reject = function(value) {\n\treturn new PromisePolyfill(function(resolve, reject) {reject(value)})\n}\nPromisePolyfill.all = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tvar total = list.length, count = 0, values = []\n\t\tif (list.length === 0) resolve([])\n\t\telse for (var i = 0; i < list.length; i++) {\n\t\t\t(function(i) {\n\t\t\t\tfunction consume(value) {\n\t\t\t\t\tcount++\n\t\t\t\t\tvalues[i] = value\n\t\t\t\t\tif (count === total) resolve(values)\n\t\t\t\t}\n\t\t\t\tif (list[i] != null && (typeof list[i] === "object" || typeof list[i] === "function") && typeof list[i].then === "function") {\n\t\t\t\t\tlist[i].then(consume, reject)\n\t\t\t\t}\n\t\t\t\telse consume(list[i])\n\t\t\t})(i)\n\t\t}\n\t})\n}\nPromisePolyfill.race = function(list) {\n\treturn new PromisePolyfill(function(resolve, reject) {\n\t\tfor (var i = 0; i < list.length; i++) {\n\t\t\tlist[i].then(resolve, reject)\n\t\t}\n\t})\n}\nif (typeof window !== "undefined") {\n\tif (typeof window.Promise === "undefined") window.Promise = PromisePolyfill\n\tvar PromisePolyfill = window.Promise\n} else if (typeof global !== "undefined") {\n\tif (typeof global.Promise === "undefined") global.Promise = PromisePolyfill\n\tvar PromisePolyfill = global.Promise\n} else {\n}\nvar buildQueryString = function(object) {\n\tif (Object.prototype.toString.call(object) !== "[object Object]") return ""\n\tvar args = []\n\tfor (var key0 in object) {\n\t\tdestructure(key0, object[key0])\n\t}\n\treturn args.join("&")\n\tfunction destructure(key0, value) {\n\t\tif (Array.isArray(value)) {\n\t\t\tfor (var i = 0; i < value.length; i++) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse if (Object.prototype.toString.call(value) === "[object Object]") {\n\t\t\tfor (var i in value) {\n\t\t\t\tdestructure(key0 + "[" + i + "]", value[i])\n\t\t\t}\n\t\t}\n\t\telse args.push(encodeURIComponent(key0) + (value != null && value !== "" ? "=" + encodeURIComponent(value) : ""))\n\t}\n}\nvar FILE_PROTOCOL_REGEX = new RegExp("^file://", "i")\nvar _8 = function($window, Promise) {\n\tvar callbackCount = 0\n\tvar oncompletion\n\tfunction setCompletionCallback(callback) {oncompletion = callback}\n\tfunction finalizer() {\n\t\tvar count = 0\n\t\tfunction complete() {if (--count === 0 && typeof oncompletion === "function") oncompletion()}\n\t\treturn function finalize(promise0) {\n\t\t\tvar then0 = promise0.then\n\t\t\tpromise0.then = function() {\n\t\t\t\tcount++\n\t\t\t\tvar next = then0.apply(promise0, arguments)\n\t\t\t\tnext.then(complete, function(e) {\n\t\t\t\t\tcomplete()\n\t\t\t\t\tif (count === 0) throw e\n\t\t\t\t})\n\t\t\t\treturn finalize(next)\n\t\t\t}\n\t\t\treturn promise0\n\t\t}\n\t}\n\tfunction normalize(args, extra) {\n\t\tif (typeof args === "string") {\n\t\t\tvar url = args\n\t\t\targs = extra || {}\n\t\t\tif (args.url == null) args.url = url\n\t\t}\n\t\treturn args\n\t}\n\tfunction request(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tif (args.method == null) args.method = "GET"\n\t\t\targs.method = args.method.toUpperCase()\n\t\t\tvar useBody = (args.method === "GET" || args.method === "TRACE") ? false : (typeof args.useBody === "boolean" ? args.useBody : true)\n\t\t\tif (typeof args.serialize !== "function") args.serialize = typeof FormData !== "undefined" && args.data instanceof FormData ? function(value) {return value} : JSON.stringify\n\t\t\tif (typeof args.deserialize !== "function") args.deserialize = deserialize\n\t\t\tif (typeof args.extract !== "function") args.extract = extract\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\tif (useBody) args.data = args.serialize(args.data)\n\t\t\telse args.url = assemble(args.url, args.data)\n\t\t\tvar xhr = new $window.XMLHttpRequest(),\n\t\t\t\taborted = false,\n\t\t\t\t_abort = xhr.abort\n\t\t\txhr.abort = function abort() {\n\t\t\t\taborted = true\n\t\t\t\t_abort.call(xhr)\n\t\t\t}\n\t\t\txhr.open(args.method, args.url, typeof args.async === "boolean" ? args.async : true, typeof args.user === "string" ? args.user : undefined, typeof args.password === "string" ? args.password : undefined)\n\t\t\tif (args.serialize === JSON.stringify && useBody) {\n\t\t\t\txhr.setRequestHeader("Content-Type", "application/json; charset=utf-8")\n\t\t\t}\n\t\t\tif (args.deserialize === deserialize) {\n\t\t\t\txhr.setRequestHeader("Accept", "application/json, text/*")\n\t\t\t}\n\t\t\tif (args.withCredentials) xhr.withCredentials = args.withCredentials\n\t\t\tfor (var key in args.headers) if ({}.hasOwnProperty.call(args.headers, key)) {\n\t\t\t\txhr.setRequestHeader(key, args.headers[key])\n\t\t\t}\n\t\t\tif (typeof args.config === "function") xhr = args.config(xhr, args) || xhr\n\t\t\txhr.onreadystatechange = function() {\n\t\t\t\t// Don\'t throw errors on xhr.abort().\n\t\t\t\tif(aborted) return\n\t\t\t\tif (xhr.readyState === 4) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tvar response = (args.extract !== extract) ? args.extract(xhr, args) : args.deserialize(args.extract(xhr, args))\n\t\t\t\t\t\tif ((xhr.status >= 200 && xhr.status < 300) || xhr.status === 304 || FILE_PROTOCOL_REGEX.test(args.url)) {\n\t\t\t\t\t\t\tresolve(cast(args.type, response))\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar error = new Error(xhr.responseText)\n\t\t\t\t\t\t\tfor (var key in response) error[key] = response[key]\n\t\t\t\t\t\t\treject(error)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {\n\t\t\t\t\t\treject(e)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (useBody && (args.data != null)) xhr.send(args.data)\n\t\t\telse xhr.send()\n\t\t})\n\t\treturn args.background === true ? promise0 : finalize(promise0)\n\t}\n\tfunction jsonp(args, extra) {\n\t\tvar finalize = finalizer()\n\t\targs = normalize(args, extra)\n\t\tvar promise0 = new Promise(function(resolve, reject) {\n\t\t\tvar callbackName = args.callbackName || "_mithril_" + Math.round(Math.random() * 1e16) + "_" + callbackCount++\n\t\t\tvar script = $window.document.createElement("script")\n\t\t\t$window[callbackName] = function(data) {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\tresolve(cast(args.type, data))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tscript.onerror = function() {\n\t\t\t\tscript.parentNode.removeChild(script)\n\t\t\t\treject(new Error("JSONP request failed"))\n\t\t\t\tdelete $window[callbackName]\n\t\t\t}\n\t\t\tif (args.data == null) args.data = {}\n\t\t\targs.url = interpolate(args.url, args.data)\n\t\t\targs.data[args.callbackKey || "callback"] = callbackName\n\t\t\tscript.src = assemble(args.url, args.data)\n\t\t\t$window.document.documentElement.appendChild(script)\n\t\t})\n\t\treturn args.background === true? promise0 : finalize(promise0)\n\t}\n\tfunction interpolate(url, data) {\n\t\tif (data == null) return url\n\t\tvar tokens = url.match(/:[^\\/]+/gi) || []\n\t\tfor (var i = 0; i < tokens.length; i++) {\n\t\t\tvar key = tokens[i].slice(1)\n\t\t\tif (data[key] != null) {\n\t\t\t\turl = url.replace(tokens[i], data[key])\n\t\t\t}\n\t\t}\n\t\treturn url\n\t}\n\tfunction assemble(url, data) {\n\t\tvar querystring = buildQueryString(data)\n\t\tif (querystring !== "") {\n\t\t\tvar prefix = url.indexOf("?") < 0 ? "?" : "&"\n\t\t\turl += prefix + querystring\n\t\t}\n\t\treturn url\n\t}\n\tfunction deserialize(data) {\n\t\ttry {return data !== "" ? JSON.parse(data) : null}\n\t\tcatch (e) {throw new Error(data)}\n\t}\n\tfunction extract(xhr) {return xhr.responseText}\n\tfunction cast(type0, data) {\n\t\tif (typeof type0 === "function") {\n\t\t\tif (Array.isArray(data)) {\n\t\t\t\tfor (var i = 0; i < data.length; i++) {\n\t\t\t\t\tdata[i] = new type0(data[i])\n\t\t\t\t}\n\t\t\t}\n\t\t\telse return new type0(data)\n\t\t}\n\t\treturn data\n\t}\n\treturn {request: request, jsonp: jsonp, setCompletionCallback: setCompletionCallback}\n}\nvar requestService = _8(window, PromisePolyfill)\nvar coreRenderer = function($window) {\n\tvar $doc = $window.document\n\tvar $emptyFragment = $doc.createDocumentFragment()\n\tvar nameSpace = {\n\t\tsvg: "http://www.w3.org/2000/svg",\n\t\tmath: "http://www.w3.org/1998/Math/MathML"\n\t}\n\tvar onevent\n\tfunction setEventCallback(callback) {return onevent = callback}\n\tfunction getNameSpace(vnode) {\n\t\treturn vnode.attrs && vnode.attrs.xmlns || nameSpace[vnode.tag]\n\t}\n\t//create\n\tfunction createNodes(parent, vnodes, start, end, hooks, nextSibling, ns) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t}\n\tfunction createNode(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tif (typeof tag === "string") {\n\t\t\tvnode.state = {}\n\t\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tswitch (tag) {\n\t\t\t\tcase "#": return createText(parent, vnode, nextSibling)\n\t\t\t\tcase "<": return createHTML(parent, vnode, nextSibling)\n\t\t\t\tcase "[": return createFragment(parent, vnode, hooks, ns, nextSibling)\n\t\t\t\tdefault: return createElement(parent, vnode, hooks, ns, nextSibling)\n\t\t\t}\n\t\t}\n\t\telse return createComponent(parent, vnode, hooks, ns, nextSibling)\n\t}\n\tfunction createText(parent, vnode, nextSibling) {\n\t\tvnode.dom = $doc.createTextNode(vnode.children)\n\t\tinsertNode(parent, vnode.dom, nextSibling)\n\t\treturn vnode.dom\n\t}\n\tfunction createHTML(parent, vnode, nextSibling) {\n\t\tvar match1 = vnode.children.match(/^\\s*?<(\\w+)/im) || []\n\t\tvar parent1 = {caption: "table", thead: "table", tbody: "table", tfoot: "table", tr: "tbody", th: "tr", td: "tr", colgroup: "table", col: "colgroup"}[match1[1]] || "div"\n\t\tvar temp = $doc.createElement(parent1)\n\t\ttemp.innerHTML = vnode.children\n\t\tvnode.dom = temp.firstChild\n\t\tvnode.domSize = temp.childNodes.length\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tvar child\n\t\twhile (child = temp.firstChild) {\n\t\t\tfragment.appendChild(child)\n\t\t}\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createFragment(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar fragment = $doc.createDocumentFragment()\n\t\tif (vnode.children != null) {\n\t\t\tvar children = vnode.children\n\t\t\tcreateNodes(fragment, children, 0, children.length, hooks, null, ns)\n\t\t}\n\t\tvnode.dom = fragment.firstChild\n\t\tvnode.domSize = fragment.childNodes.length\n\t\tinsertNode(parent, fragment, nextSibling)\n\t\treturn fragment\n\t}\n\tfunction createElement(parent, vnode, hooks, ns, nextSibling) {\n\t\tvar tag = vnode.tag\n\t\tvar attrs2 = vnode.attrs\n\t\tvar is = attrs2 && attrs2.is\n\t\tns = getNameSpace(vnode) || ns\n\t\tvar element = ns ?\n\t\t\tis ? $doc.createElementNS(ns, tag, {is: is}) : $doc.createElementNS(ns, tag) :\n\t\t\tis ? $doc.createElement(tag, {is: is}) : $doc.createElement(tag)\n\t\tvnode.dom = element\n\t\tif (attrs2 != null) {\n\t\t\tsetAttrs(vnode, attrs2, ns)\n\t\t}\n\t\tinsertNode(parent, element, nextSibling)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse {\n\t\t\tif (vnode.text != null) {\n\t\t\t\tif (vnode.text !== "") element.textContent = vnode.text\n\t\t\t\telse vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\t}\n\t\t\tif (vnode.children != null) {\n\t\t\t\tvar children = vnode.children\n\t\t\t\tcreateNodes(element, children, 0, children.length, hooks, null, ns)\n\t\t\t\tsetLateAttrs(vnode)\n\t\t\t}\n\t\t}\n\t\treturn element\n\t}\n\tfunction initComponent(vnode, hooks) {\n\t\tvar sentinel\n\t\tif (typeof vnode.tag.view === "function") {\n\t\t\tvnode.state = Object.create(vnode.tag)\n\t\t\tsentinel = vnode.state.view\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t} else {\n\t\t\tvnode.state = void 0\n\t\t\tsentinel = vnode.tag\n\t\t\tif (sentinel.$$reentrantLock$$ != null) return $emptyFragment\n\t\t\tsentinel.$$reentrantLock$$ = true\n\t\t\tvnode.state = (vnode.tag.prototype != null && typeof vnode.tag.prototype.view === "function") ? new vnode.tag(vnode) : vnode.tag(vnode)\n\t\t}\n\t\tvnode._state = vnode.state\n\t\tif (vnode.attrs != null) initLifecycle(vnode.attrs, vnode, hooks)\n\t\tinitLifecycle(vnode._state, vnode, hooks)\n\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\tsentinel.$$reentrantLock$$ = null\n\t}\n\tfunction createComponent(parent, vnode, hooks, ns, nextSibling) {\n\t\tinitComponent(vnode, hooks)\n\t\tif (vnode.instance != null) {\n\t\t\tvar element = createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.dom != null ? vnode.instance.domSize : 0\n\t\t\tinsertNode(parent, element, nextSibling)\n\t\t\treturn element\n\t\t}\n\t\telse {\n\t\t\tvnode.domSize = 0\n\t\t\treturn $emptyFragment\n\t\t}\n\t}\n\t//update\n\tfunction updateNodes(parent, old, vnodes, recycling, hooks, nextSibling, ns) {\n\t\tif (old === vnodes || old == null && vnodes == null) return\n\t\telse if (old == null) createNodes(parent, vnodes, 0, vnodes.length, hooks, nextSibling, ns)\n\t\telse if (vnodes == null) removeNodes(old, 0, old.length, vnodes)\n\t\telse {\n\t\t\tif (old.length === vnodes.length) {\n\t\t\t\tvar isUnkeyed = false\n\t\t\t\tfor (var i = 0; i < vnodes.length; i++) {\n\t\t\t\t\tif (vnodes[i] != null && old[i] != null) {\n\t\t\t\t\t\tisUnkeyed = vnodes[i].key == null && old[i].key == null\n\t\t\t\t\t\tbreak\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (isUnkeyed) {\n\t\t\t\t\tfor (var i = 0; i < old.length; i++) {\n\t\t\t\t\t\tif (old[i] === vnodes[i]) continue\n\t\t\t\t\t\telse if (old[i] == null && vnodes[i] != null) createNode(parent, vnodes[i], hooks, ns, getNextSibling(old, i + 1, nextSibling))\n\t\t\t\t\t\telse if (vnodes[i] == null) removeNodes(old, i, i + 1, vnodes)\n\t\t\t\t\t\telse updateNode(parent, old[i], vnodes[i], hooks, getNextSibling(old, i + 1, nextSibling), recycling, ns)\n\t\t\t\t\t}\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\trecycling = recycling || isRecyclable(old, vnodes)\n\t\t\tif (recycling) {\n\t\t\t\tvar pool = old.pool\n\t\t\t\told = old.concat(old.pool)\n\t\t\t}\n\t\t\tvar oldStart = 0, start = 0, oldEnd = old.length - 1, end = vnodes.length - 1, map\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldStart], v = vnodes[start]\n\t\t\t\tif (o === v && !recycling) oldStart++, start++\n\t\t\t\telse if (o == null) oldStart++\n\t\t\t\telse if (v == null) start++\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldStart >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\toldStart++, start++\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldStart, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tvar o = old[oldEnd]\n\t\t\t\t\tif (o === v && !recycling) oldEnd--, start++\n\t\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\t\telse if (v == null) start++\n\t\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\t\tif (recycling || start < end) insertNode(parent, toFragment(o), getNextSibling(old, oldStart, nextSibling))\n\t\t\t\t\t\toldEnd--, start++\n\t\t\t\t\t}\n\t\t\t\t\telse break\n\t\t\t\t}\n\t\t\t}\n\t\t\twhile (oldEnd >= oldStart && end >= start) {\n\t\t\t\tvar o = old[oldEnd], v = vnodes[end]\n\t\t\t\tif (o === v && !recycling) oldEnd--, end--\n\t\t\t\telse if (o == null) oldEnd--\n\t\t\t\telse if (v == null) end--\n\t\t\t\telse if (o.key === v.key) {\n\t\t\t\t\tvar shouldRecycle = (pool != null && oldEnd >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\tupdateNode(parent, o, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), shouldRecycle, ns)\n\t\t\t\t\tif (recycling && o.tag === v.tag) insertNode(parent, toFragment(o), nextSibling)\n\t\t\t\t\tif (o.dom != null) nextSibling = o.dom\n\t\t\t\t\toldEnd--, end--\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (!map) map = getKeyMap(old, oldEnd)\n\t\t\t\t\tif (v != null) {\n\t\t\t\t\t\tvar oldIndex = map[v.key]\n\t\t\t\t\t\tif (oldIndex != null) {\n\t\t\t\t\t\t\tvar movable = old[oldIndex]\n\t\t\t\t\t\t\tvar shouldRecycle = (pool != null && oldIndex >= old.length - pool.length) || ((pool == null) && recycling)\n\t\t\t\t\t\t\tupdateNode(parent, movable, v, hooks, getNextSibling(old, oldEnd + 1, nextSibling), recycling, ns)\n\t\t\t\t\t\t\tinsertNode(parent, toFragment(movable), nextSibling)\n\t\t\t\t\t\t\told[oldIndex].skip = true\n\t\t\t\t\t\t\tif (movable.dom != null) nextSibling = movable.dom\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tvar dom = createNode(parent, v, hooks, ns, nextSibling)\n\t\t\t\t\t\t\tnextSibling = dom\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tend--\n\t\t\t\t}\n\t\t\t\tif (end < start) break\n\t\t\t}\n\t\t\tcreateNodes(parent, vnodes, start, end + 1, hooks, nextSibling, ns)\n\t\t\tremoveNodes(old, oldStart, oldEnd + 1, vnodes)\n\t\t}\n\t}\n\tfunction updateNode(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tvar oldTag = old.tag, tag = vnode.tag\n\t\tif (oldTag === tag) {\n\t\t\tvnode.state = old.state\n\t\t\tvnode._state = old._state\n\t\t\tvnode.events = old.events\n\t\t\tif (!recycling && shouldNotUpdate(vnode, old)) return\n\t\t\tif (typeof oldTag === "string") {\n\t\t\t\tif (vnode.attrs != null) {\n\t\t\t\t\tif (recycling) {\n\t\t\t\t\t\tvnode.state = {}\n\t\t\t\t\t\tinitLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t\t}\n\t\t\t\t\telse updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\t\t}\n\t\t\t\tswitch (oldTag) {\n\t\t\t\t\tcase "#": updateText(old, vnode); break\n\t\t\t\t\tcase "<": updateHTML(parent, old, vnode, nextSibling); break\n\t\t\t\t\tcase "[": updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns); break\n\t\t\t\t\tdefault: updateElement(old, vnode, recycling, hooks, ns)\n\t\t\t\t}\n\t\t\t}\n\t\t\telse updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns)\n\t\t}\n\t\telse {\n\t\t\tremoveNode(old, null)\n\t\t\tcreateNode(parent, vnode, hooks, ns, nextSibling)\n\t\t}\n\t}\n\tfunction updateText(old, vnode) {\n\t\tif (old.children.toString() !== vnode.children.toString()) {\n\t\t\told.dom.nodeValue = vnode.children\n\t\t}\n\t\tvnode.dom = old.dom\n\t}\n\tfunction updateHTML(parent, old, vnode, nextSibling) {\n\t\tif (old.children !== vnode.children) {\n\t\t\ttoFragment(old)\n\t\t\tcreateHTML(parent, vnode, nextSibling)\n\t\t}\n\t\telse vnode.dom = old.dom, vnode.domSize = old.domSize\n\t}\n\tfunction updateFragment(parent, old, vnode, recycling, hooks, nextSibling, ns) {\n\t\tupdateNodes(parent, old.children, vnode.children, recycling, hooks, nextSibling, ns)\n\t\tvar domSize = 0, children = vnode.children\n\t\tvnode.dom = null\n\t\tif (children != null) {\n\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\tvar child = children[i]\n\t\t\t\tif (child != null && child.dom != null) {\n\t\t\t\t\tif (vnode.dom == null) vnode.dom = child.dom\n\t\t\t\t\tdomSize += child.domSize || 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (domSize !== 1) vnode.domSize = domSize\n\t\t}\n\t}\n\tfunction updateElement(old, vnode, recycling, hooks, ns) {\n\t\tvar element = vnode.dom = old.dom\n\t\tns = getNameSpace(vnode) || ns\n\t\tif (vnode.tag === "textarea") {\n\t\t\tif (vnode.attrs == null) vnode.attrs = {}\n\t\t\tif (vnode.text != null) {\n\t\t\t\tvnode.attrs.value = vnode.text //FIXME handle0 multiple children\n\t\t\t\tvnode.text = undefined\n\t\t\t}\n\t\t}\n\t\tupdateAttrs(vnode, old.attrs, vnode.attrs, ns)\n\t\tif (vnode.attrs != null && vnode.attrs.contenteditable != null) {\n\t\t\tsetContentEditable(vnode)\n\t\t}\n\t\telse if (old.text != null && vnode.text != null && vnode.text !== "") {\n\t\t\tif (old.text.toString() !== vnode.text.toString()) old.dom.firstChild.nodeValue = vnode.text\n\t\t}\n\t\telse {\n\t\t\tif (old.text != null) old.children = [Vnode("#", undefined, undefined, old.text, undefined, old.dom.firstChild)]\n\t\t\tif (vnode.text != null) vnode.children = [Vnode("#", undefined, undefined, vnode.text, undefined, undefined)]\n\t\t\tupdateNodes(element, old.children, vnode.children, recycling, hooks, null, ns)\n\t\t}\n\t}\n\tfunction updateComponent(parent, old, vnode, hooks, nextSibling, recycling, ns) {\n\t\tif (recycling) {\n\t\t\tinitComponent(vnode, hooks)\n\t\t} else {\n\t\t\tvnode.instance = Vnode.normalize(vnode._state.view.call(vnode.state, vnode))\n\t\t\tif (vnode.instance === vnode) throw Error("A view cannot return the vnode it received as argument")\n\t\t\tif (vnode.attrs != null) updateLifecycle(vnode.attrs, vnode, hooks)\n\t\t\tupdateLifecycle(vnode._state, vnode, hooks)\n\t\t}\n\t\tif (vnode.instance != null) {\n\t\t\tif (old.instance == null) createNode(parent, vnode.instance, hooks, ns, nextSibling)\n\t\t\telse updateNode(parent, old.instance, vnode.instance, hooks, nextSibling, recycling, ns)\n\t\t\tvnode.dom = vnode.instance.dom\n\t\t\tvnode.domSize = vnode.instance.domSize\n\t\t}\n\t\telse if (old.instance != null) {\n\t\t\tremoveNode(old.instance, null)\n\t\t\tvnode.dom = undefined\n\t\t\tvnode.domSize = 0\n\t\t}\n\t\telse {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t}\n\t}\n\tfunction isRecyclable(old, vnodes) {\n\t\tif (old.pool != null && Math.abs(old.pool.length - vnodes.length) <= Math.abs(old.length - vnodes.length)) {\n\t\t\tvar oldChildrenLength = old[0] && old[0].children && old[0].children.length || 0\n\t\t\tvar poolChildrenLength = old.pool[0] && old.pool[0].children && old.pool[0].children.length || 0\n\t\t\tvar vnodesChildrenLength = vnodes[0] && vnodes[0].children && vnodes[0].children.length || 0\n\t\t\tif (Math.abs(poolChildrenLength - vnodesChildrenLength) <= Math.abs(oldChildrenLength - vnodesChildrenLength)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t}\n\t\treturn false\n\t}\n\tfunction getKeyMap(vnodes, end) {\n\t\tvar map = {}, i = 0\n\t\tfor (var i = 0; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tvar key2 = vnode.key\n\t\t\t\tif (key2 != null) map[key2] = i\n\t\t\t}\n\t\t}\n\t\treturn map\n\t}\n\tfunction toFragment(vnode) {\n\t\tvar count0 = vnode.domSize\n\t\tif (count0 != null || vnode.dom == null) {\n\t\t\tvar fragment = $doc.createDocumentFragment()\n\t\t\tif (count0 > 0) {\n\t\t\t\tvar dom = vnode.dom\n\t\t\t\twhile (--count0) fragment.appendChild(dom.nextSibling)\n\t\t\t\tfragment.insertBefore(dom, fragment.firstChild)\n\t\t\t}\n\t\t\treturn fragment\n\t\t}\n\t\telse return vnode.dom\n\t}\n\tfunction getNextSibling(vnodes, i, nextSibling) {\n\t\tfor (; i < vnodes.length; i++) {\n\t\t\tif (vnodes[i] != null && vnodes[i].dom != null) return vnodes[i].dom\n\t\t}\n\t\treturn nextSibling\n\t}\n\tfunction insertNode(parent, dom, nextSibling) {\n\t\tif (nextSibling && nextSibling.parentNode) parent.insertBefore(dom, nextSibling)\n\t\telse parent.appendChild(dom)\n\t}\n\tfunction setContentEditable(vnode) {\n\t\tvar children = vnode.children\n\t\tif (children != null && children.length === 1 && children[0].tag === "<") {\n\t\t\tvar content = children[0].children\n\t\t\tif (vnode.dom.innerHTML !== content) vnode.dom.innerHTML = content\n\t\t}\n\t\telse if (vnode.text != null || children != null && children.length !== 0) throw new Error("Child node of a contenteditable must be trusted")\n\t}\n\t//remove\n\tfunction removeNodes(vnodes, start, end, context) {\n\t\tfor (var i = start; i < end; i++) {\n\t\t\tvar vnode = vnodes[i]\n\t\t\tif (vnode != null) {\n\t\t\t\tif (vnode.skip) vnode.skip = false\n\t\t\t\telse removeNode(vnode, context)\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNode(vnode, context) {\n\t\tvar expected = 1, called = 0\n\t\tif (vnode.attrs && typeof vnode.attrs.onbeforeremove === "function") {\n\t\t\tvar result = vnode.attrs.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeremove === "function") {\n\t\t\tvar result = vnode._state.onbeforeremove.call(vnode.state, vnode)\n\t\t\tif (result != null && typeof result.then === "function") {\n\t\t\t\texpected++\n\t\t\t\tresult.then(continuation, continuation)\n\t\t\t}\n\t\t}\n\t\tcontinuation()\n\t\tfunction continuation() {\n\t\t\tif (++called === expected) {\n\t\t\t\tonremove(vnode)\n\t\t\t\tif (vnode.dom) {\n\t\t\t\t\tvar count0 = vnode.domSize || 1\n\t\t\t\t\tif (count0 > 1) {\n\t\t\t\t\t\tvar dom = vnode.dom\n\t\t\t\t\t\twhile (--count0) {\n\t\t\t\t\t\t\tremoveNodeFromDOM(dom.nextSibling)\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tremoveNodeFromDOM(vnode.dom)\n\t\t\t\t\tif (context != null && vnode.domSize == null && !hasIntegrationMethods(vnode.attrs) && typeof vnode.tag === "string") { //TODO test custom elements\n\t\t\t\t\t\tif (!context.pool) context.pool = [vnode]\n\t\t\t\t\t\telse context.pool.push(vnode)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction removeNodeFromDOM(node) {\n\t\tvar parent = node.parentNode\n\t\tif (parent != null) parent.removeChild(node)\n\t}\n\tfunction onremove(vnode) {\n\t\tif (vnode.attrs && typeof vnode.attrs.onremove === "function") vnode.attrs.onremove.call(vnode.state, vnode)\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onremove === "function") vnode._state.onremove.call(vnode.state, vnode)\n\t\tif (vnode.instance != null) onremove(vnode.instance)\n\t\telse {\n\t\t\tvar children = vnode.children\n\t\t\tif (Array.isArray(children)) {\n\t\t\t\tfor (var i = 0; i < children.length; i++) {\n\t\t\t\t\tvar child = children[i]\n\t\t\t\t\tif (child != null) onremove(child)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//attrs2\n\tfunction setAttrs(vnode, attrs2, ns) {\n\t\tfor (var key2 in attrs2) {\n\t\t\tsetAttr(vnode, key2, null, attrs2[key2], ns)\n\t\t}\n\t}\n\tfunction setAttr(vnode, key2, old, value, ns) {\n\t\tvar element = vnode.dom\n\t\tif (key2 === "key" || key2 === "is" || (old === value && !isFormAttribute(vnode, key2)) && typeof value !== "object" || typeof value === "undefined" || isLifecycleMethod(key2)) return\n\t\tvar nsLastIndex = key2.indexOf(":")\n\t\tif (nsLastIndex > -1 && key2.substr(0, nsLastIndex) === "xlink") {\n\t\t\telement.setAttributeNS("http://www.w3.org/1999/xlink", key2.slice(nsLastIndex + 1), value)\n\t\t}\n\t\telse if (key2[0] === "o" && key2[1] === "n" && typeof value === "function") updateEvent(vnode, key2, value)\n\t\telse if (key2 === "style") updateStyle(element, old, value)\n\t\telse if (key2 in element && !isAttribute(key2) && ns === undefined && !isCustomElement(vnode)) {\n\t\t\tif (key2 === "value") {\n\t\t\t\tvar normalized0 = "" + value // eslint-disable-line no-implicit-coercion\n\t\t\t\t//setting input[value] to same value by typing on focused element moves cursor to end in Chrome\n\t\t\t\tif ((vnode.tag === "input" || vnode.tag === "textarea") && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t//setting select[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "select") {\n\t\t\t\t\tif (value === null) {\n\t\t\t\t\t\tif (vnode.dom.selectedIndex === -1 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (old !== null && vnode.dom.value === normalized0 && vnode.dom === $doc.activeElement) return\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t//setting option[value] to same value while having select open blinks select dropdown in Chrome\n\t\t\t\tif (vnode.tag === "option" && old != null && vnode.dom.value === normalized0) return\n\t\t\t}\n\t\t\t// If you assign an input type1 that is not supported by IE 11 with an assignment expression, an error0 will occur.\n\t\t\tif (vnode.tag === "input" && key2 === "type") {\n\t\t\t\telement.setAttribute(key2, value)\n\t\t\t\treturn\n\t\t\t}\n\t\t\telement[key2] = value\n\t\t}\n\t\telse {\n\t\t\tif (typeof value === "boolean") {\n\t\t\t\tif (value) element.setAttribute(key2, "")\n\t\t\t\telse element.removeAttribute(key2)\n\t\t\t}\n\t\t\telse element.setAttribute(key2 === "className" ? "class" : key2, value)\n\t\t}\n\t}\n\tfunction setLateAttrs(vnode) {\n\t\tvar attrs2 = vnode.attrs\n\t\tif (vnode.tag === "select" && attrs2 != null) {\n\t\t\tif ("value" in attrs2) setAttr(vnode, "value", null, attrs2.value, undefined)\n\t\t\tif ("selectedIndex" in attrs2) setAttr(vnode, "selectedIndex", null, attrs2.selectedIndex, undefined)\n\t\t}\n\t}\n\tfunction updateAttrs(vnode, old, attrs2, ns) {\n\t\tif (attrs2 != null) {\n\t\t\tfor (var key2 in attrs2) {\n\t\t\t\tsetAttr(vnode, key2, old && old[key2], attrs2[key2], ns)\n\t\t\t}\n\t\t}\n\t\tif (old != null) {\n\t\t\tfor (var key2 in old) {\n\t\t\t\tif (attrs2 == null || !(key2 in attrs2)) {\n\t\t\t\t\tif (key2 === "className") key2 = "class"\n\t\t\t\t\tif (key2[0] === "o" && key2[1] === "n" && !isLifecycleMethod(key2)) updateEvent(vnode, key2, undefined)\n\t\t\t\t\telse if (key2 !== "key") vnode.dom.removeAttribute(key2)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tfunction isFormAttribute(vnode, attr) {\n\t\treturn attr === "value" || attr === "checked" || attr === "selectedIndex" || attr === "selected" && vnode.dom === $doc.activeElement\n\t}\n\tfunction isLifecycleMethod(attr) {\n\t\treturn attr === "oninit" || attr === "oncreate" || attr === "onupdate" || attr === "onremove" || attr === "onbeforeremove" || attr === "onbeforeupdate"\n\t}\n\tfunction isAttribute(attr) {\n\t\treturn attr === "href" || attr === "list" || attr === "form" || attr === "width" || attr === "height"// || attr === "type"\n\t}\n\tfunction isCustomElement(vnode){\n\t\treturn vnode.attrs.is || vnode.tag.indexOf("-") > -1\n\t}\n\tfunction hasIntegrationMethods(source) {\n\t\treturn source != null && (source.oncreate || source.onupdate || source.onbeforeremove || source.onremove)\n\t}\n\t//style\n\tfunction updateStyle(element, old, style) {\n\t\tif (old === style) element.style.cssText = "", old = null\n\t\tif (style == null) element.style.cssText = ""\n\t\telse if (typeof style === "string") element.style.cssText = style\n\t\telse {\n\t\t\tif (typeof old === "string") element.style.cssText = ""\n\t\t\tfor (var key2 in style) {\n\t\t\t\telement.style[key2] = style[key2]\n\t\t\t}\n\t\t\tif (old != null && typeof old !== "string") {\n\t\t\t\tfor (var key2 in old) {\n\t\t\t\t\tif (!(key2 in style)) element.style[key2] = ""\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t//event\n\tfunction updateEvent(vnode, key2, value) {\n\t\tvar element = vnode.dom\n\t\tvar callback = typeof onevent !== "function" ? value : function(e) {\n\t\t\tvar result = value.call(element, e)\n\t\t\tonevent.call(element, e)\n\t\t\treturn result\n\t\t}\n\t\tif (key2 in element) element[key2] = typeof value === "function" ? callback : null\n\t\telse {\n\t\t\tvar eventName = key2.slice(2)\n\t\t\tif (vnode.events === undefined) vnode.events = {}\n\t\t\tif (vnode.events[key2] === callback) return\n\t\t\tif (vnode.events[key2] != null) element.removeEventListener(eventName, vnode.events[key2], false)\n\t\t\tif (typeof value === "function") {\n\t\t\t\tvnode.events[key2] = callback\n\t\t\t\telement.addEventListener(eventName, vnode.events[key2], false)\n\t\t\t}\n\t\t}\n\t}\n\t//lifecycle\n\tfunction initLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.oninit === "function") source.oninit.call(vnode.state, vnode)\n\t\tif (typeof source.oncreate === "function") hooks.push(source.oncreate.bind(vnode.state, vnode))\n\t}\n\tfunction updateLifecycle(source, vnode, hooks) {\n\t\tif (typeof source.onupdate === "function") hooks.push(source.onupdate.bind(vnode.state, vnode))\n\t}\n\tfunction shouldNotUpdate(vnode, old) {\n\t\tvar forceVnodeUpdate, forceComponentUpdate\n\t\tif (vnode.attrs != null && typeof vnode.attrs.onbeforeupdate === "function") forceVnodeUpdate = vnode.attrs.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (typeof vnode.tag !== "string" && typeof vnode._state.onbeforeupdate === "function") forceComponentUpdate = vnode._state.onbeforeupdate.call(vnode.state, vnode, old)\n\t\tif (!(forceVnodeUpdate === undefined && forceComponentUpdate === undefined) && !forceVnodeUpdate && !forceComponentUpdate) {\n\t\t\tvnode.dom = old.dom\n\t\t\tvnode.domSize = old.domSize\n\t\t\tvnode.instance = old.instance\n\t\t\treturn true\n\t\t}\n\t\treturn false\n\t}\n\tfunction render(dom, vnodes) {\n\t\tif (!dom) throw new Error("Ensure the DOM element being passed to m.route/m.mount/m.render is not undefined.")\n\t\tvar hooks = []\n\t\tvar active = $doc.activeElement\n\t\tvar namespace = dom.namespaceURI\n\t\t// First time0 rendering into a node clears it out\n\t\tif (dom.vnodes == null) dom.textContent = ""\n\t\tif (!Array.isArray(vnodes)) vnodes = [vnodes]\n\t\tupdateNodes(dom, dom.vnodes, Vnode.normalizeChildren(vnodes), false, hooks, null, namespace === "http://www.w3.org/1999/xhtml" ? undefined : namespace)\n\t\tdom.vnodes = vnodes\n\t\tfor (var i = 0; i < hooks.length; i++) hooks[i]()\n\t\tif ($doc.activeElement !== active) active.focus()\n\t}\n\treturn {render: render, setEventCallback: setEventCallback}\n}\nfunction throttle(callback) {\n\t//60fps translates to 16.6ms, round it down since setTimeout requires int\n\tvar time = 16\n\tvar last = 0, pending = null\n\tvar timeout = typeof requestAnimationFrame === "function" ? requestAnimationFrame : setTimeout\n\treturn function() {\n\t\tvar now = Date.now()\n\t\tif (last === 0 || now - last >= time) {\n\t\t\tlast = now\n\t\t\tcallback()\n\t\t}\n\t\telse if (pending === null) {\n\t\t\tpending = timeout(function() {\n\t\t\t\tpending = null\n\t\t\t\tcallback()\n\t\t\t\tlast = Date.now()\n\t\t\t}, time - (now - last))\n\t\t}\n\t}\n}\nvar _11 = function($window) {\n\tvar renderService = coreRenderer($window)\n\trenderService.setEventCallback(function(e) {\n\t\tif (e.redraw === false) e.redraw = undefined\n\t\telse redraw()\n\t})\n\tvar callbacks = []\n\tfunction subscribe(key1, callback) {\n\t\tunsubscribe(key1)\n\t\tcallbacks.push(key1, throttle(callback))\n\t}\n\tfunction unsubscribe(key1) {\n\t\tvar index = callbacks.indexOf(key1)\n\t\tif (index > -1) callbacks.splice(index, 2)\n\t}\n\tfunction redraw() {\n\t\tfor (var i = 1; i < callbacks.length; i += 2) {\n\t\t\tcallbacks[i]()\n\t\t}\n\t}\n\treturn {subscribe: subscribe, unsubscribe: unsubscribe, redraw: redraw, render: renderService.render}\n}\nvar redrawService = _11(window)\nrequestService.setCompletionCallback(redrawService.redraw)\nvar _16 = function(redrawService0) {\n\treturn function(root, component) {\n\t\tif (component === null) {\n\t\t\tredrawService0.render(root, [])\n\t\t\tredrawService0.unsubscribe(root)\n\t\t\treturn\n\t\t}\n\t\t\n\t\tif (component.view == null && typeof component !== "function") throw new Error("m.mount(element, component) expects a component, not a vnode")\n\t\t\n\t\tvar run0 = function() {\n\t\t\tredrawService0.render(root, Vnode(component))\n\t\t}\n\t\tredrawService0.subscribe(root, run0)\n\t\tredrawService0.redraw()\n\t}\n}\nm.mount = _16(redrawService)\nvar Promise = PromisePolyfill\nvar parseQueryString = function(string) {\n\tif (string === "" || string == null) return {}\n\tif (string.charAt(0) === "?") string = string.slice(1)\n\tvar entries = string.split("&"), data0 = {}, counters = {}\n\tfor (var i = 0; i < entries.length; i++) {\n\t\tvar entry = entries[i].split("=")\n\t\tvar key5 = decodeURIComponent(entry[0])\n\t\tvar value = entry.length === 2 ? decodeURIComponent(entry[1]) : ""\n\t\tif (value === "true") value = true\n\t\telse if (value === "false") value = false\n\t\tvar levels = key5.split(/\\]\\[?|\\[/)\n\t\tvar cursor = data0\n\t\tif (key5.indexOf("[") > -1) levels.pop()\n\t\tfor (var j = 0; j < levels.length; j++) {\n\t\t\tvar level = levels[j], nextLevel = levels[j + 1]\n\t\t\tvar isNumber = nextLevel == "" || !isNaN(parseInt(nextLevel, 10))\n\t\t\tvar isValue = j === levels.length - 1\n\t\t\tif (level === "") {\n\t\t\t\tvar key5 = levels.slice(0, j).join()\n\t\t\t\tif (counters[key5] == null) counters[key5] = 0\n\t\t\t\tlevel = counters[key5]++\n\t\t\t}\n\t\t\tif (cursor[level] == null) {\n\t\t\t\tcursor[level] = isValue ? value : isNumber ? [] : {}\n\t\t\t}\n\t\t\tcursor = cursor[level]\n\t\t}\n\t}\n\treturn data0\n}\nvar coreRouter = function($window) {\n\tvar supportsPushState = typeof $window.history.pushState === "function"\n\tvar callAsync0 = typeof setImmediate === "function" ? setImmediate : setTimeout\n\tfunction normalize1(fragment0) {\n\t\tvar data = $window.location[fragment0].replace(/(?:%[a-f89][a-f0-9])+/gim, decodeURIComponent)\n\t\tif (fragment0 === "pathname" && data[0] !== "/") data = "/" + data\n\t\treturn data\n\t}\n\tvar asyncId\n\tfunction debounceAsync(callback0) {\n\t\treturn function() {\n\t\t\tif (asyncId != null) return\n\t\t\tasyncId = callAsync0(function() {\n\t\t\t\tasyncId = null\n\t\t\t\tcallback0()\n\t\t\t})\n\t\t}\n\t}\n\tfunction parsePath(path, queryData, hashData) {\n\t\tvar queryIndex = path.indexOf("?")\n\t\tvar hashIndex = path.indexOf("#")\n\t\tvar pathEnd = queryIndex > -1 ? queryIndex : hashIndex > -1 ? hashIndex : path.length\n\t\tif (queryIndex > -1) {\n\t\t\tvar queryEnd = hashIndex > -1 ? hashIndex : path.length\n\t\t\tvar queryParams = parseQueryString(path.slice(queryIndex + 1, queryEnd))\n\t\t\tfor (var key4 in queryParams) queryData[key4] = queryParams[key4]\n\t\t}\n\t\tif (hashIndex > -1) {\n\t\t\tvar hashParams = parseQueryString(path.slice(hashIndex + 1))\n\t\t\tfor (var key4 in hashParams) hashData[key4] = hashParams[key4]\n\t\t}\n\t\treturn path.slice(0, pathEnd)\n\t}\n\tvar router = {prefix: "#!"}\n\trouter.getPath = function() {\n\t\tvar type2 = router.prefix.charAt(0)\n\t\tswitch (type2) {\n\t\t\tcase "#": return normalize1("hash").slice(router.prefix.length)\n\t\t\tcase "?": return normalize1("search").slice(router.prefix.length) + normalize1("hash")\n\t\t\tdefault: return normalize1("pathname").slice(router.prefix.length) + normalize1("search") + normalize1("hash")\n\t\t}\n\t}\n\trouter.setPath = function(path, data, options) {\n\t\tvar queryData = {}, hashData = {}\n\t\tpath = parsePath(path, queryData, hashData)\n\t\tif (data != null) {\n\t\t\tfor (var key4 in data) queryData[key4] = data[key4]\n\t\t\tpath = path.replace(/:([^\\/]+)/g, function(match2, token) {\n\t\t\t\tdelete queryData[token]\n\t\t\t\treturn data[token]\n\t\t\t})\n\t\t}\n\t\tvar query = buildQueryString(queryData)\n\t\tif (query) path += "?" + query\n\t\tvar hash = buildQueryString(hashData)\n\t\tif (hash) path += "#" + hash\n\t\tif (supportsPushState) {\n\t\t\tvar state = options ? options.state : null\n\t\t\tvar title = options ? options.title : null\n\t\t\t$window.onpopstate()\n\t\t\tif (options && options.replace) $window.history.replaceState(state, title, router.prefix + path)\n\t\t\telse $window.history.pushState(state, title, router.prefix + path)\n\t\t}\n\t\telse $window.location.href = router.prefix + path\n\t}\n\trouter.defineRoutes = function(routes, resolve, reject) {\n\t\tfunction resolveRoute() {\n\t\t\tvar path = router.getPath()\n\t\t\tvar params = {}\n\t\t\tvar pathname = parsePath(path, params, params)\n\t\t\tvar state = $window.history.state\n\t\t\tif (state != null) {\n\t\t\t\tfor (var k in state) params[k] = state[k]\n\t\t\t}\n\t\t\tfor (var route0 in routes) {\n\t\t\t\tvar matcher = new RegExp("^" + route0.replace(/:[^\\/]+?\\.{3}/g, "(.*?)").replace(/:[^\\/]+/g, "([^\\\\/]+)") + "\\/?$")\n\t\t\t\tif (matcher.test(pathname)) {\n\t\t\t\t\tpathname.replace(matcher, function() {\n\t\t\t\t\t\tvar keys = route0.match(/:[^\\/]+/g) || []\n\t\t\t\t\t\tvar values = [].slice.call(arguments, 1, -2)\n\t\t\t\t\t\tfor (var i = 0; i < keys.length; i++) {\n\t\t\t\t\t\t\tparams[keys[i].replace(/:|\\./g, "")] = decodeURIComponent(values[i])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(routes[route0], params, path, route0)\n\t\t\t\t\t})\n\t\t\t\t\treturn\n\t\t\t\t}\n\t\t\t}\n\t\t\treject(path, params)\n\t\t}\n\t\tif (supportsPushState) $window.onpopstate = debounceAsync(resolveRoute)\n\t\telse if (router.prefix.charAt(0) === "#") $window.onhashchange = resolveRoute\n\t\tresolveRoute()\n\t}\n\treturn router\n}\nvar _20 = function($window, redrawService0) {\n\tvar routeService = coreRouter($window)\n\tvar identity = function(v) {return v}\n\tvar render1, component, attrs3, currentPath, lastUpdate\n\tvar route = function(root, defaultRoute, routes) {\n\t\tif (root == null) throw new Error("Ensure the DOM element that was passed to `m.route` is not undefined")\n\t\tvar run1 = function() {\n\t\t\tif (render1 != null) redrawService0.render(root, render1(Vnode(component, attrs3.key, attrs3)))\n\t\t}\n\t\tvar bail = function(path) {\n\t\t\tif (path !== defaultRoute) routeService.setPath(defaultRoute, null, {replace: true})\n\t\t\telse throw new Error("Could not resolve default route " + defaultRoute)\n\t\t}\n\t\trouteService.defineRoutes(routes, function(payload, params, path) {\n\t\t\tvar update = lastUpdate = function(routeResolver, comp) {\n\t\t\t\tif (update !== lastUpdate) return\n\t\t\t\tcomponent = comp != null && (typeof comp.view === "function" || typeof comp === "function")? comp : "div"\n\t\t\t\tattrs3 = params, currentPath = path, lastUpdate = null\n\t\t\t\trender1 = (routeResolver.render || identity).bind(routeResolver)\n\t\t\t\trun1()\n\t\t\t}\n\t\t\tif (payload.view || typeof payload === "function") update({}, payload)\n\t\t\telse {\n\t\t\t\tif (payload.onmatch) {\n\t\t\t\t\tPromise.resolve(payload.onmatch(params, path)).then(function(resolved) {\n\t\t\t\t\t\tupdate(payload, resolved)\n\t\t\t\t\t}, bail)\n\t\t\t\t}\n\t\t\t\telse update(payload, "div")\n\t\t\t}\n\t\t}, bail)\n\t\tredrawService0.subscribe(root, run1)\n\t}\n\troute.set = function(path, data, options) {\n\t\tif (lastUpdate != null) {\n\t\t\toptions = options || {}\n\t\t\toptions.replace = true\n\t\t}\n\t\tlastUpdate = null\n\t\trouteService.setPath(path, data, options)\n\t}\n\troute.get = function() {return currentPath}\n\troute.prefix = function(prefix0) {routeService.prefix = prefix0}\n\troute.link = function(vnode1) {\n\t\tvnode1.dom.setAttribute("href", routeService.prefix + vnode1.attrs.href)\n\t\tvnode1.dom.onclick = function(e) {\n\t\t\tif (e.ctrlKey || e.metaKey || e.shiftKey || e.which === 2) return\n\t\t\te.preventDefault()\n\t\t\te.redraw = false\n\t\t\tvar href = this.getAttribute("href")\n\t\t\tif (href.indexOf(routeService.prefix) === 0) href = href.slice(routeService.prefix.length)\n\t\t\troute.set(href, undefined, undefined)\n\t\t}\n\t}\n\troute.param = function(key3) {\n\t\tif(typeof attrs3 !== "undefined" && typeof key3 !== "undefined") return attrs3[key3]\n\t\treturn attrs3\n\t}\n\treturn route\n}\nm.route = _20(window, redrawService)\nm.withAttr = function(attrName, callback1, context) {\n\treturn function(e) {\n\t\tcallback1.call(context || this, attrName in e.currentTarget ? e.currentTarget[attrName] : e.currentTarget.getAttribute(attrName))\n\t}\n}\nvar _28 = coreRenderer(window)\nm.render = _28.render\nm.redraw = redrawService.redraw\nm.request = requestService.request\nm.jsonp = requestService.jsonp\nm.parseQueryString = parseQueryString\nm.buildQueryString = buildQueryString\nm.version = "1.1.3"\nm.vnode = Vnode\nif (true) module["exports"] = m\nelse window.m = m\n}());\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(13).setImmediate, __webpack_require__(3)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///0\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.fakeClick = exports.hexToRgba = exports.popoverContent = exports.summary = exports.legend = exports.spliceLinksForNode = exports.findNode = exports.findNodeIndex = exports.clickVar = exports.reset = exports.nodes = exports.allNodes = exports.valueKey = exports.zparams = exports.logArray = exports.righttab = exports.summaryHold = exports.subset = exports.lefttab = exports.timeColor = exports.varColor = exports.nomColor = exports.dvColor = exports.csColor = exports.inspect = undefined;\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nexports.cdb = cdb;\nexports.main = main;\nexports.getVariableData = getVariableData;\nexports.forceSwitch = forceSwitch;\nexports.estimate = estimate;\nexports.erase = erase;\nexports.tabLeft = tabLeft;\nexports.tabRight = tabRight;\nexports.panelPlots = panelPlots;\nexports.borderState = borderState;\nexports.subsetSelect = subsetSelect;\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _plots = __webpack_require__(2);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n// hostname default - the app will use it to obtain the variable metadata\n// (ddi) and pre-processed data info if the file id is supplied as an\n// argument (for ex., gui.html?dfId=17), but hostname isn't.\n// Edit it to suit your installation.\n// (NOTE that if the file id isn't supplied, the app will default to the\n// local files specified below!)\n// NEW: it is also possible now to supply complete urls for the ddi and\n// the tab-delimited data file; the parameters are ddiurl and dataurl.\n// These new parameters are optional. If they are not supplied, the app\n// will go the old route - will try to cook standard dataverse urls\n// for both the data and metadata, if the file id is supplied; or the\n// local files if nothing is supplied.\n\n// FOR variables \"production\" and \"rappURL\", see /template/index.html\n//\n//let production = false;\n//let rappURL = 'http://127.0.0.1:8080/rook-custom/'; // via Django -> to RApache/rook\n//let rappURL = 'http://0.0.0.0:8000/custom/'; // Direct to RApache/rook\n\n// for debugging\nfunction cdb(msg) {\n    if (!production) {\n        console.log(msg);\n    };\n};\n\nvar inspect = exports.inspect = function inspect(obj) {\n    console.log(obj);\n    return obj;\n};\n\n// initial color scale used to establish the initial colors of nodes\n// allNodes.push() below establishes a field for the master node array allNodes called \"nodeCol\" and assigns a color from this scale to that field\n// everything there after should refer to the nodeCol and not the color scale, this enables us to update colors and pass the variable type to R based on its coloring\nvar colors = d3.scale.category20();\nvar csColor = exports.csColor = '#419641';\nvar dvColor = exports.dvColor = '#28a4c9';\nvar grayColor = '#c0c0c0';\nvar nomColor = exports.nomColor = '#ff6600';\nvar varColor = exports.varColor = '#f0f8ff'; // d3.rgb(\"aliceblue\");\nvar taggedColor = '#f5f5f5'; // d3.rgb(\"whitesmoke\");\nvar timeColor = exports.timeColor = '#2d6ca2';\n\nvar lefttab = exports.lefttab = 'tab1'; // current tab in left panel\nvar subset = exports.subset = false;\nvar summaryHold = exports.summaryHold = false;\nvar righttab = exports.righttab = 'btnModels'; // current tab in right panel\n\n// transformation toolbar options\nvar t = void 0,\n    typeTransform = void 0;\nvar transformList = 'log(d) exp(d) d^2 sqrt(d) interact(d,e)'.split(' ');\nvar transformVar = '';\n\n// var list for each space contain variables in original data\n// plus trans in that space\nvar trans = [];\nvar preprocess = {}; // hold pre-processed data\nvar spaces = [];\n\n// layout function constants\nvar layoutAdd = \"add\";\nvar layoutMove = \"move\";\n\n// Radius of circle\nvar allR = 40;\n\n// space index\nvar myspace = 0;\n\nvar forcetoggle = [\"true\"];\nvar priv = true;\n\nvar logArray = exports.logArray = [];\nvar zparams = exports.zparams = {\n    zdata: [],\n    zedges: [],\n    ztime: [],\n    znom: [],\n    zcross: [],\n    zmodel: \"\",\n    zvars: [],\n    zdv: [],\n    zdataurl: \"\",\n    zsubset: [],\n    zsetx: [],\n    zmodelcount: 0,\n    zplot: [],\n    zsessionid: \"\",\n    zdatacite: \"\"\n};\n\nvar modelCount = 0;\nvar valueKey = exports.valueKey = [];\nvar allNodes = exports.allNodes = [];\nvar allResults = [];\nvar nodes = exports.nodes = [];\nvar links = [];\nvar mods = {};\nvar estimated = false;\nvar rightClickLast = false;\nvar selInteract = false;\nvar callHistory = []; // transform and subset calls\n\nvar svg, width, height, div, estimateLadda, selectLadda;\nvar arc3, arc4;\n\nvar byId = function byId(id) {\n    return document.getElementById(id);\n};\n\n// page reload linked to btnReset\nvar reset = exports.reset = function reloadPage() {\n    location.reload();\n};\n\nvar dataurl;\nfunction main(fileid, hostname, ddiurl, dataurl) {\n    dataurl = dataurl;\n    if (production && fileid == \"\") {\n        alert(\"Error: No fileid has been provided.\");\n        throw new Error(\"Error: No fileid has been provided.\");\n    }\n\n    var dataverseurl = '';\n    if (hostname) dataverseurl = \"https://\" + hostname;else if (production) dataverseurl = \"%PRODUCTION_DATAVERSE_URL%\";else dataverseurl = \"http://localhost:8080\";\n\n    if (fileid && !dataurl) {\n        // file id supplied; assume we are dealing with dataverse and cook a standard dataverse data access url\n        // with the fileid supplied and the hostname we have supplied or configured\n        dataurl = dataverseurl + \"/api/access/datafile/\" + fileid;\n\n        // rp; temporarily remove this\n        //dataurl = dataurl + \"?key=\" + apikey;\n    }\n\n    svg = d3.select(\"#whitespace\");\n\n    var tempWidth = d3.select(\"#main.left\").style(\"width\");\n    width = tempWidth.substring(0, tempWidth.length - 2);\n    height = $(window).height() - 120; // Hard coding for header and footer and bottom margin.\n\n    estimateLadda = Ladda.create(byId(\"btnEstimate\"));\n    selectLadda = Ladda.create(byId(\"btnSelect\"));\n\n    var colorTime = false;\n    var colorCS = false;\n\n    var depVar = false;\n    var subsetdiv = false;\n    var setxdiv = false;\n\n    //Width and height for histgrams\n    var barwidth = 1.3 * allR;\n    var barheight = 0.5 * allR;\n    var barPadding = 0.35;\n    var barnumber = 7;\n\n    var arc = function arc(start, end) {\n        return d3.svg.arc().innerRadius(allR + 5).outerRadius(allR + 20).startAngle(start).endAngle(end);\n    };\n    var _ref = [arc(0, 3.2), arc(0, 1), arc(1.1, 2.2)],\n        arc0 = _ref[0],\n        arc1 = _ref[1],\n        arc2 = _ref[2];\n\n    arc3 = arc(2.3, 3.3);\n    arc4 = arc(4.3, 5.3);\n\n    // From .csv\n    var dataset2 = [];\n    var lablArray = [];\n    var hold = [];\n    var subsetNodes = [];\n\n    // collapsable user log\n    $('#collapseLog').on('shown.bs.collapse', function () {\n        d3.select(\"#collapseLog div.panel-body\").selectAll(\"p\").data(logArray).enter().append(\"p\").text(function (d) {\n            return d;\n        });\n    });\n    $('#collapseLog').on('hidden.bs.collapse', function () {\n        d3.select(\"#collapseLog div.panel-body\").selectAll(\"p\").remove();\n    });\n\n    // default to California PUMS subset\n    var data = 'data/' + (false ? 'PUMS5small' : 'fearonLaitin');\n    var metadataurl = ddiurl || (fileid ? dataverseurl + '/api/meta/datafile/' + fileid : data + '.xml');\n    // read pre-processed metadata and data\n    var pURL = dataurl ? dataurl + '&format=prep' : data + '.json';\n    cdb('pURL: ' + pURL);\n    // loads all external data: metadata (DVN's ddi), preprocessed (for plotting distributions), and zeligmodels (produced by Zelig) and initiates the data download to the server\n    var url, p, v, _callback;\n    readPreprocess(url = pURL, p = preprocess, v = null, _callback = function callback() {\n        d3.xml(metadataurl, \"application/xml\", function (xml) {\n            var vars = xml.documentElement.getElementsByTagName(\"var\");\n            var temp = xml.documentElement.getElementsByTagName(\"fileName\");\n            zparams.zdata = temp[0].childNodes[0].nodeValue;\n\n            var cite = xml.documentElement.getElementsByTagName(\"biblCit\");\n            zparams.zdatacite = cite[0].childNodes[0].nodeValue;\n            // clean citation so POST is valid json\n            zparams.zdatacite = zparams.zdatacite.replace(/\\&/g, \"and\").replace(/\\;/g, \",\").replace(/\\%/g, \"-\");\n\n            // dataset name trimmed to 12 chars\n            var dataname = zparams.zdata.replace(/\\.(.*)/, ''); // drop file extension\n            d3.select(\"#dataName\").html(dataname);\n            $('#cite div.panel-body').text(zparams.zdatacite);\n\n            // Put dataset name, from meta-data, into page title\n            d3.select(\"title\").html(\"TwoRavens \" + dataname);\n            // temporary values for hold that correspond to histogram bins\n            hold = [.6, .2, .9, .8, .1, .3, .4];\n            for (var i = 0; i < vars.length; i++) {\n                valueKey[i] = vars[i].attributes.name.nodeValue;\n                lablArray[i] = vars[i].getElementsByTagName(\"labl\").length == 0 ? \"no label\" : vars[i].getElementsByTagName(\"labl\")[0].childNodes[0].nodeValue;\n                var datasetcount = d3.layout.histogram().bins(barnumber).frequency(false)([0, 0, 0, 0, 0]);\n                // contains all the preprocessed data we have for the variable, as well as UI data pertinent to that variable, such as setx values (if the user has selected them) and pebble coordinates\n                var obj = {\n                    id: i,\n                    reflexive: false,\n                    name: valueKey[i],\n                    labl: lablArray[i],\n                    data: [5, 15, 20, 0, 5, 15, 20],\n                    count: hold,\n                    nodeCol: colors(i),\n                    baseCol: colors(i),\n                    strokeColor: _plots.selVarColor,\n                    strokeWidth: \"1\",\n                    subsetplot: false,\n                    subsetrange: [\"\", \"\"],\n                    setxplot: false,\n                    setxvals: [\"\", \"\"],\n                    grayout: false\n                };\n                jQuery.extend(true, obj, preprocess[valueKey[i]]);\n                allNodes.push(obj);\n            };\n\n            // read the zelig models and populate model list in right panel\n            d3.json(\"data/zelig5models.json\", function (err, data) {\n                if (err) return console.warn(err);\n                cdb(\"zelig models json: \", data);\n                for (var key in data.zelig5models) {\n                    if (data.zelig5models.hasOwnProperty(key)) mods[data.zelig5models[key].name[0]] = data.zelig5models[key].description[0];\n                }\n                d3.json(\"data/zelig5choicemodels.json\", function (err, data) {\n                    if (err) return console.warn(err);\n                    cdb(\"zelig choice models json: \", data);\n                    for (var _key in data.zelig5choicemodels) {\n                        if (data.zelig5choicemodels.hasOwnProperty(_key)) mods[data.zelig5choicemodels[_key].name[0]] = data.zelig5choicemodels[_key].description[0];\n                    }\n                    scaffolding(_callback = layout);\n                    dataDownload();\n                });\n            });\n        });\n    });\n}\n\nvar $fill = function $fill(obj, op, d1, d2) {\n    return d3.select(obj).transition().attr('fill-opacity', op).delay(d1).duration(d2);\n};\nvar fill = function fill(d, id, op, d1, d2) {\n    return $fill('#' + id + d.id, op, d1, d2);\n};\nvar fillThis = function fillThis(self, op, d1, d2) {\n    return $fill(self, op, d1, d2);\n};\n\n// scaffolding is called after all external data are guaranteed to have been read to completion. this populates the left panel with variable names, the right panel with model names, the transformation tool, an the associated mouseovers. its callback is layout(), which initializes the modeling space\nfunction scaffolding(callback) {\n    var _this = this;\n\n    // establishing the transformation element\n    d3.select(\"#transformations\").append(\"input\").attr(\"id\", \"tInput\").attr(\"class\", \"form-control\").attr(\"type\", \"text\").attr(\"value\", \"Variable transformation\");\n\n    // variable dropdown\n    d3.select(\"#transformations\").append(\"ul\").attr(\"id\", \"transSel\").style(\"display\", \"none\").style(\"background-color\", varColor).selectAll('li').data([\"a\", \"b\"]) //set to variables in model space as they're added\n    .enter().append(\"li\").text(function (d) {\n        return d;\n    });\n\n    // function dropdown\n    d3.select(\"#transformations\").append(\"ul\").attr(\"id\", \"transList\").style(\"display\", \"none\").style(\"background-color\", varColor).selectAll('li').data(transformList).enter().append(\"li\").text(function (d) {\n        return d;\n    });\n\n    $('#tInput').click(function () {\n        var t = byId('transSel').style.display;\n        if (t !== \"none\") {\n            // if variable list is displayed when input is clicked...\n            $('#transSel').fadeOut(100);\n            return false;\n        }\n        var t1 = byId('transList').style.display;\n        if (t1 !== \"none\") {\n            // if function list is displayed when input is clicked...\n            $('#transList').fadeOut(100);\n            return false;\n        }\n\n        // highlight the text\n        $(_this).select();\n        var pos = $('#tInput').offset();\n        pos.top += $('#tInput').width();\n        $('#transSel').fadeIn(100);\n        return false;\n    });\n\n    var n;\n    $('#tInput').keyup(function (evt) {\n        var t = byId('transSel').style.display;\n        var t1 = byId('transList').style.display;\n        if (t != \"none\") $('#transSel').fadeOut(100);else if (t1 != \"none\") $('#transList').fadeOut(100);\n\n        if (evt.keyCode == 13) {\n            // keyup on Enter\n            n = $('#tInput').val();\n            var t = transParse(n = n);\n            if (!t) return;\n            transform(n = t.slice(0, t.length - 1), t = t[t.length - 1], typeTransform = false);\n        }\n    });\n\n    var t;\n    $('#transList li').click(function (evt) {\n        // if interact is selected, show variable list again\n        if ($(this).text() == \"interact(d,e)\") {\n            $('#tInput').val(tvar.concat('*'));\n            selInteract = true;\n            $(this).parent().fandeOut(100);\n            $('#transSel').fadeIn(100);\n            evt.stopPropagation();\n            return;\n        }\n\n        var tvar = $('#tInput').val();\n        var tfunc = $(this).text().replace(\"d\", \"_transvar0\");\n        var tcall = $(this).text().replace(\"d\", tvar);\n        $('#tInput').val(tcall);\n        $(this).parent().fadeOut(100);\n        evt.stopPropagation();\n        transform(n = tvar, t = tfunc, typeTransform = false);\n    });\n\n    d3.select(\"#models\").style('height', 2000).style('overfill', 'scroll');\n\n    d3.select(\"#models\").selectAll(\"p\").data(Object.keys(mods)).enter().append(\"p\").attr(\"id\", \"_model_\".concat).text(function (d) {\n        return d;\n    }).style('background-color', function (d) {\n        return varColor;\n    }).attr(\"data-container\", \"body\").attr(\"data-toggle\", \"popover\").attr(\"data-trigger\", \"hover\").attr(\"data-placement\", \"top\").attr(\"data-html\", \"true\").attr(\"onmouseover\", \"$(this).popover('toggle');\").attr(\"onmouseout\", \"$(this).popover('toggle');\").attr(\"data-original-title\", \"Model Description\").attr(\"data-content\", function (d) {\n        return mods[d];\n    });\n\n    // call layout() because at this point all scaffolding is up and ready\n    if (typeof callback == \"function\") {\n        callback();\n        _mithril2.default.redraw();\n    }\n}\n\nvar splice = function splice(color, text) {\n    for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key2 = 2; _key2 < _len; _key2++) {\n        args[_key2 - 2] = arguments[_key2];\n    }\n\n    args.forEach(function (x) {\n        if (color != x[0]) return;\n        var idx = zparams[x[1]].indexOf(text);\n        idx > -1 && zparams[x[1]].splice(idx, 1);\n    });\n};\n\nvar clickVar = exports.clickVar = void 0;\n\nfunction layout(v) {\n    var myValues = [];\n    exports.nodes = nodes = [];\n    links = [];\n\n    if (v == layoutAdd || v == layoutMove) {\n        for (var j = 0; j < zparams.zvars.length; j++) {\n            var ii = findNodeIndex(zparams.zvars[j]);\n            if (allNodes[ii].grayout) continue;\n            nodes.push(allNodes[ii]);\n            var selectMe = zparams.zvars[j].replace(/\\W/g, \"_\");\n            selectMe = \"#\".concat(selectMe);\n            d3.select(selectMe).style('background-color', function () {\n                return hexToRgba(nodes[j].strokeColor);\n            });\n        }\n\n        for (var j = 0; j < zparams.zedges.length; j++) {\n            var mysrc = nodeIndex(zparams.zedges[j][0]);\n            var mytgt = nodeIndex(zparams.zedges[j][1]);\n            links.push({\n                source: nodes[mysrc],\n                target: nodes[mytgt],\n                left: false,\n                right: true\n            });\n        }\n    } else {\n        if (allNodes.length > 2) {\n            exports.nodes = nodes = [allNodes[0], allNodes[1], allNodes[2]];\n            links = [{\n                source: nodes[1],\n                target: nodes[0],\n                left: false,\n                right: true\n            }, {\n                source: nodes[0],\n                target: nodes[2],\n                left: false,\n                right: true\n            }];\n        } else if (allNodes.length === 2) {\n            exports.nodes = nodes = [allNodes[0], allNodes[1]];\n            links = [{\n                source: nodes[1],\n                target: nodes[0],\n                left: false,\n                right: true\n            }];\n        } else if (allNodes.length === 1) {\n            exports.nodes = nodes = [allNodes[0]];\n        } else {\n            alert(\"There are zero variables in the metadata.\");\n            return;\n        }\n    }\n\n    panelPlots(); // after nodes is populated, add subset and setx panels\n\n    var force = d3.layout.force().nodes(nodes).links(links).size([width, height]).linkDistance(150).charge(-800).on('tick', tick);\n\n    // define arrow markers for graph links\n    svg.append('svg:defs').append('svg:marker').attr('id', 'end-arrow').attr('viewBox', '0 -5 10 10').attr('refX', 6).attr('markerWidth', 3).attr('markerHeight', 3).attr('orient', 'auto').append('svg:path').attr('d', 'M0,-5L10,0L0,5').style('fill', '#000');\n\n    svg.append('svg:defs').append('svg:marker').attr('id', 'start-arrow').attr('viewBox', '0 -5 10 10').attr('refX', 4).attr('markerWidth', 3).attr('markerHeight', 3).attr('orient', 'auto').append('svg:path').attr('d', 'M10,-5L0,0L10,5').style('fill', '#000');\n\n    // line displayed when dragging new nodes\n    var drag_line = svg.append('svg:path').attr('class', 'link dragline hidden').attr('d', 'M0,0L0,0');\n\n    // handles to link and node element groups\n    var path = svg.append('svg:g').selectAll('path'),\n        circle = svg.append('svg:g').selectAll('g');\n\n    // mouse event vars\n    var selected_node = null,\n        selected_link = null,\n        mousedown_link = null,\n        mousedown_node = null,\n        mouseup_node = null;\n\n    function resetMouseVars() {\n        mousedown_node = null;\n        mouseup_node = null;\n        mousedown_link = null;\n    }\n\n    // update force layout (called automatically each iteration)\n    function tick() {\n        // draw directed edges with proper padding from node centers\n        path.attr('d', function (d) {\n            var deltaX = d.target.x - d.source.x,\n                deltaY = d.target.y - d.source.y,\n                dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),\n                normX = deltaX / dist,\n                normY = deltaY / dist,\n                sourcePadding = d.left ? allR + 5 : allR,\n                targetPadding = d.right ? allR + 5 : allR,\n                sourceX = d.source.x + sourcePadding * normX,\n                sourceY = d.source.y + sourcePadding * normY,\n                targetX = d.target.x - targetPadding * normX,\n                targetY = d.target.y - targetPadding * normY;\n            return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;\n        });\n        circle.attr('transform', function (d) {\n            return 'translate(' + d.x + ',' + d.y + ')';\n        });\n    }\n\n    exports.clickVar = clickVar = function clickVar() {\n        // every time a variable in leftpanel is clicked, nodes updates and background color changes\n        if (findNodeIndex(this.id, true).grayout) return;\n        zparams.zvars = [];\n        var text = d3.select(this).text();\n        var node = findNode(text);\n        if (nodes.map(function (n) {\n            return n.name;\n        }).includes(text)) {\n            nodes.splice(node.index, 1);\n            spliceLinksForNode(node);\n            splice(node.strokeColor, text, [dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']);\n            nodeReset(node);\n            legend();\n        } else {\n            nodes.push(node);\n            if (nodes.length === 0) nodes[0].reflexive = true;\n        }\n        panelPlots();\n        restart();\n    };\n\n    d3.select(\"#models\").selectAll(\"p\") // models tab\n    //  d3.select(\"#Display_content\")\n    .on(\"click\", function () {\n        var myColor = d3.select(this).style('background-color');\n        d3.select(\"#models\").selectAll(\"p\").style('background-color', varColor);\n        d3.select(this).style('background-color', function (d) {\n            if (d3.rgb(myColor).toString() === varColor.toString()) {\n                zparams.zmodel = d.toString();\n                return hexToRgba(_plots.selVarColor);\n            } else {\n                zparams.zmodel = '';\n                return varColor;\n            }\n        });\n        restart();\n    });\n\n    // update graph (called when needed)\n    function restart() {\n        // nodes.id is pegged to allNodes, i.e. the order in which variables are read in\n        // nodes.index is floating and depends on updates to nodes.  a variables index changes when new variables are added.\n        circle.call(force.drag);\n        if (forcetoggle[0] == \"true\") {\n            force.gravity(0.1);\n            force.charge(-800);\n            force.linkStrength(1);\n        } else {\n            force.gravity(0);\n            force.charge(0);\n            force.linkStrength(0);\n        }\n        force.resume();\n\n        // path (link) group\n        path = path.data(links);\n\n        // update existing links\n        // VJD: dashed links between pebbles are \"selected\". this is disabled for now\n        path.classed('selected', function (x) {\n            return null;\n        }).style('marker-start', function (x) {\n            return x.left ? 'url(#start-arrow)' : '';\n        }).style('marker-end', function (x) {\n            return x.right ? 'url(#end-arrow)' : '';\n        });\n\n        // add new links\n        path.enter().append('svg:path').attr('class', 'link').classed('selected', function (x) {\n            return null;\n        }).style('marker-start', function (x) {\n            return x.left ? 'url(#start-arrow)' : '';\n        }).style('marker-end', function (x) {\n            return x.right ? 'url(#end-arrow)' : '';\n        }).on('mousedown', function (d) {\n            // do we ever need to select a link? make it delete..\n            var obj = JSON.stringify(d);\n            for (var j = 0; j < links.length; j++) {\n                if (obj === JSON.stringify(links[j])) links.splice(j, 1);\n            }\n        });\n\n        // remove old links\n        path.exit().remove();\n\n        // circle (node) group\n        circle = circle.data(nodes, function (x) {\n            return x.id;\n        });\n\n        // update existing nodes (reflexive & selected visual states)\n        // d3.rgb is the function adjusting the color here\n        circle.selectAll('circle').classed('reflexive', function (x) {\n            return x.reflexive;\n        }).style('fill', function (x) {\n            return d3.rgb(x.nodeCol);\n        }).style('stroke', function (x) {\n            return d3.rgb(x.strokeColor);\n        }).style('stroke-width', function (x) {\n            return x.strokeWidth;\n        });\n\n        // add new nodes\n        var g = circle.enter().append('svg:g').attr('id', function (x) {\n            return x.name + 'biggroup';\n        });\n\n        // add plot\n        g.each(function (d) {\n            d3.select(this);\n            if (d.plottype == 'continuous') (0, _plots.densityNode)(d, this);else if (d.plottype == 'bar') (0, _plots.barsNode)(d, this);\n        });\n\n        var append = function append(str, attr) {\n            return function (x) {\n                return str + x[attr || 'id'];\n            };\n        };\n\n        g.append(\"path\").attr(\"id\", append('dvArc')).attr(\"d\", arc3).style(\"fill\", dvColor).attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n            fillThis(this, .3, 0, 100);\n            fill(d, 'dvText', .9, 0, 100);\n        }).on('mouseout', function (d) {\n            fillThis(this, 0, 100, 500);\n            fill(d, 'dvText', 0, 100, 500);\n        }).on('click', function (d) {\n            setColors(d, dvColor);\n            legend(dvColor);\n            restart();\n        });\n\n        g.append(\"text\").attr(\"id\", append('dvText')).attr(\"x\", 6).attr(\"dy\", 11.5).attr(\"fill-opacity\", 0).append(\"textPath\").attr(\"xlink:href\", append('#dvArc')).text(\"Dep Var\");\n\n        g.append(\"path\").attr(\"id\", append('nomArc')).attr(\"d\", arc4).style(\"fill\", nomColor).attr(\"fill-opacity\", 0).on('mouseover', function (d) {\n            if (d.defaultNumchar == \"character\") return;\n            fillThis(this, .3, 0, 100);\n            fill(d, \"nomText\", .9, 0, 100);\n        }).on('mouseout', function (d) {\n            if (d.defaultNumchar == \"character\") return;\n            fillThis(this, 0, 100, 500);\n            fill(d, \"nomText\", 0, 100, 500);\n        }).on('click', function (d) {\n            if (d.defaultNumchar == \"character\") return;\n            setColors(d, nomColor);\n            legend(nomColor);\n            restart();\n        });\n\n        g.append(\"text\").attr(\"id\", append(\"nomText\")).attr(\"x\", 6).attr(\"dy\", 11.5).attr(\"fill-opacity\", 0).append(\"textPath\").attr(\"xlink:href\", append(\"#nomArc\")).text(\"Nominal\");\n\n        g.append('svg:circle').attr('class', 'node').attr('r', allR).style('pointer-events', 'inherit').style('fill', function (d) {\n            return d.nodeCol;\n        }).style('opacity', \"0.5\").style('stroke', function (d) {\n            return d3.rgb(d.strokeColor).toString();\n        }).classed('reflexive', function (d) {\n            return d.reflexive;\n        }).on('dblclick', function (_) {\n            d3.event.stopPropagation(); // stop click from bubbling\n            exports.summaryHold = summaryHold = true;\n        }).on('contextmenu', function (d) {\n            // right click on node\n            d3.event.preventDefault();\n            d3.event.stopPropagation();\n\n            rightClickLast = true;\n            mousedown_node = d;\n            selected_node = mousedown_node === selected_node ? null : mousedown_node;\n            selected_link = null;\n\n            // reposition drag line\n            drag_line.style('marker-end', 'url(#end-arrow)').classed('hidden', false).attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);\n\n            svg.on('mousemove', mousemove);\n            restart();\n        }).on('mouseup', function (d) {\n            d3.event.stopPropagation();\n\n            if (rightClickLast) {\n                rightClickLast = false;\n                return;\n            }\n            if (!mousedown_node) return;\n\n            // needed by FF\n            drag_line.classed('hidden', true).style('marker-end', '');\n\n            // check for drag-to-self\n            mouseup_node = d;\n            if (mouseup_node === mousedown_node) {\n                resetMouseVars();\n                return;\n            }\n\n            // unenlarge target node\n            d3.select(this).attr('transform', '');\n\n            // add link to graph (update if exists)\n            // NB: links are strictly source < target; arrows separately specified by booleans\n            var source, target, direction;\n            if (mousedown_node.id < mouseup_node.id) {\n                source = mousedown_node;\n                target = mouseup_node;\n                direction = 'right';\n            } else {\n                source = mouseup_node;\n                target = mousedown_node;\n                direction = 'left';\n            }\n\n            var link = links.filter(function (x) {\n                return x.source == source && x.target == target;\n            })[0];\n            if (link) {\n                link[direction] = true;\n            } else {\n                link = {\n                    source: source,\n                    target: target,\n                    left: false,\n                    right: false\n                };\n                link[direction] = true;\n                links.push(link);\n            }\n\n            // select new link\n            selected_link = link;\n            selected_node = null;\n            svg.on('mousemove', null);\n\n            resetMouseVars();\n            restart();\n        });\n\n        // show node names\n        g.append('svg:text').attr('x', 0).attr('y', 15).attr('class', 'id').text(function (d) {\n            return d.name;\n        });\n\n        // show summary stats on mouseover\n        // SVG doesn't support text wrapping, use html instead\n        g.selectAll(\"circle.node\").on(\"mouseover\", function (d) {\n            tabLeft('tab3');\n            varSummary(d);\n\n            byId('transformations').setAttribute('style', 'display:block');\n            byId(\"transSel\").selectedIndex = d.id;\n            transformVar = valueKey[d.id];\n\n            fill(d, \"dvArc\", .1, 0, 100);\n            fill(d, \"dvText\", .5, 0, 100);\n            if (d.defaultNumchar == \"numeric\") {\n                fill(d, \"nomArc\", .1, 0, 100);\n                fill(d, \"nomText\", .5, 0, 100);\n            }\n            fill(d, \"csArc\", .1, 0, 100);\n            fill(d, \"csText\", .5, 0, 100);\n            fill(d, \"timeArc\", .1, 0, 100);\n            fill(d, \"timeText\", .5, 0, 100);\n\n            _mithril2.default.redraw();\n        }).on('mouseout', function (d) {\n            summaryHold || tabLeft(subset ? 'tab2' : 'tab1');\n            'csArc csText timeArc timeText dvArc dvText nomArc nomText'.split(' ').map(function (x) {\n                return fill(d, x, 0, 100, 500);\n            });\n            _mithril2.default.redraw();\n        });\n\n        // the transformation variable list is silently updated as pebbles are added/removed\n        d3.select(\"#transSel\").selectAll('li').remove();\n\n        d3.select(\"#transSel\").selectAll('li').data(nodes.map(function (x) {\n            return x.name;\n        })) // set to variables in model space as they're added\n        .enter().append(\"li\").text(function (d) {\n            return d;\n        });\n\n        $('#transSel li').click(function (evt) {\n            // if 'interaction' is the selected function, don't show the function list again\n            if (selInteract) {\n                var n = $('#tInput').val().concat($(this).text());\n                $('#tInput').val(n);\n                evt.stopPropagation();\n                var t = transParse(n = n);\n                if (!t) return;\n                $(this).parent().fadeOut(100);\n                transform(n = t.slice(0, t.length - 1), t = t[t.length - 1], typeTransform = false);\n                return;\n            }\n\n            $('#tInput').val($(this).text());\n            $(this).parent().fadeOut(100);\n            $('#transList').fadeIn(100);\n            evt.stopPropagation();\n        });\n\n        // remove old nodes\n        circle.exit().remove();\n        force.start();\n    }\n\n    function mousedown(d) {\n        // prevent I-bar on drag\n        d3.event.preventDefault();\n        // because :active only works in WebKit?\n        svg.classed('active', true);\n        if (d3.event.ctrlKey || mousedown_node || mousedown_link) return;\n        restart();\n    }\n\n    function mousemove(d) {\n        if (!mousedown_node) return;\n        // update drag line\n        drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);\n    }\n\n    function mouseup(d) {\n        if (mousedown_node) {\n            drag_line.classed('hidden', true).style('marker-end', '');\n        }\n        // because :active only works in WebKit?\n        svg.classed('active', false);\n        // clear mouse event vars\n        resetMouseVars();\n    }\n\n    // app starts here\n    svg.attr('id', function () {\n        return \"whitespace\".concat(myspace);\n    }).attr('height', height).on('mousedown', function () {\n        mousedown(this);\n    }).on('mouseup', function () {\n        mouseup(this);\n    });\n\n    d3.select(window).on('click', function () {\n        // all clicks will bubble here unless event.stopPropagation()\n        $('#transList').fadeOut(100);\n        $('#transSel').fadeOut(100);\n    });\n\n    restart(); // initializes force.layout()\n    fakeClick();\n}\n\nvar find = function find($nodes, name) {\n    for (var i in $nodes) {\n        if ($nodes[i].name == name) return $nodes[i].id;\n    }\n};\n\n// returns id\nvar findNodeIndex = exports.findNodeIndex = function findNodeIndex(name, all) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n        for (var _iterator = allNodes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var node = _step.value;\n\n            if (node.name === name) {\n                //cdb('Yes!' + allNodes[i].id);\n                return all ? node : node.id;\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally {\n        try {\n            if (!_iteratorNormalCompletion && _iterator.return) {\n                _iterator.return();\n            }\n        } finally {\n            if (_didIteratorError) {\n                throw _iteratorError;\n            }\n        }\n    }\n};\n\nvar nodeIndex = function nodeIndex(nodeName) {\n    for (var i in nodes) {\n        if (nodes[i].name == nodeName) return i;\n    }\n};\n\nvar findNode = exports.findNode = function findNode(nodeName) {\n    for (var i in allNodes) {\n        if (allNodes[i].name == nodeName) return allNodes[i];\n    }\n};\n\n/*\n    Retrieve the variable list from the preprocess data.\n    This helps handle the new format and (temporarily)\n    the older format in production (rp 8.14.2017)\n */\nfunction getVariableData(jsonData) {\n    /* \"new\" response:\n    {\n        \"dataset\" : {...}\n        \"variables\" : {\n            \"var1\" : {...}, (etc)\n        }\n    }\n    \"old\" response\n    {\n         \"var1\" : {...},\n         (etc)\n    }*/\n    return jsonData.hasOwnProperty('variables') ? jsonData.variables : jsonData;\n}\n\n// function called by force button\nfunction forceSwitch() {\n    forcetoggle = [forcetoggle[0] == 'true' ? 'false' : 'true'];\n    if (forcetoggle[0] === \"false\") {\n        byId('btnForce').setAttribute(\"class\", \"btn active\");\n    } else {\n        byId('btnForce').setAttribute(\"class\", \"btn btn-default\");\n        fakeClick();\n    }\n}\n\nvar spliceLinksForNode = exports.spliceLinksForNode = function spliceLinksForNode(node) {\n    return links.filter(function (l) {\n        return l.source === node || l.target === node;\n    }).map(function (x) {\n        return links.splice(links.indexOf(x), 1);\n    });\n};\n\nfunction zPop() {\n    if (dataurl) zparams.zdataurl = dataurl;\n    zparams.zmodelcount = modelCount;\n    zparams.zedges = [];\n    zparams.zvars = [];\n    for (var j = 0; j < nodes.length; j++) {\n        //populate zvars array\n        zparams.zvars.push(nodes[j].name);\n        var temp = nodes[j].id;\n        zparams.zsetx[j] = allNodes[temp].setxvals;\n        zparams.zsubset[j] = allNodes[temp].subsetrange;\n    }\n    for (var _j = 0; _j < links.length; _j++) {\n        //populate zedges array\n        //correct the source target ordering for Zelig\n        var srctgt = links[_j].left == false ? [links[_j].source.name, links[_j].target.name] : [links[_j].target.name, links[_j].source.name];\n        zparams.zedges.push(srctgt);\n    }\n}\n\nfunction estimate(btn) {\n    if (production && zparams.zsessionid == '') {\n        alert(\"Warning: Data download is not complete. Try again soon.\");\n        return;\n    }\n\n    zPop();\n    // write links to file & run R CMD\n    // package the output as JSON\n    // add call history and package the zparams object as JSON\n    zparams.callHistory = callHistory;\n    var jsonout = JSON.stringify(zparams);\n\n    var urlcall = rappURL + \"zeligapp\"; //base.concat(jsonout);\n    var solajsonout = \"solaJSON=\" + jsonout;\n    cdb(\"urlcall out: \", urlcall);\n    cdb(\"POST out: \", solajsonout);\n\n    zparams.allVars = valueKey.slice(10, 25); // because the URL is too long...\n    jsonout = JSON.stringify(zparams);\n    var selectorurlcall = rappURL + \"selectorapp\";\n\n    function estimateSuccess(btn, json) {\n        estimateLadda.stop(); // stop spinner\n        allResults.push(json);\n        cdb(\"json in: \", json);\n\n        if (!estimated) byId(\"results\").removeChild(byId(\"resultsHolder\"));\n\n        estimated = true;\n        d3.select(\"#results\").style(\"display\", \"block\");\n\n        d3.select(\"#resultsView\").style(\"display\", \"block\");\n\n        d3.select(\"#modelView\").style(\"display\", \"block\");\n\n        // programmatic click on Results button\n        $(\"#btnResults\").trigger(\"click\");\n\n        var model = \"Model\".concat(modelCount = modelCount + 1);\n\n        function modCol() {\n            d3.select(\"#modelView\").selectAll(\"p\").style('background-color', hexToRgba(varColor));\n        }\n        modCol();\n\n        d3.select(\"#modelView\").insert(\"p\", \":first-child\") // top stack for results\n        .attr(\"id\", model).text(model).style('background-color', hexToRgba(_plots.selVarColor)).on(\"click\", function () {\n            var a = this.style.backgroundColor.replace(/\\s*/g, \"\");\n            var b = hexToRgba(_plots.selVarColor).replace(/\\s*/g, \"\");\n            if (a.substr(0, 17) == b.substr(0, 17)) return; // escape function if displayed model is clicked\n            modCol();\n            d3.select(this).style('background-color', hexToRgba(_plots.selVarColor));\n            viz(this.id);\n        });\n\n        var rCall = [];\n        rCall[0] = json.call;\n        showLog(\"estimate\", rCall);\n\n        viz(model);\n    }\n\n    function estimateFail(btn) {\n        estimateLadda.stop(); // stop spinner\n        estimated = true;\n    }\n\n    function selectorSuccess(btn, json) {\n        d3.select(\"#ticker\").text(\"Suggested variables and percent improvement on RMSE: \" + json.vars);\n        cdb(\"selectorSuccess: \", json);\n    }\n\n    function selectorFail(btn) {\n        alert(\"Selector Fail\");\n    }\n\n    estimateLadda.start(); // start spinner\n    makeCorsRequest(urlcall, btn, estimateSuccess, estimateFail, solajsonout);\n}\n\nfunction dataDownload() {\n    zPop();\n    // write links to file & run R CMD\n\n    //package the output as JSON\n    // add call history and package the zparams object as JSON\n    var jsonout = JSON.stringify(zparams);\n    var btn = \"nobutton\";\n\n    var urlcall = rappURL + \"dataapp\";\n    var solajsonout = \"solaJSON=\" + jsonout;\n    cdb(\"urlcall out: \", urlcall);\n    cdb(\"POST out: \", solajsonout);\n\n    var downloadSuccess = function downloadSuccess(btn, json) {\n        cdb('dataDownload json in: ', json);\n        zparams.zsessionid = json.sessionid[0];\n        // set link URL\n        byId(\"logID\").href = '' + (production ? rappURL + 'log_dir/log_' : 'rook/log_') + zparams.zsessionid + '.txt';\n    };\n    var downloadFail = function downloadFail(_) {\n        return cdb('Data have not been downloaded');\n    };\n    makeCorsRequest(urlcall, btn, downloadSuccess, downloadFail, solajsonout);\n}\n\nfunction viz(mym) {\n    var mym = +mym.substr(5, 5) - 1;\n\n    function removeKids(parent) {\n        while (parent.firstChild) {\n            parent.removeChild(parent.firstChild);\n        }\n    }\n\n    removeKids(byId(\"resultsView\"));\n\n    var json = allResults[mym];\n\n    // pipe in figures to right panel\n    var filelist = new Array();\n    for (var i in json.images) {\n        var zfig = document.createElement(\"img\");\n        zfig.setAttribute(\"src\", json.images[i]);\n        zfig.setAttribute('width', 200);\n        zfig.setAttribute('height', 200);\n        byId(\"resultsView\").appendChild(zfig);\n    }\n\n    // write the results table\n    var resultsArray = [];\n    for (var key in json.sumInfo) {\n        if (key == 'colnames') continue;\n        resultsArray.push(json.sumInfo[key]);\n    }\n\n    var table = d3.select(\"#resultsView\").append(\"p\").append(\"table\");\n\n    var thead = table.append(\"thead\");\n    thead.append(\"tr\").selectAll(\"th\").data(json.sumInfo.colnames).enter().append(\"th\").text(function (d) {\n        return d;\n    });\n\n    var tbody = table.append(\"tbody\");\n    tbody.selectAll(\"tr\").data(resultsArray).enter().append(\"tr\").selectAll(\"td\").data(function (d) {\n        return d;\n    }).enter().append(\"td\").text(function (d) {\n        var myNum = Number(d);\n        if (isNaN(myNum)) return d;\n        return myNum.toPrecision(3);\n    }).on(\"mouseover\", function () {\n        d3.select(this).style(\"background-color\", \"aliceblue\");\n    }) // for no discernable reason\n    .on(\"mouseout\", function () {\n        d3.select(this).style(\"background-color\", \"#F9F9F9\");\n    }); //(but maybe we'll think of one)\n\n    d3.select(\"#resultsView\").append(\"p\").html(function () {\n        return \"<b>Formula: </b>\".concat(json.call[0]);\n    });\n\n    _mithril2.default.redraw();\n}\n\n// parses the transformation input. variable names are often nested inside one another, e.g., ethwar, war, wars, and so this is handled\nfunction transParse(n) {\n    var out2 = [];\n    var t2 = n;\n    var k2 = 0;\n    var subMe2 = \"_transvar\".concat(k2);\n    var indexed = [];\n\n    // out2 is all matched variables, indexed is an array, each element is an object that contains the matched variables starting index and finishing index.  e.g., n=\"wars+2\", out2=[war, wars], indexed=[{0,2},{0,3}]\n    for (var i in valueKey) {\n        var m2 = n.match(valueKey[i]);\n        if (m2 != null) out2.push(m2[0]);\n\n        var re = new RegExp(valueKey[i], \"g\");\n        var s = n.search(re);\n        if (s != -1) indexed.push({ from: s, to: s + valueKey[i].length });\n    }\n\n    // nested loop not good, but indexed is not likely to be very large.\n    // if a variable is nested, it is removed from out2\n    // notice, loop is backwards so that index changes don't affect the splice\n    cdb(\"indexed \", indexed);\n    for (var i = indexed.length - 1; i > -1; i--) {\n        for (var j = indexed.length - 1; j > -1; j--) {\n            if (i === j) continue;\n            if (indexed[i].from >= indexed[j].from & indexed[i].to <= indexed[j].to) {\n                cdb(i, \" is nested in \", j);\n                out2.splice(i, 1);\n            }\n        }\n    }\n\n    for (var i in out2) {\n        t2 = t2.replace(out2[i], subMe2); //something that'll never be a variable name\n        k2 = k2 + 1;\n        subMe2 = \"_transvar\".concat(k2);\n    }\n\n    if (out2.length > 0) {\n        out2.push(t2);\n        cdb(\"new out \", out2);\n        return out2;\n    } else {\n        alert(\"No variable name found. Perhaps check your spelling?\");\n        return null;\n    }\n}\n\n/**\n  n = name of column/node\n  t = selected transformation\n */\nfunction transform(n, t, typeTransform) {\n    if (production && zparams.zsessionid == \"\") {\n        alert(\"Warning: Data download is not complete. Try again soon.\");\n        return;\n    }\n    if (!typeTransform) t = t.replace(\"+\", \"_plus_\"); // can't send the plus operator\n\n    cdb('name of col: ' + n);\n    cdb('transformation: ' + t);\n\n    var btn = byId('btnEstimate');\n\n    // find the node by name\n    var myn = findNodeIndex(n[0], true);\n\n    if (typeof myn === \"undefined\") {\n        myn = findNodeIndex(n, true);\n    }\n\n    var outtypes = {\n        varnamesTypes: n,\n        interval: myn.interval,\n        numchar: myn.numchar,\n        nature: myn.nature,\n        binary: myn.binary\n    };\n\n    cdb(myn);\n    // if typeTransform but we already have the metadata\n    if (typeTransform) {\n        if (myn.nature == \"nominal\" & typeof myn.plotvalues !== \"undefined\") {\n            myn.plottype = \"bar\";\n            (0, _plots.barsNode)(myn);\n            panelPlots();\n            return;\n        } else if (myn.nature != \"nominal\" & typeof myn.plotx !== \"undefined\") {\n            myn.plottype = \"continuous\";\n            (0, _plots.densityNode)(myn);\n            panelPlots();\n            return;\n        }\n    }\n\n    //package the output as JSON\n    var transformstuff = {\n        zdataurl: dataurl,\n        zvars: myn.name,\n        zsessionid: zparams.zsessionid,\n        transform: t,\n        callHistory: callHistory,\n        typeTransform: typeTransform,\n        typeStuff: outtypes\n    };\n    var jsonout = JSON.stringify(transformstuff);\n    var urlcall = rappURL + \"transformapp\";\n    var solajsonout = \"solaJSON=\" + jsonout;\n    cdb(\"urlcall out: \" + urlcall);\n    cdb(\"POST out: \" + solajsonout);\n\n    function transformSuccess(btn, json) {\n        estimateLadda.stop();\n        cdb(\"json in: \" + JSON.stringify(json));\n\n        // Is this a typeTransform?\n        if (json.typeTransform[0]) {\n            // Yes. We're updating an existing node\n            d3.json(json.url, function (err, data) {\n                if (err) return console.warn(err);\n                var node = void 0;\n                for (var key in data) {\n                    node = findNodeIndex(key, true);\n                    if (!node) continue;\n                    jQuery.extend(true, node, data[key]);\n                    node.plottype === \"continuous\" ? (0, _plots.densityNode)(node) : node.plottype === \"bar\" ? (0, _plots.barsNode)(node) : null;\n                }\n                fakeClick();\n                panelPlots();\n                node && cdb(node);\n            });\n        } else {\n            /* No, we have a new node here--e.g. the transformed column\n                 example response: {\n                 \"call\":[\"t_year_2\"],\n                 \"url\":[\"data/preprocessSubset_BACCBC78-7DD9-4482-B31D-6EB01C3A0C95.txt\"],\n                 \"trans\":[\"year\",\"_transvar0^2\"],\n                 \"typeTransform\":[false]\n               }\n            */\n            callHistory.push({\n                func: \"transform\",\n                zvars: n,\n                transform: t\n            });\n\n            var subseted = false;\n            var rCall = [];\n\n            rCall[0] = json.call;\n            var newVar = rCall[0][0];\n\n            trans.push(newVar);\n\n            // Read the preprocess file containing values\n            // for the transformed variable\n            //\n            d3.json(json.url, function (error, json) {\n                if (error) return console.warn(error);\n\n                var jsondata = getVariableData(json);\n\n                for (var key in jsondata) {\n                    var myIndex = findNodeIndex(key);\n                    if (typeof myIndex !== \"undefined\") {\n                        alert(\"Invalid transformation: this variable name already exists.\");\n                        return;\n                    }\n                    // add transformed variable to the current space\n                    var i = allNodes.length; // get new index\n                    var obj1 = {\n                        id: i,\n                        reflexive: false,\n                        name: key,\n                        labl: \"transformlabel\",\n                        data: [5, 15, 20, 0, 5, 15, 20],\n                        count: [.6, .2, .9, .8, .1, .3, .4],\n                        nodeCol: colors(i),\n                        baseCol: colors(i),\n                        strokeColor: _plots.selVarColor,\n                        strokeWidth: \"1\",\n                        subsetplot: false,\n                        subsetrange: [\"\", \"\"],\n                        setxplot: false,\n                        setxvals: [\"\", \"\"],\n                        grayout: false,\n                        defaultInterval: jsondata[key].interval,\n                        defaultNumchar: jsondata[key].numchar,\n                        defaultNature: jsondata[key].nature,\n                        defaultBinary: jsondata[key].binary\n                    };\n\n                    jQuery.extend(true, obj1, jsondata[key]);\n                    allNodes.push(obj1);\n\n                    valueKey.push(newVar);\n                    nodes.push(allNodes[i]);\n                    fakeClick();\n                    panelPlots();\n\n                    if (allNodes[i].plottype === \"continuous\") {\n                        (0, _plots.densityNode)(allNodes[i]);\n                    } else if (allNodes[i].plottype === \"bar\") {\n                        (0, _plots.barsNode)(allNodes[i]);\n                    }\n\n                    _mithril2.default.redraw();\n                }\n            });\n\n            showLog('transform', rCall);\n        }\n    }\n\n    function transformFail(btn) {\n        alert(\"transform fail\");\n        estimateLadda.stop();\n    }\n\n    estimateLadda.start(); // start spinner\n    makeCorsRequest(urlcall, btn, transformSuccess, transformFail, solajsonout);\n}\n\n// below from http://www.html5rocks.com/en/tutorials/cors/ for cross-origin resource sharing\n// Create the XHR object.\nfunction createCORSRequest(method, url, callback) {\n    var xhr = new XMLHttpRequest();\n    if (\"withCredentials\" in xhr) {\n        // XHR for Chrome/Firefox/Opera/Safari.\n        xhr.open(method, url, true);\n    } else if (typeof XDomainRequest != \"undefined\") {\n        // XDomainRequest for IE.\n        xhr = new XDomainRequest();\n        xhr.open(method, url);\n    } else {\n        // CORS not supported.\n        xhr = null;\n    }\n    // xhr.setRequestHeader('Content-Type', 'text/plain');\n    xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');\n    return xhr;\n}\n\n// Make the actual CORS request.\nfunction makeCorsRequest(url, btn, callback, warningcallback, jsonstring) {\n    var xhr = createCORSRequest('POST', url);\n    if (!xhr) {\n        alert('CORS not supported');\n        return;\n    }\n    // Response handlers for asynchronous load\n    // onload or onreadystatechange?\n\n    xhr.onload = function () {\n        var text = xhr.responseText;\n        cdb(\"text \", text);\n\n        try {\n            var json = JSON.parse(text); // should wrap in try / catch\n            var names = Object.keys(json);\n        } catch (err) {\n            estimateLadda.stop();\n            selectLadda.stop();\n            cdb(err);\n            alert('Error: Could not parse incoming JSON.');\n        }\n\n        if (names[0] == \"warning\") {\n            warningcallback(btn);\n            alert(\"Warning: \" + json.warning);\n        } else {\n            callback(btn, json);\n        }\n    };\n    xhr.onerror = function () {\n        // note: xhr.readystate should be 4 and status should be 200. a status of 0 occurs when the url is too large\n        xhr.status == 0 ? alert('There was an error making the request. xmlhttprequest status is 0.') : xhr.readyState != 4 ? alert('There was an error making the request. xmlhttprequest readystate is not 4.') : alert('Woops, there was an error making the request.');\n        cdb(xhr);\n        estimateLadda.stop();\n        selectLadda.stop();\n    };\n    xhr.send(jsonstring);\n}\n\nvar legend = exports.legend = function legend(_) {\n    borderState();\n    _mithril2.default.redraw();\n};\n\n// programmatically deselect every selected variable\nfunction erase() {\n    leftpanelMedium();\n    rightpanelMedium();\n    tabLeft('tab1');\n    jQuery.fn.d3Click = function () {\n        this.children().each(function (i, e) {\n            var mycol = d3.rgb(this.style.backgroundColor);\n            if (mycol.toString() === varColor.toString()) return;\n            var evt = document.createEvent(\"MouseEvents\");\n            evt.initMouseEvent(\"click\", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            e.dispatchEvent(evt);\n        });\n    };\n    $(\"#varList\").d3Click();\n}\n\n// http://www.tutorials2learn.com/tutorials/scripts/javascript/xml-parser-javascript.html\nfunction loadXMLDoc(XMLname) {\n    var xmlDoc;\n    if (window.XMLHttpRequest) {\n        xmlDoc = new window.XMLHttpRequest();\n        xmlDoc.open(\"GET\", XMLname, false);\n        xmlDoc.send(\"\");\n        return xmlDoc.responseXML;\n    }\n    // IE 5 and IE 6\n    else if (ActiveXObject(\"Microsoft.XMLDOM\")) {\n            xmlDoc = new ActiveXObject(\"Microsoft.XMLDOM\");\n            xmlDoc.async = false;\n            xmlDoc.load(XMLname);\n            return xmlDoc;\n        }\n    alert(\"Error loading document!\");\n}\n\nfunction tabLeft(tab) {\n    byId('tab1').style.display = 'none';\n    byId('tab2').style.display = 'none';\n    byId('tab3').style.display = 'none';\n    byId(tab).style.display = 'block';\n    if (tab != 'tab3') {\n        exports.subset = subset = tab == 'tab2';\n        exports.summaryHold = summaryHold = false;\n    }\n    exports.lefttab = lefttab = tab;\n}\n\nfunction tabRight(tabid) {\n\n    var cls = \"sidepanel container clearfix\";\n    var select = function select(cls) {\n        var panel = d3.select(\"#rightpanel\");\n        return cls ? panel.attr('class', cls) : panel.attr('class');\n    };\n\n    var toggleR = function toggleR() {\n        select(function () {\n            var expand = cls + ' expandpanel';\n            return this.getAttribute(\"class\") === expand ? cls : expand;\n        });\n    };\n\n    if (tabid == \"btnModels\") select(cls);else if (tabid == \"btnSetx\") righttab == \"btnSetx\" || select() == cls && toggleR();else if (tabid == \"btnResults\") !estimated ? select(cls) : righttab == \"btnResults\" || select() == cls ? toggleR() : null;\n\n    exports.righttab = righttab = tabid;\n}\n\nvar summary = exports.summary = { data: [] };\n\nfunction varSummary(d) {\n    var t1 = 'Mean:, Median:, Most Freq:, Occurrences:, Median Freq:, Occurrences:, Least Freq:, Occurrences:, Std Dev:, Minimum:, Maximum:, Invalid:, Valid:, Uniques:, Herfindahl'.split(', ');\n\n    var rint = d3.format('r');\n    var str = function str(x, p) {\n        return (+x).toPrecision(p || 4).toString();\n    };\n    var t2 = priv && d.meanCI ? [str(d.mean, 2) + ' (' + str(d.meanCI.lowerBound, 2) + ' - ' + str(d.meanCI.upperBound, 2) + ')', str(d.median), d.mode, rint(d.freqmode), d.mid, rint(d.freqmid), d.fewest, rint(d.freqfewest), str(d.sd), str(d.min), str(d.max), rint(d.invalid), rint(d.valid), rint(d.uniques), str(d.herfindahl)] : [str(d.mean), str(d.median), d.mode, rint(d.freqmode), d.mid, rint(d.freqmid), d.fewest, rint(d.freqfewest), str(d.sd), str(d.min), str(d.max), rint(d.invalid), rint(d.valid), rint(d.uniques), str(d.herfindahl)];\n\n    summary.data = [];\n    t1.forEach(function (e, i) {\n        return !t2[i].includes('NaN') && t2[i] != 'NA' && t2[i] != '' && summary.data.push([e, t2[i]]);\n    });\n\n    summary.name = d.name;\n    summary.labl = d.labl;\n\n    d3.select('#tab3').selectAll('svg').remove();\n\n    if (!d.plottype) return;\n    d.plottype == 'continuous' ? (0, _plots.density)(d, 'varSummary', priv) : d.plottype == \"bar\" ? (0, _plots.bars)(d, 'varSummary', priv) : d3.select(\"#tab3\") // no graph to draw, but still need to remove previous graph\n    .selectAll(\"svg\").remove();\n}\n\nvar popoverContent = exports.popoverContent = function popoverContent(d) {\n    var text = '';\n    var _ref2 = [d3.format('r'), function (val, int) {\n        return (+val).toPrecision(int).toString();\n    }],\n        rint = _ref2[0],\n        prec = _ref2[1];\n\n    var div = function div(field, name, val) {\n        if (field != 'NA') text += '<div class=\\'form-group\\'><label class=\\'col-sm-4 control-label\\'>' + name + '</label><div class=\\'col-sm-6\\'><p class=\\'form-control-static\\'>' + (val || field) + '</p></div></div>';\n    };\n    d.labl != '' && div(d.labl, 'Label');\n    div(d.mean, 'Mean', priv && d.meanCI ? prec(d.mean, 2) + ' (' + prec(d.meanCI.lowerBound, 2) + ' - ' + prec(d.meanCI.upperBound, 2) + ')' : prec(d.mean, 4));\n    div(d.median, 'Median', prec(d.median, 4));\n    div(d.mode, 'Most Freq');\n    div(d.freqmode, 'Occurrences', rint(d.freqmode));\n    div(d.mid, 'Median Freq');\n    div(d.freqmid, 'Occurrences', rint(d.freqmid));\n    div(d.fewest, 'Least Freq');\n    div(d.freqfewest, 'Occurrences', rint(d.freqfewest));\n    div(d.sd, 'Stand Dev', prec(d.sd, 4));\n    div(d.max, 'Maximum', prec(d.max, 4));\n    div(d.min, 'Minimum', prec(d.min, 4));\n    div(d.invalid, 'Invalid', rint(d.invalid));\n    div(d.valid, 'Valid', rint(d.valid));\n    div(d.uniques, 'Uniques', rint(d.uniques));\n    div(d.herfindahl, 'Herfindahl', prec(d.herfindahl, 4));\n    return text;\n};\n\nfunction popupX(d) {\n    var tsf = d3.format(\".4r\");\n    var rint = d3.format(\"r\");\n    //Create the tooltip label\n    d3.select(\"#tooltip\").style(\"left\", tempX + \"px\").style(\"top\", tempY + \"px\").select(\"#tooltiptext\").html(\"<div class='form-group'><label class='col-sm-4 control-label'>Mean</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.mean) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Median</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.median) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Mode</label><div class='col-sm-6'><p class='form-control-static'>\" + d.mode + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Stand Dev</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.sd) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Maximum</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.max) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Minimum</label><div class='col-sm-6'><p class='form-control-static'>\" + tsf(d.min) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Valid</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.valid) + \"</p></div></div>\" + \"<div class='form-group'><label class='col-sm-4 control-label'>Invalid</label><div class='col-sm-6'><p class='form-control-static'>\" + rint(d.invalid) + \"</p></div></div>\");\n}\n\nfunction panelPlots() {\n    // build arrays from nodes in main\n    var vars = [];\n    var ids = [];\n    nodes.forEach(function (n) {\n        vars.push(n.name.replace(/\\(|\\)/g, ''));\n        ids.push(n.id);\n    });\n\n    //remove all plots, could be smarter here\n    d3.select('#setx').selectAll('svg').remove();\n    d3.select('#tab2').selectAll('svg').remove();\n    for (var i = 0; i < vars.length; i++) {\n        var node = allNodes[ids[i]];\n        node.setxplot = false;\n        node.subsetplot = false;\n        if (node.plottype === \"continuous\" & node.setxplot == false) {\n            node.setxplot = true;\n            (0, _plots.density)(node, div = \"setx\", priv);\n            node.subsetplot = true;\n            (0, _plots.density)(node, div = \"subset\", priv);\n        } else if (node.plottype === \"bar\" & node.setxplot == false) {\n            node.setxplot = true;\n            (0, _plots.bars)(node, div = \"setx\", priv);\n            node.subsetplot = true;\n            (0, _plots.barsSubset)(node);\n        }\n    }\n\n    d3.select(\"#setx\").selectAll(\"svg\").each(function () {\n        d3.select(this);\n        var regstr = /(.+)_setx_(\\d+)/;\n        var myname = regstr.exec(this.id);\n        var nodeid = myname[2];\n        myname = myname[1];\n        if (!vars.includes(myname)) {\n            allNodes[nodeid].setxplot = false;\n            var temp = \"#\".concat(myname, \"_setx_\", nodeid);\n            d3.select(temp).remove();\n            allNodes[nodeid].subsetplot = false;\n            temp = \"#\".concat(myname, \"_tab2_\", nodeid);\n            d3.select(temp).remove();\n        }\n    });\n}\n\n// easy functions to collapse panels to base\nfunction rightpanelMedium() {\n    d3.select(\"#rightpanel\").attr(\"class\", \"sidepanel container clearfix\");\n}\n\nfunction leftpanelMedium() {\n    d3.select(\"#leftpanel\").attr(\"class\", \"sidepanel container clearfix\");\n}\n\n// converts color codes\nvar hexToRgba = exports.hexToRgba = function hexToRgba(hex) {\n    var int = parseInt(hex.replace('#', ''), 16);\n    return 'rgba(' + [int >> 16 & 255, int >> 8 & 255, int & 255, '0.5'].join(',') + ')';\n};\n\n// takes node and color and updates zparams\nfunction setColors(n, c) {\n    if (n.strokeWidth == '1') {\n        // adding time, cs, dv, nom to node with no stroke\n        n.strokeWidth = '4';\n        n.strokeColor = c;\n        n.nodeCol = taggedColor;\n        var push = function push(_ref3) {\n            var _ref4 = _slicedToArray(_ref3, 2),\n                color = _ref4[0],\n                key = _ref4[1];\n\n            if (color != c) return;\n            zparams[key] = Array.isArray(zparams[key]) ? zparams[key] : [];\n            zparams[key].push(n.name);\n            if (key == 'znom') {\n                findNodeIndex(n.name, true).nature = \"nominal\";\n                transform(n.name, t = null, typeTransform = true);\n            }\n        };\n        [[dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']].forEach(push);\n    } else if (n.strokeWidth == '4') {\n        if (c == n.strokeColor) {\n            // deselecting time, cs, dv, nom\n            n.strokeWidth = '1';\n            n.strokeColor = _plots.selVarColor;\n            n.nodeCol = colors(n.id);\n            splice(c, n.name, [dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']);\n            if (nomColor == c && zparams.znom.includes(n.name)) {\n                findNodeIndex(n.name, true).nature = findNodeIndex(n.name, true).defaultNature;\n                transform(n.name, t = null, typeTransform = true);\n            }\n        } else {\n            // deselecting time, cs, dv, nom AND changing it to time, cs, dv, nom\n            splice(n.strokeColor, n.name, [dvColor, 'zdv'], [csColor, 'zcross'], [timeColor, 'ztime'], [nomColor, 'znom']);\n            if (nomColor == n.strokeColor && zparams.znom.includes(n.name)) {\n                findNodeIndex(n.name, true).nature = findNodeIndex(n.name, true).defaultNature;\n                transform(n.name, t = null, typeTransform = true);\n            }\n            n.strokeColor = c;\n            if (dvColor == c) zparams.zdv.push(n.name);else if (csColor == c) zparams.zcross.push(n.name);else if (timeColor == c) zparams.ztime.push(n.name);else if (nomColor == c) {\n                zparams.znom.push(n.name);\n                findNodeIndex(n.name, true).nature = \"nominal\";\n                transform(n.name, t = null, typeTransform = true);\n            }\n        }\n    }\n}\n\nfunction borderState() {\n    zparams.zdv.length > 0 ? $('#dvButton .rectColor svg circle').attr('stroke', dvColor) : $('#dvButton').css('border-color', '#ccc');\n    zparams.zcross.length > 0 ? $('#csButton .rectColor svg circle').attr('stroke', csColor) : $('#csButton').css('border-color', '#ccc');\n    zparams.ztime.length > 0 ? $('#timeButton .rectColor svg circle').attr('stroke', timeColor) : $('#timeButton').css('border-color', '#ccc');\n    zparams.znom.length > 0 ? $('#nomButton .rectColor svg circle').attr('stroke', nomColor) : $('#nomButton').css('border-color', '#ccc');\n}\n\n// small appearance resets, but perhaps this will become a hard reset back to all original allNode values?\nfunction nodeReset(n) {\n    n.strokeColor = _plots.selVarColor;\n    n.strokeWidth = \"1\";\n    n.nodeCol = n.baseCol;\n}\n\nfunction subsetSelect(btn) {\n    if (dataurl) zparams.zdataurl = dataurl;\n    if (production && zparams.zsessionid == \"\") {\n        alert(\"Warning: Data download is not complete. Try again soon.\");\n        return;\n    }\n    zparams.zvars = [];\n    zparams.zplot = [];\n    var subsetEmpty = true;\n    // is this the same as zPop()?\n    for (var j = 0; j < nodes.length; j++) {\n        // populate zvars and zsubset arrays\n        zparams.zvars.push(nodes[j].name);\n        var temp = nodes[j].id;\n        zparams.zsubset[j] = allNodes[temp].subsetrange;\n        if (zparams.zsubset[j].length > 0) {\n            if (zparams.zsubset[j][0] != \"\") zparams.zsubset[j][0] = Number(zparams.zsubset[j][0]);\n            if (zparams.zsubset[j][1] != \"\") zparams.zsubset[j][1] = Number(zparams.zsubset[j][1]);\n        }\n        zparams.zplot.push(allNodes[temp].plottype);\n        if (zparams.zsubset[j][1] != \"\") subsetEmpty = false; // only need to check one\n    }\n\n    if (subsetEmpty == true) {\n        alert(\"Warning: No new subset selected.\");\n        return;\n    }\n\n    var outtypes = [];\n    for (var j = 0; j < allNodes.length; j++) {\n        outtypes.push({\n            varnamesTypes: allNodes[j].name,\n            nature: allNodes[j].nature,\n            numchar: allNodes[j].numchar,\n            binary: allNodes[j].binary,\n            interval: allNodes[j].interval\n        });\n    }\n\n    var subsetstuff = {\n        zdataurl: zparams.zdataurl,\n        zvars: zparams.zvars,\n        zsubset: zparams.zsubset,\n        zsessionid: zparams.zsessionid,\n        zplot: zparams.zplot,\n        callHistory: callHistory,\n        typeStuff: outtypes\n    };\n\n    var jsonout = JSON.stringify(subsetstuff);\n    var urlcall = rappURL + \"subsetapp\";\n    var solajsonout = \"solaJSON=\" + jsonout;\n    cdb(\"urlcall out: \", urlcall);\n    cdb(\"POST out: \", solajsonout);\n\n    function subsetSelectSuccess(btn, json) {\n        selectLadda.stop(); // stop motion\n        $(\"#btnVariables\").trigger(\"click\"); // programmatic clicks\n        $(\"#btnModels\").trigger(\"click\");\n\n        var grayOuts = [];\n        var rCall = [];\n        rCall[0] = json.call;\n\n        // store contents of the pre-subset space\n        zPop();\n        var myNodes = jQuery.extend(true, [], allNodes);\n        var myParams = jQuery.extend(true, {}, zparams);\n        var myTrans = jQuery.extend(true, [], trans);\n        var myForce = jQuery.extend(true, [], forcetoggle);\n        var myPreprocess = jQuery.extend(true, {}, preprocess);\n        var myLog = jQuery.extend(true, [], logArray);\n        var myHistory = jQuery.extend(true, [], callHistory);\n\n        spaces[myspace] = {\n            \"allNodes\": myNodes,\n            \"zparams\": myParams,\n            \"trans\": myTrans,\n            \"force\": myForce,\n            \"preprocess\": myPreprocess,\n            \"logArray\": myLog,\n            \"callHistory\": myHistory\n        };\n\n        // remove pre-subset svg\n        var selectMe = \"#m\".concat(myspace);\n        d3.select(selectMe).attr('class', 'item');\n        selectMe = \"#whitespace\".concat(myspace);\n        d3.select(selectMe).remove();\n\n        myspace = spaces.length;\n        callHistory.push({\n            func: \"subset\",\n            zvars: jQuery.extend(true, [], zparams.zvars),\n            zsubset: jQuery.extend(true, [], zparams.zsubset),\n            zplot: jQuery.extend(true, [], zparams.zplot)\n        });\n\n        // this is to be used to gray out and remove listeners for variables that have been subsetted out of the data\n        function varOut(v) {\n            // if in nodes, remove gray out in left panel\n            // make unclickable in left panel\n            for (var i = 0; i < v.length; i++) {\n                var selectMe = v[i].replace(/\\W/g, \"_\");\n                byId(selectMe).style.color = hexToRgba(grayColor);\n                selectMe = \"p#\".concat(selectMe);\n                d3.select(selectMe).on(\"click\", null);\n            }\n        }\n\n        showLog('subset', rCall);\n        reWriteLog();\n\n        d3.select(\"#innercarousel\").append('div').attr('class', 'item active').attr('id', function () {\n            return \"m\".concat(myspace.toString());\n        }).append('svg').attr('id', 'whitespace');\n        svg = d3.select(\"#whitespace\");\n\n        d3.json(json.url, function (error, json) {\n            if (error) {\n                return console.warn(error);\n            }\n            var jsondata = getVariableData(json);\n\n            for (var key in jsondata) {\n                var myIndex = findNodeIndex(key);\n\n                allNodes[myIndex].plotx = undefined;\n                allNodes[myIndex].ploty = undefined;\n                allNodes[myIndex].plotvalues = undefined;\n                allNodes[myIndex].plottype = \"\";\n\n                jQuery.extend(true, allNodes[myIndex], jsondata[key]);\n                allNodes[myIndex].subsetplot = false;\n                allNodes[myIndex].subsetrange = [\"\", \"\"];\n                allNodes[myIndex].setxplot = false;\n                allNodes[myIndex].setxvals = [\"\", \"\"];\n\n                if (allNodes[myIndex].valid == 0) {\n                    grayOuts.push(allNodes[myIndex].name);\n                    allNodes[myIndex].grayout = true;\n                }\n            }\n            rePlot();\n\n            layout(layoutAdd);\n        });\n\n        varOut(grayOuts);\n    }\n\n    selectLadda.start(); //start button motion\n    makeCorsRequest(urlcall, btn, subsetSelectSuccess, function (btn) {\n        return selectLadda.stop();\n    }, solajsonout);\n}\n\nfunction readPreprocess(url, p, v, callback) {\n    cdb('readPreprocess: ' + url);\n\n    d3.json(url, function (err, json) {\n        if (err) return console.warn(err);\n        cdb('inside readPreprocess function');\n        cdb(json);\n\n        priv = json.dataset.priv || priv;\n        // copy object\n        Object.keys(json.variables).forEach(function (k) {\n            return p[k] = json.variables[k];\n        });\n        if (typeof callback == 'function') callback();\n    });\n}\n\n// removes all the children svgs inside subset and setx divs\nfunction rePlot() {\n    d3.select('#tab2').selectAll('svg').remove();\n    d3.select('#setx').selectAll('svg').remove();\n    allNodes.forEach(function (n) {\n        return n.setxplot = n.subsetplot = false;\n    });\n}\n\nvar showLog = function showLog(val, rCall) {\n    logArray.push((val + ': ').concat(rCall[0]));\n    _mithril2.default.redraw();\n};\n\nfunction reWriteLog() {\n    d3.select(\"#collapseLog div.panel-body\").selectAll(\"p\").remove();\n    d3.select(\"#collapseLog div.panel-body\").selectAll(\"p\").data(logArray).enter().append(\"p\").text(function (d) {\n        return d;\n    });\n}\n\n// acts as if the user clicked in whitespace. useful when restart() is outside of scope\nvar fakeClick = exports.fakeClick = function fakeClick() {\n    var ws = \"#whitespace\".concat(myspace);\n    // d3 and programmatic events don't mesh well, here's a SO workaround that looks good but uses jquery...\n    jQuery.fn.d3Click = function () {\n        this.each(function (i, e) {\n            var evt = document.createEvent(\"MouseEvents\");\n            evt.initMouseEvent(\"mousedown\", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            e.dispatchEvent(evt);\n        });\n    };\n    $(ws).d3Click();\n    d3.select(ws).classed('active', false);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL2FwcC5qcz9mNTEyIl0sIm5hbWVzIjpbImNkYiIsIm1haW4iLCJnZXRWYXJpYWJsZURhdGEiLCJmb3JjZVN3aXRjaCIsImVzdGltYXRlIiwiZXJhc2UiLCJ0YWJMZWZ0IiwidGFiUmlnaHQiLCJwYW5lbFBsb3RzIiwiYm9yZGVyU3RhdGUiLCJzdWJzZXRTZWxlY3QiLCJtc2ciLCJwcm9kdWN0aW9uIiwiY29uc29sZSIsImxvZyIsImluc3BlY3QiLCJvYmoiLCJjb2xvcnMiLCJkMyIsInNjYWxlIiwiY2F0ZWdvcnkyMCIsImNzQ29sb3IiLCJkdkNvbG9yIiwiZ3JheUNvbG9yIiwibm9tQ29sb3IiLCJ2YXJDb2xvciIsInRhZ2dlZENvbG9yIiwidGltZUNvbG9yIiwibGVmdHRhYiIsInN1YnNldCIsInN1bW1hcnlIb2xkIiwicmlnaHR0YWIiLCJ0IiwidHlwZVRyYW5zZm9ybSIsInRyYW5zZm9ybUxpc3QiLCJzcGxpdCIsInRyYW5zZm9ybVZhciIsInRyYW5zIiwicHJlcHJvY2VzcyIsInNwYWNlcyIsImxheW91dEFkZCIsImxheW91dE1vdmUiLCJhbGxSIiwibXlzcGFjZSIsImZvcmNldG9nZ2xlIiwicHJpdiIsImxvZ0FycmF5IiwienBhcmFtcyIsInpkYXRhIiwiemVkZ2VzIiwienRpbWUiLCJ6bm9tIiwiemNyb3NzIiwiem1vZGVsIiwienZhcnMiLCJ6ZHYiLCJ6ZGF0YXVybCIsInpzdWJzZXQiLCJ6c2V0eCIsInptb2RlbGNvdW50IiwienBsb3QiLCJ6c2Vzc2lvbmlkIiwiemRhdGFjaXRlIiwibW9kZWxDb3VudCIsInZhbHVlS2V5IiwiYWxsTm9kZXMiLCJhbGxSZXN1bHRzIiwibm9kZXMiLCJsaW5rcyIsIm1vZHMiLCJlc3RpbWF0ZWQiLCJyaWdodENsaWNrTGFzdCIsInNlbEludGVyYWN0IiwiY2FsbEhpc3RvcnkiLCJzdmciLCJ3aWR0aCIsImhlaWdodCIsImRpdiIsImVzdGltYXRlTGFkZGEiLCJzZWxlY3RMYWRkYSIsImFyYzMiLCJhcmM0IiwiYnlJZCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJpZCIsInJlc2V0IiwicmVsb2FkUGFnZSIsImxvY2F0aW9uIiwicmVsb2FkIiwiZGF0YXVybCIsImZpbGVpZCIsImhvc3RuYW1lIiwiZGRpdXJsIiwiYWxlcnQiLCJFcnJvciIsImRhdGF2ZXJzZXVybCIsInNlbGVjdCIsInRlbXBXaWR0aCIsInN0eWxlIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiJCIsIndpbmRvdyIsIkxhZGRhIiwiY3JlYXRlIiwiY29sb3JUaW1lIiwiY29sb3JDUyIsImRlcFZhciIsInN1YnNldGRpdiIsInNldHhkaXYiLCJiYXJ3aWR0aCIsImJhcmhlaWdodCIsImJhclBhZGRpbmciLCJiYXJudW1iZXIiLCJhcmMiLCJzdGFydCIsImVuZCIsImlubmVyUmFkaXVzIiwib3V0ZXJSYWRpdXMiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJhcmMwIiwiYXJjMSIsImFyYzIiLCJkYXRhc2V0MiIsImxhYmxBcnJheSIsImhvbGQiLCJzdWJzZXROb2RlcyIsIm9uIiwic2VsZWN0QWxsIiwiZGF0YSIsImVudGVyIiwiYXBwZW5kIiwidGV4dCIsImQiLCJyZW1vdmUiLCJtZXRhZGF0YXVybCIsInBVUkwiLCJ1cmwiLCJwIiwidiIsImNhbGxiYWNrIiwicmVhZFByZXByb2Nlc3MiLCJ4bWwiLCJ2YXJzIiwiZG9jdW1lbnRFbGVtZW50IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJ0ZW1wIiwiY2hpbGROb2RlcyIsIm5vZGVWYWx1ZSIsImNpdGUiLCJyZXBsYWNlIiwiZGF0YW5hbWUiLCJodG1sIiwiaSIsImF0dHJpYnV0ZXMiLCJuYW1lIiwiZGF0YXNldGNvdW50IiwibGF5b3V0IiwiaGlzdG9ncmFtIiwiYmlucyIsImZyZXF1ZW5jeSIsInJlZmxleGl2ZSIsImxhYmwiLCJjb3VudCIsIm5vZGVDb2wiLCJiYXNlQ29sIiwic3Ryb2tlQ29sb3IiLCJzdHJva2VXaWR0aCIsInN1YnNldHBsb3QiLCJzdWJzZXRyYW5nZSIsInNldHhwbG90Iiwic2V0eHZhbHMiLCJncmF5b3V0IiwialF1ZXJ5IiwiZXh0ZW5kIiwicHVzaCIsImpzb24iLCJlcnIiLCJ3YXJuIiwia2V5IiwiemVsaWc1bW9kZWxzIiwiaGFzT3duUHJvcGVydHkiLCJkZXNjcmlwdGlvbiIsInplbGlnNWNob2ljZW1vZGVscyIsInNjYWZmb2xkaW5nIiwiZGF0YURvd25sb2FkIiwiJGZpbGwiLCJvcCIsImQxIiwiZDIiLCJ0cmFuc2l0aW9uIiwiYXR0ciIsImRlbGF5IiwiZHVyYXRpb24iLCJmaWxsIiwiZmlsbFRoaXMiLCJzZWxmIiwiY2xpY2siLCJkaXNwbGF5IiwiZmFkZU91dCIsInQxIiwicG9zIiwib2Zmc2V0IiwidG9wIiwiZmFkZUluIiwibiIsImtleXVwIiwiZXZ0Iiwia2V5Q29kZSIsInZhbCIsInRyYW5zUGFyc2UiLCJ0cmFuc2Zvcm0iLCJzbGljZSIsInR2YXIiLCJjb25jYXQiLCJwYXJlbnQiLCJmYW5kZU91dCIsInN0b3BQcm9wYWdhdGlvbiIsInRmdW5jIiwidGNhbGwiLCJPYmplY3QiLCJrZXlzIiwicmVkcmF3Iiwic3BsaWNlIiwiY29sb3IiLCJhcmdzIiwiZm9yRWFjaCIsIngiLCJpZHgiLCJpbmRleE9mIiwiY2xpY2tWYXIiLCJteVZhbHVlcyIsImoiLCJpaSIsImZpbmROb2RlSW5kZXgiLCJzZWxlY3RNZSIsImhleFRvUmdiYSIsIm15c3JjIiwibm9kZUluZGV4IiwibXl0Z3QiLCJzb3VyY2UiLCJ0YXJnZXQiLCJsZWZ0IiwicmlnaHQiLCJmb3JjZSIsInNpemUiLCJsaW5rRGlzdGFuY2UiLCJjaGFyZ2UiLCJ0aWNrIiwiZHJhZ19saW5lIiwicGF0aCIsImNpcmNsZSIsInNlbGVjdGVkX25vZGUiLCJzZWxlY3RlZF9saW5rIiwibW91c2Vkb3duX2xpbmsiLCJtb3VzZWRvd25fbm9kZSIsIm1vdXNldXBfbm9kZSIsInJlc2V0TW91c2VWYXJzIiwiZGVsdGFYIiwiZGVsdGFZIiwieSIsImRpc3QiLCJNYXRoIiwic3FydCIsIm5vcm1YIiwibm9ybVkiLCJzb3VyY2VQYWRkaW5nIiwidGFyZ2V0UGFkZGluZyIsInNvdXJjZVgiLCJzb3VyY2VZIiwidGFyZ2V0WCIsInRhcmdldFkiLCJub2RlIiwiZmluZE5vZGUiLCJtYXAiLCJpbmNsdWRlcyIsImluZGV4Iiwic3BsaWNlTGlua3NGb3JOb2RlIiwibm9kZVJlc2V0IiwibGVnZW5kIiwicmVzdGFydCIsIm15Q29sb3IiLCJyZ2IiLCJ0b1N0cmluZyIsImNhbGwiLCJkcmFnIiwiZ3Jhdml0eSIsImxpbmtTdHJlbmd0aCIsInJlc3VtZSIsImNsYXNzZWQiLCJKU09OIiwic3RyaW5naWZ5IiwiZXhpdCIsImciLCJlYWNoIiwicGxvdHR5cGUiLCJzdHIiLCJzZXRDb2xvcnMiLCJkZWZhdWx0TnVtY2hhciIsIl8iLCJldmVudCIsInByZXZlbnREZWZhdWx0IiwibW91c2Vtb3ZlIiwiZGlyZWN0aW9uIiwibGluayIsImZpbHRlciIsInZhclN1bW1hcnkiLCJzZXRBdHRyaWJ1dGUiLCJzZWxlY3RlZEluZGV4IiwibW91c2Vkb3duIiwiY3RybEtleSIsIm1vdXNlIiwibW91c2V1cCIsImZha2VDbGljayIsImZpbmQiLCIkbm9kZXMiLCJhbGwiLCJub2RlTmFtZSIsImpzb25EYXRhIiwidmFyaWFibGVzIiwibCIsInpQb3AiLCJzcmN0Z3QiLCJidG4iLCJqc29ub3V0IiwidXJsY2FsbCIsInJhcHBVUkwiLCJzb2xhanNvbm91dCIsImFsbFZhcnMiLCJzZWxlY3RvcnVybGNhbGwiLCJlc3RpbWF0ZVN1Y2Nlc3MiLCJzdG9wIiwicmVtb3ZlQ2hpbGQiLCJ0cmlnZ2VyIiwibW9kZWwiLCJtb2RDb2wiLCJpbnNlcnQiLCJhIiwiYmFja2dyb3VuZENvbG9yIiwiYiIsInN1YnN0ciIsInZpeiIsInJDYWxsIiwic2hvd0xvZyIsImVzdGltYXRlRmFpbCIsInNlbGVjdG9yU3VjY2VzcyIsInNlbGVjdG9yRmFpbCIsIm1ha2VDb3JzUmVxdWVzdCIsImRvd25sb2FkU3VjY2VzcyIsInNlc3Npb25pZCIsImhyZWYiLCJkb3dubG9hZEZhaWwiLCJteW0iLCJyZW1vdmVLaWRzIiwiZmlyc3RDaGlsZCIsImZpbGVsaXN0IiwiQXJyYXkiLCJpbWFnZXMiLCJ6ZmlnIiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwicmVzdWx0c0FycmF5Iiwic3VtSW5mbyIsInRhYmxlIiwidGhlYWQiLCJjb2xuYW1lcyIsInRib2R5IiwibXlOdW0iLCJOdW1iZXIiLCJpc05hTiIsInRvUHJlY2lzaW9uIiwib3V0MiIsInQyIiwiazIiLCJzdWJNZTIiLCJpbmRleGVkIiwibTIiLCJtYXRjaCIsInJlIiwiUmVnRXhwIiwicyIsInNlYXJjaCIsImZyb20iLCJ0byIsIm15biIsIm91dHR5cGVzIiwidmFybmFtZXNUeXBlcyIsImludGVydmFsIiwibnVtY2hhciIsIm5hdHVyZSIsImJpbmFyeSIsInBsb3R2YWx1ZXMiLCJwbG90eCIsInRyYW5zZm9ybXN0dWZmIiwidHlwZVN0dWZmIiwidHJhbnNmb3JtU3VjY2VzcyIsImZ1bmMiLCJzdWJzZXRlZCIsIm5ld1ZhciIsImVycm9yIiwianNvbmRhdGEiLCJteUluZGV4Iiwib2JqMSIsImRlZmF1bHRJbnRlcnZhbCIsImRlZmF1bHROYXR1cmUiLCJkZWZhdWx0QmluYXJ5IiwidHJhbnNmb3JtRmFpbCIsImNyZWF0ZUNPUlNSZXF1ZXN0IiwibWV0aG9kIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwiWERvbWFpblJlcXVlc3QiLCJzZXRSZXF1ZXN0SGVhZGVyIiwid2FybmluZ2NhbGxiYWNrIiwianNvbnN0cmluZyIsIm9ubG9hZCIsInJlc3BvbnNlVGV4dCIsInBhcnNlIiwibmFtZXMiLCJ3YXJuaW5nIiwib25lcnJvciIsInN0YXR1cyIsInJlYWR5U3RhdGUiLCJzZW5kIiwibGVmdHBhbmVsTWVkaXVtIiwicmlnaHRwYW5lbE1lZGl1bSIsImZuIiwiZDNDbGljayIsImNoaWxkcmVuIiwiZSIsIm15Y29sIiwiY3JlYXRlRXZlbnQiLCJpbml0TW91c2VFdmVudCIsImRpc3BhdGNoRXZlbnQiLCJsb2FkWE1MRG9jIiwiWE1MbmFtZSIsInhtbERvYyIsInJlc3BvbnNlWE1MIiwiQWN0aXZlWE9iamVjdCIsImFzeW5jIiwibG9hZCIsInRhYiIsInRhYmlkIiwiY2xzIiwicGFuZWwiLCJ0b2dnbGVSIiwiZXhwYW5kIiwiZ2V0QXR0cmlidXRlIiwic3VtbWFyeSIsInJpbnQiLCJmb3JtYXQiLCJtZWFuQ0kiLCJtZWFuIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJtZWRpYW4iLCJtb2RlIiwiZnJlcW1vZGUiLCJtaWQiLCJmcmVxbWlkIiwiZmV3ZXN0IiwiZnJlcWZld2VzdCIsInNkIiwibWluIiwibWF4IiwiaW52YWxpZCIsInZhbGlkIiwidW5pcXVlcyIsImhlcmZpbmRhaGwiLCJwb3BvdmVyQ29udGVudCIsImludCIsInByZWMiLCJmaWVsZCIsInBvcHVwWCIsInRzZiIsInRlbXBYIiwidGVtcFkiLCJpZHMiLCJyZWdzdHIiLCJteW5hbWUiLCJleGVjIiwibm9kZWlkIiwicGFyc2VJbnQiLCJoZXgiLCJqb2luIiwiYyIsImlzQXJyYXkiLCJjc3MiLCJzdWJzZXRFbXB0eSIsInN1YnNldHN0dWZmIiwic3Vic2V0U2VsZWN0U3VjY2VzcyIsImdyYXlPdXRzIiwibXlOb2RlcyIsIm15UGFyYW1zIiwibXlUcmFucyIsIm15Rm9yY2UiLCJteVByZXByb2Nlc3MiLCJteUxvZyIsIm15SGlzdG9yeSIsInZhck91dCIsInJlV3JpdGVMb2ciLCJ1bmRlZmluZWQiLCJwbG90eSIsInJlUGxvdCIsImRhdGFzZXQiLCJrIiwid3MiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztRQXdCZ0JBLEcsR0FBQUEsRztRQStGQUMsSSxHQUFBQSxJO1FBZzBCQUMsZSxHQUFBQSxlO1FBaUJBQyxXLEdBQUFBLFc7UUFrQ0FDLFEsR0FBQUEsUTtRQXFlQUMsSyxHQUFBQSxLO1FBb0NBQyxPLEdBQUFBLE87UUFZQUMsUSxHQUFBQSxRO1FBdUdBQyxVLEdBQUFBLFU7UUFpSEFDLFcsR0FB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QW5FLEVBQTBFLEtBQTFFLEVBQWlGLEtBQWpGLEVBQXdGLEtBQXhGLEVBQStGLENBQS9GLEVBQWtHLElBQWxHO0FBQ0F5VSxjQUFFSSxhQUFGLENBQWdCbk8sR0FBaEI7QUFDSCxTQUpEO0FBS0gsS0FORDtBQU9BM0csTUFBRXVaLEVBQUYsRUFBTS9FLE9BQU47QUFDQTVaLE9BQUcrRSxNQUFILENBQVU0WixFQUFWLEVBQ0sxTixPQURMLENBQ2EsUUFEYixFQUN1QixLQUR2QjtBQUVILENBYk0iLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5pbXBvcnQge2JhcnMsIGJhcnNOb2RlLCBiYXJzU3Vic2V0LCBkZW5zaXR5LCBkZW5zaXR5Tm9kZSwgc2VsVmFyQ29sb3J9IGZyb20gJy4vcGxvdHMuanMnO1xuXG4vLyBob3N0bmFtZSBkZWZhdWx0IC0gdGhlIGFwcCB3aWxsIHVzZSBpdCB0byBvYnRhaW4gdGhlIHZhcmlhYmxlIG1ldGFkYXRhXG4vLyAoZGRpKSBhbmQgcHJlLXByb2Nlc3NlZCBkYXRhIGluZm8gaWYgdGhlIGZpbGUgaWQgaXMgc3VwcGxpZWQgYXMgYW5cbi8vIGFyZ3VtZW50IChmb3IgZXguLCBndWkuaHRtbD9kZklkPTE3KSwgYnV0IGhvc3RuYW1lIGlzbid0LlxuLy8gRWRpdCBpdCB0byBzdWl0IHlvdXIgaW5zdGFsbGF0aW9uLlxuLy8gKE5PVEUgdGhhdCBpZiB0aGUgZmlsZSBpZCBpc24ndCBzdXBwbGllZCwgdGhlIGFwcCB3aWxsIGRlZmF1bHQgdG8gdGhlXG4vLyBsb2NhbCBmaWxlcyBzcGVjaWZpZWQgYmVsb3chKVxuLy8gTkVXOiBpdCBpcyBhbHNvIHBvc3NpYmxlIG5vdyB0byBzdXBwbHkgY29tcGxldGUgdXJscyBmb3IgdGhlIGRkaSBhbmRcbi8vIHRoZSB0YWItZGVsaW1pdGVkIGRhdGEgZmlsZTsgdGhlIHBhcmFtZXRlcnMgYXJlIGRkaXVybCBhbmQgZGF0YXVybC5cbi8vIFRoZXNlIG5ldyBwYXJhbWV0ZXJzIGFyZSBvcHRpb25hbC4gSWYgdGhleSBhcmUgbm90IHN1cHBsaWVkLCB0aGUgYXBwXG4vLyB3aWxsIGdvIHRoZSBvbGQgcm91dGUgLSB3aWxsIHRyeSB0byBjb29rIHN0YW5kYXJkIGRhdGF2ZXJzZSB1cmxzXG4vLyBmb3IgYm90aCB0aGUgZGF0YSBhbmQgbWV0YWRhdGEsIGlmIHRoZSBmaWxlIGlkIGlzIHN1cHBsaWVkOyBvciB0aGVcbi8vIGxvY2FsIGZpbGVzIGlmIG5vdGhpbmcgaXMgc3VwcGxpZWQuXG5cbi8vIEZPUiB2YXJpYWJsZXMgXCJwcm9kdWN0aW9uXCIgYW5kIFwicmFwcFVSTFwiLCBzZWUgL3RlbXBsYXRlL2luZGV4Lmh0bWxcbi8vXG4vL2xldCBwcm9kdWN0aW9uID0gZmFsc2U7XG4vL2xldCByYXBwVVJMID0gJ2h0dHA6Ly8xMjcuMC4wLjE6ODA4MC9yb29rLWN1c3RvbS8nOyAvLyB2aWEgRGphbmdvIC0+IHRvIFJBcGFjaGUvcm9va1xuLy9sZXQgcmFwcFVSTCA9ICdodHRwOi8vMC4wLjAuMDo4MDAwL2N1c3RvbS8nOyAvLyBEaXJlY3QgdG8gUkFwYWNoZS9yb29rXG5cbi8vIGZvciBkZWJ1Z2dpbmdcbmV4cG9ydCBmdW5jdGlvbiBjZGIobXNnKSB7XG4gICAgaWYgKCFwcm9kdWN0aW9uKXtcbiAgICAgICAgY29uc29sZS5sb2cobXNnKTtcbiAgICB9O1xufTtcblxuZXhwb3J0IGxldCBpbnNwZWN0ID0gb2JqID0+IHtcbiAgICBjb25zb2xlLmxvZyhvYmopO1xuICAgIHJldHVybiBvYmo7XG59O1xuXG4vLyBpbml0aWFsIGNvbG9yIHNjYWxlIHVzZWQgdG8gZXN0YWJsaXNoIHRoZSBpbml0aWFsIGNvbG9ycyBvZiBub2Rlc1xuLy8gYWxsTm9kZXMucHVzaCgpIGJlbG93IGVzdGFibGlzaGVzIGEgZmllbGQgZm9yIHRoZSBtYXN0ZXIgbm9kZSBhcnJheSBhbGxOb2RlcyBjYWxsZWQgXCJub2RlQ29sXCIgYW5kIGFzc2lnbnMgYSBjb2xvciBmcm9tIHRoaXMgc2NhbGUgdG8gdGhhdCBmaWVsZFxuLy8gZXZlcnl0aGluZyB0aGVyZSBhZnRlciBzaG91bGQgcmVmZXIgdG8gdGhlIG5vZGVDb2wgYW5kIG5vdCB0aGUgY29sb3Igc2NhbGUsIHRoaXMgZW5hYmxlcyB1cyB0byB1cGRhdGUgY29sb3JzIGFuZCBwYXNzIHRoZSB2YXJpYWJsZSB0eXBlIHRvIFIgYmFzZWQgb24gaXRzIGNvbG9yaW5nXG52YXIgY29sb3JzID0gZDMuc2NhbGUuY2F0ZWdvcnkyMCgpO1xuZXhwb3J0IGxldCBjc0NvbG9yID0gJyM0MTk2NDEnO1xuZXhwb3J0IGxldCBkdkNvbG9yID0gJyMyOGE0YzknO1xudmFyIGdyYXlDb2xvciA9ICcjYzBjMGMwJztcbmV4cG9ydCBsZXQgbm9tQ29sb3IgPSAnI2ZmNjYwMCc7XG5leHBvcnQgbGV0IHZhckNvbG9yID0gJyNmMGY4ZmYnOyAvLyBkMy5yZ2IoXCJhbGljZWJsdWVcIik7XG52YXIgdGFnZ2VkQ29sb3IgPSAnI2Y1ZjVmNSc7IC8vIGQzLnJnYihcIndoaXRlc21va2VcIik7XG5leHBvcnQgbGV0IHRpbWVDb2xvciA9ICcjMmQ2Y2EyJztcblxuZXhwb3J0IGxldCBsZWZ0dGFiID0gJ3RhYjEnOyAvLyBjdXJyZW50IHRhYiBpbiBsZWZ0IHBhbmVsXG5leHBvcnQgbGV0IHN1YnNldCA9IGZhbHNlO1xuZXhwb3J0IGxldCBzdW1tYXJ5SG9sZCA9IGZhbHNlO1xuZXhwb3J0IGxldCByaWdodHRhYiA9ICdidG5Nb2RlbHMnOyAvLyBjdXJyZW50IHRhYiBpbiByaWdodCBwYW5lbFxuXG4vLyB0cmFuc2Zvcm1hdGlvbiB0b29sYmFyIG9wdGlvbnNcbmxldCB0LCB0eXBlVHJhbnNmb3JtO1xubGV0IHRyYW5zZm9ybUxpc3QgPSAnbG9nKGQpIGV4cChkKSBkXjIgc3FydChkKSBpbnRlcmFjdChkLGUpJy5zcGxpdCgnICcpO1xubGV0IHRyYW5zZm9ybVZhciA9ICcnO1xuXG4vLyB2YXIgbGlzdCBmb3IgZWFjaCBzcGFjZSBjb250YWluIHZhcmlhYmxlcyBpbiBvcmlnaW5hbCBkYXRhXG4vLyBwbHVzIHRyYW5zIGluIHRoYXQgc3BhY2VcbmxldCB0cmFucyA9IFtdO1xubGV0IHByZXByb2Nlc3MgPSB7fTsgLy8gaG9sZCBwcmUtcHJvY2Vzc2VkIGRhdGFcbmxldCBzcGFjZXMgPSBbXTtcblxuLy8gbGF5b3V0IGZ1bmN0aW9uIGNvbnN0YW50c1xuY29uc3QgbGF5b3V0QWRkID0gXCJhZGRcIjtcbmNvbnN0IGxheW91dE1vdmUgPSBcIm1vdmVcIjtcblxuLy8gUmFkaXVzIG9mIGNpcmNsZVxudmFyIGFsbFIgPSA0MDtcblxuLy8gc3BhY2UgaW5kZXhcbnZhciBteXNwYWNlID0gMDtcblxudmFyIGZvcmNldG9nZ2xlID0gW1widHJ1ZVwiXTtcbnZhciBwcml2ID0gdHJ1ZTtcblxuZXhwb3J0IGxldCBsb2dBcnJheSA9IFtdO1xuZXhwb3J0IGxldCB6cGFyYW1zID0ge1xuICAgIHpkYXRhOiBbXSxcbiAgICB6ZWRnZXM6IFtdLFxuICAgIHp0aW1lOiBbXSxcbiAgICB6bm9tOiBbXSxcbiAgICB6Y3Jvc3M6IFtdLFxuICAgIHptb2RlbDogXCJcIixcbiAgICB6dmFyczogW10sXG4gICAgemR2OiBbXSxcbiAgICB6ZGF0YXVybDogXCJcIixcbiAgICB6c3Vic2V0OiBbXSxcbiAgICB6c2V0eDogW10sXG4gICAgem1vZGVsY291bnQ6IDAsXG4gICAgenBsb3Q6IFtdLFxuICAgIHpzZXNzaW9uaWQ6IFwiXCIsXG4gICAgemRhdGFjaXRlOiBcIlwiXG59O1xuXG52YXIgbW9kZWxDb3VudCA9IDA7XG5leHBvcnQgbGV0IHZhbHVlS2V5ID0gW107XG5leHBvcnQgbGV0IGFsbE5vZGVzID0gW107XG52YXIgYWxsUmVzdWx0cyA9IFtdO1xuZXhwb3J0IGxldCBub2RlcyA9IFtdO1xudmFyIGxpbmtzID0gW107XG52YXIgbW9kcyA9IHt9O1xudmFyIGVzdGltYXRlZCA9IGZhbHNlO1xudmFyIHJpZ2h0Q2xpY2tMYXN0ID0gZmFsc2U7XG52YXIgc2VsSW50ZXJhY3QgPSBmYWxzZTtcbnZhciBjYWxsSGlzdG9yeSA9IFtdOyAvLyB0cmFuc2Zvcm0gYW5kIHN1YnNldCBjYWxsc1xuXG52YXIgc3ZnLCB3aWR0aCwgaGVpZ2h0LCBkaXYsIGVzdGltYXRlTGFkZGEsIHNlbGVjdExhZGRhO1xudmFyIGFyYzMsIGFyYzQ7XG5cbmxldCBieUlkID0gaWQgPT4gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpO1xuXG4vLyBwYWdlIHJlbG9hZCBsaW5rZWQgdG8gYnRuUmVzZXRcbmV4cG9ydCBjb25zdCByZXNldCA9IGZ1bmN0aW9uIHJlbG9hZFBhZ2UoKSB7XG4gIGxvY2F0aW9uLnJlbG9hZCgpO1xufVxuXG5cbnZhciBkYXRhdXJsO1xuZXhwb3J0IGZ1bmN0aW9uIG1haW4oZmlsZWlkLCBob3N0bmFtZSwgZGRpdXJsLCBkYXRhdXJsKSB7XG4gICAgZGF0YXVybCA9IGRhdGF1cmw7XG4gICAgaWYgKHByb2R1Y3Rpb24gJiYgZmlsZWlkID09IFwiXCIpIHtcbiAgICAgICAgYWxlcnQoXCJFcnJvcjogTm8gZmlsZWlkIGhhcyBiZWVuIHByb3ZpZGVkLlwiKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiRXJyb3I6IE5vIGZpbGVpZCBoYXMgYmVlbiBwcm92aWRlZC5cIik7XG4gICAgfVxuXG4gICAgbGV0IGRhdGF2ZXJzZXVybCA9ICcnO1xuICAgIGlmIChob3N0bmFtZSkgZGF0YXZlcnNldXJsID0gXCJodHRwczovL1wiICsgaG9zdG5hbWU7XG4gICAgZWxzZSBpZiAocHJvZHVjdGlvbikgZGF0YXZlcnNldXJsID0gXCIlUFJPRFVDVElPTl9EQVRBVkVSU0VfVVJMJVwiO1xuICAgIGVsc2UgZGF0YXZlcnNldXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjgwODBcIjtcblxuICAgIGlmIChmaWxlaWQgJiYgIWRhdGF1cmwpIHtcbiAgICAgICAgLy8gZmlsZSBpZCBzdXBwbGllZDsgYXNzdW1lIHdlIGFyZSBkZWFsaW5nIHdpdGggZGF0YXZlcnNlIGFuZCBjb29rIGEgc3RhbmRhcmQgZGF0YXZlcnNlIGRhdGEgYWNjZXNzIHVybFxuICAgICAgICAvLyB3aXRoIHRoZSBmaWxlaWQgc3VwcGxpZWQgYW5kIHRoZSBob3N0bmFtZSB3ZSBoYXZlIHN1cHBsaWVkIG9yIGNvbmZpZ3VyZWRcbiAgICAgICAgZGF0YXVybCA9IGRhdGF2ZXJzZXVybCArIFwiL2FwaS9hY2Nlc3MvZGF0YWZpbGUvXCIgKyBmaWxlaWQ7XG5cbiAgICAgICAgLy8gcnA7IHRlbXBvcmFyaWx5IHJlbW92ZSB0aGlzXG4gICAgICAgIC8vZGF0YXVybCA9IGRhdGF1cmwgKyBcIj9rZXk9XCIgKyBhcGlrZXk7XG4gICAgfVxuXG4gICAgc3ZnID0gZDMuc2VsZWN0KFwiI3doaXRlc3BhY2VcIik7XG5cbiAgICB2YXIgdGVtcFdpZHRoID0gZDMuc2VsZWN0KFwiI21haW4ubGVmdFwiKS5zdHlsZShcIndpZHRoXCIpO1xuICAgIHdpZHRoID0gdGVtcFdpZHRoLnN1YnN0cmluZygwLCB0ZW1wV2lkdGgubGVuZ3RoIC0gMik7XG4gICAgaGVpZ2h0ID0gJCh3aW5kb3cpLmhlaWdodCgpIC0gMTIwOyAvLyBIYXJkIGNvZGluZyBmb3IgaGVhZGVyIGFuZCBmb290ZXIgYW5kIGJvdHRvbSBtYXJnaW4uXG5cbiAgICBlc3RpbWF0ZUxhZGRhID0gTGFkZGEuY3JlYXRlKGJ5SWQoXCJidG5Fc3RpbWF0ZVwiKSk7XG4gICAgc2VsZWN0TGFkZGEgPSBMYWRkYS5jcmVhdGUoYnlJZChcImJ0blNlbGVjdFwiKSk7XG5cbiAgICB2YXIgY29sb3JUaW1lID0gZmFsc2U7XG4gICAgdmFyIGNvbG9yQ1MgPSBmYWxzZTtcblxuICAgIHZhciBkZXBWYXIgPSBmYWxzZTtcbiAgICB2YXIgc3Vic2V0ZGl2ID0gZmFsc2U7XG4gICAgdmFyIHNldHhkaXYgPSBmYWxzZTtcblxuICAgIC8vV2lkdGggYW5kIGhlaWdodCBmb3IgaGlzdGdyYW1zXG4gICAgdmFyIGJhcndpZHRoID0gMS4zICogYWxsUjtcbiAgICB2YXIgYmFyaGVpZ2h0ID0gMC41ICogYWxsUjtcbiAgICB2YXIgYmFyUGFkZGluZyA9IDAuMzU7XG4gICAgdmFyIGJhcm51bWJlciA9IDc7XG5cbiAgICBsZXQgYXJjID0gKHN0YXJ0LCBlbmQpID0+IGQzLnN2Zy5hcmMoKVxuICAgICAgICAuaW5uZXJSYWRpdXMoYWxsUiArIDUpXG4gICAgICAgIC5vdXRlclJhZGl1cyhhbGxSICsgMjApXG4gICAgICAgIC5zdGFydEFuZ2xlKHN0YXJ0KVxuICAgICAgICAuZW5kQW5nbGUoZW5kKTtcbiAgICBsZXQgW2FyYzAsIGFyYzEsIGFyYzJdID0gW2FyYygwLCAzLjIpLCBhcmMoMCwgMSksIGFyYygxLjEsIDIuMildO1xuICAgIGFyYzMgPSBhcmMoMi4zLCAzLjMpO1xuICAgIGFyYzQgPSBhcmMoNC4zLCA1LjMpO1xuXG4gICAgLy8gRnJvbSAuY3N2XG4gICAgdmFyIGRhdGFzZXQyID0gW107XG4gICAgdmFyIGxhYmxBcnJheSA9IFtdO1xuICAgIHZhciBob2xkID0gW107XG4gICAgdmFyIHN1YnNldE5vZGVzID0gW107XG5cblxuICAgIC8vIGNvbGxhcHNhYmxlIHVzZXIgbG9nXG4gICAgJCgnI2NvbGxhcHNlTG9nJykub24oJ3Nob3duLmJzLmNvbGxhcHNlJywgKCkgPT4ge1xuICAgICAgICBkMy5zZWxlY3QoXCIjY29sbGFwc2VMb2cgZGl2LnBhbmVsLWJvZHlcIikuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAgICAgLmRhdGEobG9nQXJyYXkpXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgICAgIC50ZXh0KGQgPT4gZCk7XG4gICAgfSk7XG4gICAgJCgnI2NvbGxhcHNlTG9nJykub24oJ2hpZGRlbi5icy5jb2xsYXBzZScsICgpID0+IHtcbiAgICAgICAgZDMuc2VsZWN0KFwiI2NvbGxhcHNlTG9nIGRpdi5wYW5lbC1ib2R5XCIpLnNlbGVjdEFsbChcInBcIilcbiAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICB9KTtcblxuICAgIC8vIGRlZmF1bHQgdG8gQ2FsaWZvcm5pYSBQVU1TIHN1YnNldFxuICAgIGxldCBkYXRhID0gJ2RhdGEvJyArIChmYWxzZSA/ICdQVU1TNXNtYWxsJyA6ICdmZWFyb25MYWl0aW4nKTtcbiAgICBsZXQgbWV0YWRhdGF1cmwgPSBkZGl1cmwgfHwgKGZpbGVpZCA/IGAke2RhdGF2ZXJzZXVybH0vYXBpL21ldGEvZGF0YWZpbGUvJHtmaWxlaWR9YCA6IGRhdGEgKyAnLnhtbCcpO1xuICAgIC8vIHJlYWQgcHJlLXByb2Nlc3NlZCBtZXRhZGF0YSBhbmQgZGF0YVxuICAgIGxldCBwVVJMID0gZGF0YXVybCA/IGAke2RhdGF1cmx9JmZvcm1hdD1wcmVwYCA6IGRhdGEgKyAnLmpzb24nO1xuICAgIGNkYigncFVSTDogJyArIHBVUkwpO1xuICAgIC8vIGxvYWRzIGFsbCBleHRlcm5hbCBkYXRhOiBtZXRhZGF0YSAoRFZOJ3MgZGRpKSwgcHJlcHJvY2Vzc2VkIChmb3IgcGxvdHRpbmcgZGlzdHJpYnV0aW9ucyksIGFuZCB6ZWxpZ21vZGVscyAocHJvZHVjZWQgYnkgWmVsaWcpIGFuZCBpbml0aWF0ZXMgdGhlIGRhdGEgZG93bmxvYWQgdG8gdGhlIHNlcnZlclxuICAgIHZhciB1cmwsIHAsIHYsIGNhbGxiYWNrO1xuICAgIHJlYWRQcmVwcm9jZXNzKHVybCA9IHBVUkwsIHAgPSBwcmVwcm9jZXNzLCB2ID0gbnVsbCwgY2FsbGJhY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgZDMueG1sKG1ldGFkYXRhdXJsLCBcImFwcGxpY2F0aW9uL3htbFwiLCB4bWwgPT4ge1xuICAgICAgICAgICAgdmFyIHZhcnMgPSB4bWwuZG9jdW1lbnRFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwidmFyXCIpO1xuICAgICAgICAgICAgdmFyIHRlbXAgPSB4bWwuZG9jdW1lbnRFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiZmlsZU5hbWVcIik7XG4gICAgICAgICAgICB6cGFyYW1zLnpkYXRhID0gdGVtcFswXS5jaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZTtcblxuICAgICAgICAgICAgdmFyIGNpdGUgPSB4bWwuZG9jdW1lbnRFbGVtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwiYmlibENpdFwiKTtcbiAgICAgICAgICAgIHpwYXJhbXMuemRhdGFjaXRlID0gY2l0ZVswXS5jaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgIC8vIGNsZWFuIGNpdGF0aW9uIHNvIFBPU1QgaXMgdmFsaWQganNvblxuICAgICAgICAgICAgenBhcmFtcy56ZGF0YWNpdGUgPSB6cGFyYW1zLnpkYXRhY2l0ZS5yZXBsYWNlKC9cXCYvZywgXCJhbmRcIilcbiAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFw7L2csIFwiLFwiKVxuICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXCUvZywgXCItXCIpO1xuXG4gICAgICAgICAgICAvLyBkYXRhc2V0IG5hbWUgdHJpbW1lZCB0byAxMiBjaGFyc1xuICAgICAgICAgICAgdmFyIGRhdGFuYW1lID0genBhcmFtcy56ZGF0YS5yZXBsYWNlKC9cXC4oLiopLywgJycpOyAvLyBkcm9wIGZpbGUgZXh0ZW5zaW9uXG4gICAgICAgICAgICBkMy5zZWxlY3QoXCIjZGF0YU5hbWVcIilcbiAgICAgICAgICAgICAgICAuaHRtbChkYXRhbmFtZSk7XG4gICAgICAgICAgICAkKCcjY2l0ZSBkaXYucGFuZWwtYm9keScpLnRleHQoenBhcmFtcy56ZGF0YWNpdGUpO1xuXG4gICAgICAgICAgICAvLyBQdXQgZGF0YXNldCBuYW1lLCBmcm9tIG1ldGEtZGF0YSwgaW50byBwYWdlIHRpdGxlXG4gICAgICAgICAgICBkMy5zZWxlY3QoXCJ0aXRsZVwiKS5odG1sKFwiVHdvUmF2ZW5zIFwiICsgZGF0YW5hbWUpO1xuICAgICAgICAgICAgLy8gdGVtcG9yYXJ5IHZhbHVlcyBmb3IgaG9sZCB0aGF0IGNvcnJlc3BvbmQgdG8gaGlzdG9ncmFtIGJpbnNcbiAgICAgICAgICAgIGhvbGQgPSBbLjYsIC4yLCAuOSwgLjgsIC4xLCAuMywgLjRdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdmFsdWVLZXlbaV0gPSB2YXJzW2ldLmF0dHJpYnV0ZXMubmFtZS5ub2RlVmFsdWU7XG4gICAgICAgICAgICAgICAgbGFibEFycmF5W2ldID0gdmFyc1tpXS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImxhYmxcIikubGVuZ3RoID09IDAgP1xuICAgICAgICAgICAgICAgICAgICBcIm5vIGxhYmVsXCIgOlxuICAgICAgICAgICAgICAgICAgICB2YXJzW2ldLmdldEVsZW1lbnRzQnlUYWdOYW1lKFwibGFibFwiKVswXS5jaGlsZE5vZGVzWzBdLm5vZGVWYWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZGF0YXNldGNvdW50ID0gZDMubGF5b3V0Lmhpc3RvZ3JhbSgpXG4gICAgICAgICAgICAgICAgICAgIC5iaW5zKGJhcm51bWJlcikuZnJlcXVlbmN5KGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAoWzAsIDAsIDAsIDAsIDBdKTtcbiAgICAgICAgICAgICAgICAvLyBjb250YWlucyBhbGwgdGhlIHByZXByb2Nlc3NlZCBkYXRhIHdlIGhhdmUgZm9yIHRoZSB2YXJpYWJsZSwgYXMgd2VsbCBhcyBVSSBkYXRhIHBlcnRpbmVudCB0byB0aGF0IHZhcmlhYmxlLCBzdWNoIGFzIHNldHggdmFsdWVzIChpZiB0aGUgdXNlciBoYXMgc2VsZWN0ZWQgdGhlbSkgYW5kIHBlYmJsZSBjb29yZGluYXRlc1xuICAgICAgICAgICAgICAgIGxldCBvYmogPSB7XG4gICAgICAgICAgICAgICAgICAgIGlkOiBpLFxuICAgICAgICAgICAgICAgICAgICByZWZsZXhpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiB2YWx1ZUtleVtpXSxcbiAgICAgICAgICAgICAgICAgICAgbGFibDogbGFibEFycmF5W2ldLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBbNSwgMTUsIDIwLCAwLCA1LCAxNSwgMjBdLFxuICAgICAgICAgICAgICAgICAgICBjb3VudDogaG9sZCxcbiAgICAgICAgICAgICAgICAgICAgbm9kZUNvbDogY29sb3JzKGkpLFxuICAgICAgICAgICAgICAgICAgICBiYXNlQ29sOiBjb2xvcnMoaSksXG4gICAgICAgICAgICAgICAgICAgIHN0cm9rZUNvbG9yOiBzZWxWYXJDb2xvcixcbiAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICBzdWJzZXRwbG90OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgc3Vic2V0cmFuZ2U6IFtcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgc2V0eHBsb3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICBzZXR4dmFsczogW1wiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgICAgICBncmF5b3V0OiBmYWxzZVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgalF1ZXJ5LmV4dGVuZCh0cnVlLCBvYmosIHByZXByb2Nlc3NbdmFsdWVLZXlbaV1dKTtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlcy5wdXNoKG9iaik7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyByZWFkIHRoZSB6ZWxpZyBtb2RlbHMgYW5kIHBvcHVsYXRlIG1vZGVsIGxpc3QgaW4gcmlnaHQgcGFuZWxcbiAgICAgICAgICAgIGQzLmpzb24oXCJkYXRhL3plbGlnNW1vZGVscy5qc29uXCIsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgY2RiKFwiemVsaWcgbW9kZWxzIGpzb246IFwiLCBkYXRhKTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gZGF0YS56ZWxpZzVtb2RlbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuemVsaWc1bW9kZWxzLmhhc093blByb3BlcnR5KGtleSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RzW2RhdGEuemVsaWc1bW9kZWxzW2tleV0ubmFtZVswXV0gPSBkYXRhLnplbGlnNW1vZGVsc1trZXldLmRlc2NyaXB0aW9uWzBdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkMy5qc29uKFwiZGF0YS96ZWxpZzVjaG9pY2Vtb2RlbHMuanNvblwiLCAoZXJyLCBkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChlcnIpXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgICAgIGNkYihcInplbGlnIGNob2ljZSBtb2RlbHMganNvbjogXCIsIGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBrZXkgaW4gZGF0YS56ZWxpZzVjaG9pY2Vtb2RlbHMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLnplbGlnNWNob2ljZW1vZGVscy5oYXNPd25Qcm9wZXJ0eShrZXkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZHNbZGF0YS56ZWxpZzVjaG9pY2Vtb2RlbHNba2V5XS5uYW1lWzBdXSA9IGRhdGEuemVsaWc1Y2hvaWNlbW9kZWxzW2tleV0uZGVzY3JpcHRpb25bMF07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2NhZmZvbGRpbmcoY2FsbGJhY2sgPSBsYXlvdXQpO1xuICAgICAgICAgICAgICAgICAgICBkYXRhRG93bmxvYWQoKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxubGV0ICRmaWxsID0gKG9iaiwgb3AsIGQxLCBkMikgPT4gZDMuc2VsZWN0KG9iaikudHJhbnNpdGlvbigpXG4gICAgLmF0dHIoJ2ZpbGwtb3BhY2l0eScsIG9wKVxuICAgIC5kZWxheShkMSlcbiAgICAuZHVyYXRpb24oZDIpO1xubGV0IGZpbGwgPSAoZCwgaWQsIG9wLCBkMSwgZDIpID0+ICRmaWxsKCcjJyArIGlkICsgZC5pZCwgb3AsIGQxLCBkMik7XG5sZXQgZmlsbFRoaXMgPSAoc2VsZiwgb3AsIGQxLCBkMikgPT4gJGZpbGwoc2VsZiwgb3AsIGQxLCBkMik7XG5cbi8vIHNjYWZmb2xkaW5nIGlzIGNhbGxlZCBhZnRlciBhbGwgZXh0ZXJuYWwgZGF0YSBhcmUgZ3VhcmFudGVlZCB0byBoYXZlIGJlZW4gcmVhZCB0byBjb21wbGV0aW9uLiB0aGlzIHBvcHVsYXRlcyB0aGUgbGVmdCBwYW5lbCB3aXRoIHZhcmlhYmxlIG5hbWVzLCB0aGUgcmlnaHQgcGFuZWwgd2l0aCBtb2RlbCBuYW1lcywgdGhlIHRyYW5zZm9ybWF0aW9uIHRvb2wsIGFuIHRoZSBhc3NvY2lhdGVkIG1vdXNlb3ZlcnMuIGl0cyBjYWxsYmFjayBpcyBsYXlvdXQoKSwgd2hpY2ggaW5pdGlhbGl6ZXMgdGhlIG1vZGVsaW5nIHNwYWNlXG5mdW5jdGlvbiBzY2FmZm9sZGluZyhjYWxsYmFjaykge1xuICAgIC8vIGVzdGFibGlzaGluZyB0aGUgdHJhbnNmb3JtYXRpb24gZWxlbWVudFxuICAgIGQzLnNlbGVjdChcIiN0cmFuc2Zvcm1hdGlvbnNcIilcbiAgICAgICAgLmFwcGVuZChcImlucHV0XCIpXG4gICAgICAgIC5hdHRyKFwiaWRcIiwgXCJ0SW5wdXRcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImZvcm0tY29udHJvbFwiKVxuICAgICAgICAuYXR0cihcInR5cGVcIiwgXCJ0ZXh0XCIpXG4gICAgICAgIC5hdHRyKFwidmFsdWVcIiwgXCJWYXJpYWJsZSB0cmFuc2Zvcm1hdGlvblwiKTtcblxuICAgIC8vIHZhcmlhYmxlIGRyb3Bkb3duXG4gICAgZDMuc2VsZWN0KFwiI3RyYW5zZm9ybWF0aW9uc1wiKVxuICAgICAgICAuYXBwZW5kKFwidWxcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcInRyYW5zU2VsXCIpXG4gICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgdmFyQ29sb3IpXG4gICAgICAgIC5zZWxlY3RBbGwoJ2xpJylcbiAgICAgICAgLmRhdGEoW1wiYVwiLCBcImJcIl0pIC8vc2V0IHRvIHZhcmlhYmxlcyBpbiBtb2RlbCBzcGFjZSBhcyB0aGV5J3JlIGFkZGVkXG4gICAgICAgIC5lbnRlcigpXG4gICAgICAgIC5hcHBlbmQoXCJsaVwiKVxuICAgICAgICAudGV4dChkID0+IGQpO1xuXG4gICAgLy8gZnVuY3Rpb24gZHJvcGRvd25cbiAgICBkMy5zZWxlY3QoXCIjdHJhbnNmb3JtYXRpb25zXCIpXG4gICAgICAgIC5hcHBlbmQoXCJ1bFwiKVxuICAgICAgICAuYXR0cihcImlkXCIsIFwidHJhbnNMaXN0XCIpXG4gICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJub25lXCIpXG4gICAgICAgIC5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgdmFyQ29sb3IpXG4gICAgICAgIC5zZWxlY3RBbGwoJ2xpJylcbiAgICAgICAgLmRhdGEodHJhbnNmb3JtTGlzdClcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcImxpXCIpXG4gICAgICAgIC50ZXh0KGQgPT4gZCk7XG5cbiAgICAkKCcjdElucHV0JykuY2xpY2soKCkgPT4ge1xuICAgICAgICB2YXIgdCA9IGJ5SWQoJ3RyYW5zU2VsJykuc3R5bGUuZGlzcGxheTtcbiAgICAgICAgaWYgKHQgIT09IFwibm9uZVwiKSB7IC8vIGlmIHZhcmlhYmxlIGxpc3QgaXMgZGlzcGxheWVkIHdoZW4gaW5wdXQgaXMgY2xpY2tlZC4uLlxuICAgICAgICAgICAgJCgnI3RyYW5zU2VsJykuZmFkZU91dCgxMDApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHZhciB0MSA9IGJ5SWQoJ3RyYW5zTGlzdCcpLnN0eWxlLmRpc3BsYXk7XG4gICAgICAgIGlmICh0MSAhPT0gXCJub25lXCIpIHsgLy8gaWYgZnVuY3Rpb24gbGlzdCBpcyBkaXNwbGF5ZWQgd2hlbiBpbnB1dCBpcyBjbGlja2VkLi4uXG4gICAgICAgICAgICAkKCcjdHJhbnNMaXN0JykuZmFkZU91dCgxMDApO1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gaGlnaGxpZ2h0IHRoZSB0ZXh0XG4gICAgICAgICQodGhpcykuc2VsZWN0KCk7XG4gICAgICAgIHZhciBwb3MgPSAkKCcjdElucHV0Jykub2Zmc2V0KCk7XG4gICAgICAgIHBvcy50b3AgKz0gJCgnI3RJbnB1dCcpLndpZHRoKCk7XG4gICAgICAgICQoJyN0cmFuc1NlbCcpLmZhZGVJbigxMDApO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSk7XG5cbiAgICB2YXIgbjtcbiAgICAkKCcjdElucHV0Jykua2V5dXAoZXZ0ID0+IHtcbiAgICAgICAgdmFyIHQgPSBieUlkKCd0cmFuc1NlbCcpLnN0eWxlLmRpc3BsYXk7XG4gICAgICAgIHZhciB0MSA9IGJ5SWQoJ3RyYW5zTGlzdCcpLnN0eWxlLmRpc3BsYXk7XG4gICAgICAgIGlmICh0ICE9IFwibm9uZVwiKSAkKCcjdHJhbnNTZWwnKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgIGVsc2UgaWYgKHQxICE9IFwibm9uZVwiKSAkKCcjdHJhbnNMaXN0JykuZmFkZU91dCgxMDApO1xuXG4gICAgICAgIGlmIChldnQua2V5Q29kZSA9PSAxMykgeyAvLyBrZXl1cCBvbiBFbnRlclxuICAgICAgICAgICAgbiA9ICQoJyN0SW5wdXQnKS52YWwoKTtcbiAgICAgICAgICAgIHZhciB0ID0gdHJhbnNQYXJzZShuPW4pO1xuICAgICAgICAgICAgaWYgKCF0KVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHRyYW5zZm9ybShuID0gdC5zbGljZSgwLCB0Lmxlbmd0aCAtIDEpLCB0ID0gdFt0Lmxlbmd0aCAtIDFdLCB0eXBlVHJhbnNmb3JtID0gZmFsc2UpO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICB2YXIgdDtcbiAgICAkKCcjdHJhbnNMaXN0IGxpJykuY2xpY2soZnVuY3Rpb24oZXZ0KXtcbiAgICAgICAgLy8gaWYgaW50ZXJhY3QgaXMgc2VsZWN0ZWQsIHNob3cgdmFyaWFibGUgbGlzdCBhZ2FpblxuICAgICAgICBpZiAoJCh0aGlzKS50ZXh0KCkgPT0gXCJpbnRlcmFjdChkLGUpXCIpIHtcbiAgICAgICAgICAgICQoJyN0SW5wdXQnKS52YWwodHZhci5jb25jYXQoJyonKSk7XG4gICAgICAgICAgICBzZWxJbnRlcmFjdCA9IHRydWU7XG4gICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZhbmRlT3V0KDEwMCk7XG4gICAgICAgICAgICAkKCcjdHJhbnNTZWwnKS5mYWRlSW4oMTAwKTtcbiAgICAgICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB0dmFyID0gJCgnI3RJbnB1dCcpLnZhbCgpO1xuICAgICAgICB2YXIgdGZ1bmMgPSAkKHRoaXMpLnRleHQoKS5yZXBsYWNlKFwiZFwiLCBcIl90cmFuc3ZhcjBcIik7XG4gICAgICAgIHZhciB0Y2FsbCA9ICQodGhpcykudGV4dCgpLnJlcGxhY2UoXCJkXCIsIHR2YXIpO1xuICAgICAgICAkKCcjdElucHV0JykudmFsKHRjYWxsKTtcbiAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgIGV2dC5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICAgICAgdHJhbnNmb3JtKG4gPSB0dmFyLCB0ID0gdGZ1bmMsIHR5cGVUcmFuc2Zvcm0gPSBmYWxzZSk7XG4gICAgfSk7XG5cbiAgICBkMy5zZWxlY3QoXCIjbW9kZWxzXCIpXG4gICAgICAgIC5zdHlsZSgnaGVpZ2h0JywgMjAwMClcbiAgICAgICAgLnN0eWxlKCdvdmVyZmlsbCcsICdzY3JvbGwnKTtcblxuICAgIGQzLnNlbGVjdChcIiNtb2RlbHNcIikuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAuZGF0YShPYmplY3Qua2V5cyhtb2RzKSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgLmF0dHIoXCJpZFwiLCBcIl9tb2RlbF9cIi5jb25jYXQpXG4gICAgICAgIC50ZXh0KGQgPT4gZClcbiAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgZCA9PiB2YXJDb2xvcilcbiAgICAgICAgLmF0dHIoXCJkYXRhLWNvbnRhaW5lclwiLCBcImJvZHlcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLXRvZ2dsZVwiLCBcInBvcG92ZXJcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLXRyaWdnZXJcIiwgXCJob3ZlclwiKVxuICAgICAgICAuYXR0cihcImRhdGEtcGxhY2VtZW50XCIsIFwidG9wXCIpXG4gICAgICAgIC5hdHRyKFwiZGF0YS1odG1sXCIsIFwidHJ1ZVwiKVxuICAgICAgICAuYXR0cihcIm9ubW91c2VvdmVyXCIsIFwiJCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKTtcIilcbiAgICAgICAgLmF0dHIoXCJvbm1vdXNlb3V0XCIsIFwiJCh0aGlzKS5wb3BvdmVyKCd0b2dnbGUnKTtcIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIsIFwiTW9kZWwgRGVzY3JpcHRpb25cIilcbiAgICAgICAgLmF0dHIoXCJkYXRhLWNvbnRlbnRcIiwgZCA9PiBtb2RzW2RdKTtcblxuICAgIC8vIGNhbGwgbGF5b3V0KCkgYmVjYXVzZSBhdCB0aGlzIHBvaW50IGFsbCBzY2FmZm9sZGluZyBpcyB1cCBhbmQgcmVhZHlcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICBtLnJlZHJhdygpO1xuICAgIH1cbn1cblxubGV0IHNwbGljZSA9IChjb2xvciwgdGV4dCwgLi4uYXJncykgPT4ge1xuICAgIGFyZ3MuZm9yRWFjaCh4ID0+IHtcbiAgICAgICAgaWYgKGNvbG9yICE9IHhbMF0pXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGxldCBpZHggPSB6cGFyYW1zW3hbMV1dLmluZGV4T2YodGV4dCk7XG4gICAgICAgIGlkeCA+IC0xICYmIHpwYXJhbXNbeFsxXV0uc3BsaWNlKGlkeCwgMSk7XG4gICAgfSk7XG59O1xuXG5leHBvcnQgbGV0IGNsaWNrVmFyO1xuXG5mdW5jdGlvbiBsYXlvdXQodikge1xuICAgIHZhciBteVZhbHVlcyA9IFtdO1xuICAgIG5vZGVzID0gW107XG4gICAgbGlua3MgPSBbXTtcblxuICAgIGlmICh2ID09IGxheW91dEFkZCB8fCB2ID09IGxheW91dE1vdmUpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB6cGFyYW1zLnp2YXJzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICB2YXIgaWkgPSBmaW5kTm9kZUluZGV4KHpwYXJhbXMuenZhcnNbal0pO1xuICAgICAgICAgICAgaWYgKGFsbE5vZGVzW2lpXS5ncmF5b3V0KVxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgbm9kZXMucHVzaChhbGxOb2Rlc1tpaV0pO1xuICAgICAgICAgICAgdmFyIHNlbGVjdE1lID0genBhcmFtcy56dmFyc1tqXS5yZXBsYWNlKC9cXFcvZywgXCJfXCIpO1xuICAgICAgICAgICAgc2VsZWN0TWUgPSBcIiNcIi5jb25jYXQoc2VsZWN0TWUpO1xuICAgICAgICAgICAgZDMuc2VsZWN0KHNlbGVjdE1lKS5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsICgpID0+IGhleFRvUmdiYShub2Rlc1tqXS5zdHJva2VDb2xvcikpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB6cGFyYW1zLnplZGdlcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgdmFyIG15c3JjID0gbm9kZUluZGV4KHpwYXJhbXMuemVkZ2VzW2pdWzBdKTtcbiAgICAgICAgICAgIHZhciBteXRndCA9IG5vZGVJbmRleCh6cGFyYW1zLnplZGdlc1tqXVsxXSk7XG4gICAgICAgICAgICBsaW5rcy5wdXNoKHtcbiAgICAgICAgICAgICAgICBzb3VyY2U6IG5vZGVzW215c3JjXSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG5vZGVzW215dGd0XSxcbiAgICAgICAgICAgICAgICBsZWZ0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICByaWdodDogdHJ1ZVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoYWxsTm9kZXMubGVuZ3RoID4gMikge1xuICAgICAgICAgICAgbm9kZXMgPSBbYWxsTm9kZXNbMF0sIGFsbE5vZGVzWzFdLCBhbGxOb2Rlc1syXV07XG4gICAgICAgICAgICBsaW5rcyA9IFt7XG4gICAgICAgICAgICAgICAgc291cmNlOiBub2Rlc1sxXSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG5vZGVzWzBdLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0cnVlXG4gICAgICAgICAgICB9LCB7XG4gICAgICAgICAgICAgICAgc291cmNlOiBub2Rlc1swXSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG5vZGVzWzJdLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0cnVlXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGxOb2Rlcy5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgICAgIG5vZGVzID0gW2FsbE5vZGVzWzBdLCBhbGxOb2Rlc1sxXV07XG4gICAgICAgICAgICBsaW5rcyA9IFt7XG4gICAgICAgICAgICAgICAgc291cmNlOiBub2Rlc1sxXSxcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IG5vZGVzWzBdLFxuICAgICAgICAgICAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgIHJpZ2h0OiB0cnVlXG4gICAgICAgICAgICB9XTtcbiAgICAgICAgfSBlbHNlIGlmIChhbGxOb2Rlcy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgICAgIG5vZGVzID0gW2FsbE5vZGVzWzBdXTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGFsZXJ0KFwiVGhlcmUgYXJlIHplcm8gdmFyaWFibGVzIGluIHRoZSBtZXRhZGF0YS5cIik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwYW5lbFBsb3RzKCk7IC8vIGFmdGVyIG5vZGVzIGlzIHBvcHVsYXRlZCwgYWRkIHN1YnNldCBhbmQgc2V0eCBwYW5lbHNcblxuICAgIHZhciBmb3JjZSA9IGQzLmxheW91dC5mb3JjZSgpXG4gICAgICAgIC5ub2Rlcyhub2RlcylcbiAgICAgICAgLmxpbmtzKGxpbmtzKVxuICAgICAgICAuc2l6ZShbd2lkdGgsIGhlaWdodF0pXG4gICAgICAgIC5saW5rRGlzdGFuY2UoMTUwKVxuICAgICAgICAuY2hhcmdlKC04MDApXG4gICAgICAgIC5vbigndGljaycsIHRpY2spO1xuXG4gICAgLy8gZGVmaW5lIGFycm93IG1hcmtlcnMgZm9yIGdyYXBoIGxpbmtzXG4gICAgc3ZnLmFwcGVuZCgnc3ZnOmRlZnMnKS5hcHBlbmQoJ3N2ZzptYXJrZXInKVxuICAgICAgICAuYXR0cignaWQnLCAnZW5kLWFycm93JylcbiAgICAgICAgLmF0dHIoJ3ZpZXdCb3gnLCAnMCAtNSAxMCAxMCcpXG4gICAgICAgIC5hdHRyKCdyZWZYJywgNilcbiAgICAgICAgLmF0dHIoJ21hcmtlcldpZHRoJywgMylcbiAgICAgICAgLmF0dHIoJ21hcmtlckhlaWdodCcsIDMpXG4gICAgICAgIC5hdHRyKCdvcmllbnQnLCAnYXV0bycpXG4gICAgICAgIC5hcHBlbmQoJ3N2ZzpwYXRoJylcbiAgICAgICAgLmF0dHIoJ2QnLCAnTTAsLTVMMTAsMEwwLDUnKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnIzAwMCcpO1xuXG4gICAgc3ZnLmFwcGVuZCgnc3ZnOmRlZnMnKS5hcHBlbmQoJ3N2ZzptYXJrZXInKVxuICAgICAgICAuYXR0cignaWQnLCAnc3RhcnQtYXJyb3cnKVxuICAgICAgICAuYXR0cigndmlld0JveCcsICcwIC01IDEwIDEwJylcbiAgICAgICAgLmF0dHIoJ3JlZlgnLCA0KVxuICAgICAgICAuYXR0cignbWFya2VyV2lkdGgnLCAzKVxuICAgICAgICAuYXR0cignbWFya2VySGVpZ2h0JywgMylcbiAgICAgICAgLmF0dHIoJ29yaWVudCcsICdhdXRvJylcbiAgICAgICAgLmFwcGVuZCgnc3ZnOnBhdGgnKVxuICAgICAgICAuYXR0cignZCcsICdNMTAsLTVMMCwwTDEwLDUnKVxuICAgICAgICAuc3R5bGUoJ2ZpbGwnLCAnIzAwMCcpO1xuXG4gICAgLy8gbGluZSBkaXNwbGF5ZWQgd2hlbiBkcmFnZ2luZyBuZXcgbm9kZXNcbiAgICB2YXIgZHJhZ19saW5lID0gc3ZnLmFwcGVuZCgnc3ZnOnBhdGgnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnbGluayBkcmFnbGluZSBoaWRkZW4nKVxuICAgICAgICAuYXR0cignZCcsICdNMCwwTDAsMCcpO1xuXG4gICAgLy8gaGFuZGxlcyB0byBsaW5rIGFuZCBub2RlIGVsZW1lbnQgZ3JvdXBzXG4gICAgdmFyIHBhdGggPSBzdmcuYXBwZW5kKCdzdmc6ZycpLnNlbGVjdEFsbCgncGF0aCcpLFxuICAgICAgICBjaXJjbGUgPSBzdmcuYXBwZW5kKCdzdmc6ZycpLnNlbGVjdEFsbCgnZycpO1xuXG4gICAgLy8gbW91c2UgZXZlbnQgdmFyc1xuICAgIHZhciBzZWxlY3RlZF9ub2RlID0gbnVsbCxcbiAgICAgICAgc2VsZWN0ZWRfbGluayA9IG51bGwsXG4gICAgICAgIG1vdXNlZG93bl9saW5rID0gbnVsbCxcbiAgICAgICAgbW91c2Vkb3duX25vZGUgPSBudWxsLFxuICAgICAgICBtb3VzZXVwX25vZGUgPSBudWxsO1xuXG4gICAgZnVuY3Rpb24gcmVzZXRNb3VzZVZhcnMoKSB7XG4gICAgICAgIG1vdXNlZG93bl9ub2RlID0gbnVsbDtcbiAgICAgICAgbW91c2V1cF9ub2RlID0gbnVsbDtcbiAgICAgICAgbW91c2Vkb3duX2xpbmsgPSBudWxsO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBmb3JjZSBsYXlvdXQgKGNhbGxlZCBhdXRvbWF0aWNhbGx5IGVhY2ggaXRlcmF0aW9uKVxuICAgIGZ1bmN0aW9uIHRpY2soKSB7XG4gICAgICAgIC8vIGRyYXcgZGlyZWN0ZWQgZWRnZXMgd2l0aCBwcm9wZXIgcGFkZGluZyBmcm9tIG5vZGUgY2VudGVyc1xuICAgICAgICBwYXRoLmF0dHIoJ2QnLCBkID0+IHtcbiAgICAgICAgICAgIHZhciBkZWx0YVggPSBkLnRhcmdldC54IC0gZC5zb3VyY2UueCxcbiAgICAgICAgICAgICAgICBkZWx0YVkgPSBkLnRhcmdldC55IC0gZC5zb3VyY2UueSxcbiAgICAgICAgICAgICAgICBkaXN0ID0gTWF0aC5zcXJ0KGRlbHRhWCAqIGRlbHRhWCArIGRlbHRhWSAqIGRlbHRhWSksXG4gICAgICAgICAgICAgICAgbm9ybVggPSBkZWx0YVggLyBkaXN0LFxuICAgICAgICAgICAgICAgIG5vcm1ZID0gZGVsdGFZIC8gZGlzdCxcbiAgICAgICAgICAgICAgICBzb3VyY2VQYWRkaW5nID0gZC5sZWZ0ID8gYWxsUiArIDUgOiBhbGxSLFxuICAgICAgICAgICAgICAgIHRhcmdldFBhZGRpbmcgPSBkLnJpZ2h0ID8gYWxsUiArIDUgOiBhbGxSLFxuICAgICAgICAgICAgICAgIHNvdXJjZVggPSBkLnNvdXJjZS54ICsgKHNvdXJjZVBhZGRpbmcgKiBub3JtWCksXG4gICAgICAgICAgICAgICAgc291cmNlWSA9IGQuc291cmNlLnkgKyAoc291cmNlUGFkZGluZyAqIG5vcm1ZKSxcbiAgICAgICAgICAgICAgICB0YXJnZXRYID0gZC50YXJnZXQueCAtICh0YXJnZXRQYWRkaW5nICogbm9ybVgpLFxuICAgICAgICAgICAgICAgIHRhcmdldFkgPSBkLnRhcmdldC55IC0gKHRhcmdldFBhZGRpbmcgKiBub3JtWSk7XG4gICAgICAgICAgICByZXR1cm4gYE0ke3NvdXJjZVh9LCR7c291cmNlWX1MJHt0YXJnZXRYfSwke3RhcmdldFl9YDtcbiAgICAgICAgfSk7XG4gICAgICAgIGNpcmNsZS5hdHRyKCd0cmFuc2Zvcm0nLCBkID0+ICd0cmFuc2xhdGUoJyArIGQueCArICcsJyArIGQueSArICcpJyk7XG4gICAgfVxuXG4gICAgY2xpY2tWYXIgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gZXZlcnkgdGltZSBhIHZhcmlhYmxlIGluIGxlZnRwYW5lbCBpcyBjbGlja2VkLCBub2RlcyB1cGRhdGVzIGFuZCBiYWNrZ3JvdW5kIGNvbG9yIGNoYW5nZXNcbiAgICAgICAgaWYgKGZpbmROb2RlSW5kZXgodGhpcy5pZCwgdHJ1ZSkuZ3JheW91dClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgenBhcmFtcy56dmFycyA9IFtdO1xuICAgICAgICBsZXQgdGV4dCA9IGQzLnNlbGVjdCh0aGlzKS50ZXh0KCk7XG4gICAgICAgIGxldCBub2RlID0gZmluZE5vZGUodGV4dCk7XG4gICAgICAgIGlmIChub2Rlcy5tYXAobiA9PiBuLm5hbWUpLmluY2x1ZGVzKHRleHQpKSB7XG4gICAgICAgICAgICBub2Rlcy5zcGxpY2Uobm9kZS5pbmRleCwgMSk7XG4gICAgICAgICAgICBzcGxpY2VMaW5rc0Zvck5vZGUobm9kZSk7XG4gICAgICAgICAgICBzcGxpY2Uobm9kZS5zdHJva2VDb2xvciwgdGV4dCwgW2R2Q29sb3IsICd6ZHYnXSwgW2NzQ29sb3IsICd6Y3Jvc3MnXSwgW3RpbWVDb2xvciwgJ3p0aW1lJ10sIFtub21Db2xvciwgJ3pub20nXSk7XG4gICAgICAgICAgICBub2RlUmVzZXQobm9kZSk7XG4gICAgICAgICAgICBsZWdlbmQoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgICAgICAgICBpZiAobm9kZXMubGVuZ3RoID09PSAwKSBub2Rlc1swXS5yZWZsZXhpdmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHBhbmVsUGxvdHMoKTtcbiAgICAgICAgcmVzdGFydCgpO1xuICAgIH1cblxuICAgIGQzLnNlbGVjdChcIiNtb2RlbHNcIikuc2VsZWN0QWxsKFwicFwiKSAvLyBtb2RlbHMgdGFiXG4gICAgICAgIC8vICBkMy5zZWxlY3QoXCIjRGlzcGxheV9jb250ZW50XCIpXG4gICAgICAgIC5vbihcImNsaWNrXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgdmFyIG15Q29sb3IgPSBkMy5zZWxlY3QodGhpcykuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InKTtcbiAgICAgICAgICAgIGQzLnNlbGVjdChcIiNtb2RlbHNcIikuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIHZhckNvbG9yKTtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgIC5zdHlsZSgnYmFja2dyb3VuZC1jb2xvcicsIGQgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZDMucmdiKG15Q29sb3IpLnRvU3RyaW5nKCkgPT09IHZhckNvbG9yLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHpwYXJhbXMuem1vZGVsID0gZC50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhleFRvUmdiYShzZWxWYXJDb2xvcik7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB6cGFyYW1zLnptb2RlbCA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhckNvbG9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN0YXJ0KCk7XG4gICAgICAgIH0pO1xuXG4gICAgLy8gdXBkYXRlIGdyYXBoIChjYWxsZWQgd2hlbiBuZWVkZWQpXG4gICAgZnVuY3Rpb24gcmVzdGFydCgpIHtcbiAgICAgICAgLy8gbm9kZXMuaWQgaXMgcGVnZ2VkIHRvIGFsbE5vZGVzLCBpLmUuIHRoZSBvcmRlciBpbiB3aGljaCB2YXJpYWJsZXMgYXJlIHJlYWQgaW5cbiAgICAgICAgLy8gbm9kZXMuaW5kZXggaXMgZmxvYXRpbmcgYW5kIGRlcGVuZHMgb24gdXBkYXRlcyB0byBub2Rlcy4gIGEgdmFyaWFibGVzIGluZGV4IGNoYW5nZXMgd2hlbiBuZXcgdmFyaWFibGVzIGFyZSBhZGRlZC5cbiAgICAgICAgY2lyY2xlLmNhbGwoZm9yY2UuZHJhZyk7XG4gICAgICAgIGlmIChmb3JjZXRvZ2dsZVswXSA9PSBcInRydWVcIikge1xuICAgICAgICAgICAgZm9yY2UuZ3Jhdml0eSgwLjEpO1xuICAgICAgICAgICAgZm9yY2UuY2hhcmdlKC04MDApO1xuICAgICAgICAgICAgZm9yY2UubGlua1N0cmVuZ3RoKDEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9yY2UuZ3Jhdml0eSgwKTtcbiAgICAgICAgICAgIGZvcmNlLmNoYXJnZSgwKTtcbiAgICAgICAgICAgIGZvcmNlLmxpbmtTdHJlbmd0aCgwKTtcbiAgICAgICAgfVxuICAgICAgICBmb3JjZS5yZXN1bWUoKTtcblxuICAgICAgICAvLyBwYXRoIChsaW5rKSBncm91cFxuICAgICAgICBwYXRoID0gcGF0aC5kYXRhKGxpbmtzKTtcblxuICAgICAgICAvLyB1cGRhdGUgZXhpc3RpbmcgbGlua3NcbiAgICAgICAgLy8gVkpEOiBkYXNoZWQgbGlua3MgYmV0d2VlbiBwZWJibGVzIGFyZSBcInNlbGVjdGVkXCIuIHRoaXMgaXMgZGlzYWJsZWQgZm9yIG5vd1xuICAgICAgICBwYXRoLmNsYXNzZWQoJ3NlbGVjdGVkJywgeCA9PiBudWxsKVxuICAgICAgICAgICAgLnN0eWxlKCdtYXJrZXItc3RhcnQnLCB4ID0+IHgubGVmdCA/ICd1cmwoI3N0YXJ0LWFycm93KScgOiAnJylcbiAgICAgICAgICAgIC5zdHlsZSgnbWFya2VyLWVuZCcsIHggPT4geC5yaWdodCA/ICd1cmwoI2VuZC1hcnJvdyknIDogJycpO1xuXG4gICAgICAgIC8vIGFkZCBuZXcgbGlua3NcbiAgICAgICAgcGF0aC5lbnRlcigpLmFwcGVuZCgnc3ZnOnBhdGgnKVxuICAgICAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2xpbmsnKVxuICAgICAgICAgICAgLmNsYXNzZWQoJ3NlbGVjdGVkJywgeCA9PiBudWxsKVxuICAgICAgICAgICAgLnN0eWxlKCdtYXJrZXItc3RhcnQnLCB4ID0+IHgubGVmdCA/ICd1cmwoI3N0YXJ0LWFycm93KScgOiAnJylcbiAgICAgICAgICAgIC5zdHlsZSgnbWFya2VyLWVuZCcsIHggPT4geC5yaWdodCA/ICd1cmwoI2VuZC1hcnJvdyknIDogJycpXG4gICAgICAgICAgICAub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKGQpIHsgLy8gZG8gd2UgZXZlciBuZWVkIHRvIHNlbGVjdCBhIGxpbms/IG1ha2UgaXQgZGVsZXRlLi5cbiAgICAgICAgICAgICAgICB2YXIgb2JqID0gSlNPTi5zdHJpbmdpZnkoZCk7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBsaW5rcy5sZW5ndGg7IGorKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAob2JqID09PSBKU09OLnN0cmluZ2lmeShsaW5rc1tqXSkpXG4gICAgICAgICAgICAgICAgICAgICAgICBsaW5rcy5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gcmVtb3ZlIG9sZCBsaW5rc1xuICAgICAgICBwYXRoLmV4aXQoKS5yZW1vdmUoKTtcblxuICAgICAgICAvLyBjaXJjbGUgKG5vZGUpIGdyb3VwXG4gICAgICAgIGNpcmNsZSA9IGNpcmNsZS5kYXRhKG5vZGVzLCB4ID0+IHguaWQpO1xuXG4gICAgICAgIC8vIHVwZGF0ZSBleGlzdGluZyBub2RlcyAocmVmbGV4aXZlICYgc2VsZWN0ZWQgdmlzdWFsIHN0YXRlcylcbiAgICAgICAgLy8gZDMucmdiIGlzIHRoZSBmdW5jdGlvbiBhZGp1c3RpbmcgdGhlIGNvbG9yIGhlcmVcbiAgICAgICAgY2lyY2xlLnNlbGVjdEFsbCgnY2lyY2xlJylcbiAgICAgICAgICAgIC5jbGFzc2VkKCdyZWZsZXhpdmUnLCB4ID0+IHgucmVmbGV4aXZlKVxuICAgICAgICAgICAgLnN0eWxlKCdmaWxsJywgeCA9PiBkMy5yZ2IoeC5ub2RlQ29sKSlcbiAgICAgICAgICAgIC5zdHlsZSgnc3Ryb2tlJywgeCA9PiBkMy5yZ2IoeC5zdHJva2VDb2xvcikpXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZS13aWR0aCcsIHggPT4geC5zdHJva2VXaWR0aCk7XG5cbiAgICAgICAgLy8gYWRkIG5ldyBub2Rlc1xuICAgICAgICBsZXQgZyA9IGNpcmNsZS5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKCdzdmc6ZycpXG4gICAgICAgICAgICAuYXR0cignaWQnLCB4ID0+IHgubmFtZSArICdiaWdncm91cCcpO1xuXG4gICAgICAgIC8vIGFkZCBwbG90XG4gICAgICAgIGcuZWFjaChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcyk7XG4gICAgICAgICAgICBpZiAoZC5wbG90dHlwZSA9PSAnY29udGludW91cycpIGRlbnNpdHlOb2RlKGQsIHRoaXMpO1xuICAgICAgICAgICAgZWxzZSBpZiAoZC5wbG90dHlwZSA9PSAnYmFyJykgYmFyc05vZGUoZCwgdGhpcyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBhcHBlbmQgPSAoc3RyLCBhdHRyKSA9PiB4ID0+IHN0ciArIHhbYXR0ciB8fCAnaWQnXTtcblxuICAgICAgICBnLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgYXBwZW5kKCdkdkFyYycpKVxuICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGFyYzMpXG4gICAgICAgICAgICAuc3R5bGUoXCJmaWxsXCIsIGR2Q29sb3IpXG4gICAgICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwKVxuICAgICAgICAgICAgLm9uKCdtb3VzZW92ZXInLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgZmlsbFRoaXModGhpcywgLjMsIDAsIDEwMCk7XG4gICAgICAgICAgICAgICAgZmlsbChkLCAnZHZUZXh0JywgLjksIDAsIDEwMCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBmaWxsVGhpcyh0aGlzLCAwLCAxMDAsIDUwMCk7XG4gICAgICAgICAgICAgICAgZmlsbChkLCAnZHZUZXh0JywgMCwgMTAwLCA1MDApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5vbignY2xpY2snLCBkID0+IHtcbiAgICAgICAgICAgICAgICBzZXRDb2xvcnMoZCwgZHZDb2xvcik7XG4gICAgICAgICAgICAgICAgbGVnZW5kKGR2Q29sb3IpO1xuICAgICAgICAgICAgICAgIHJlc3RhcnQoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIGcuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgLmF0dHIoXCJpZFwiLCBhcHBlbmQoJ2R2VGV4dCcpKVxuICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIDYpXG4gICAgICAgICAgICAuYXR0cihcImR5XCIsIDExLjUpXG4gICAgICAgICAgICAuYXR0cihcImZpbGwtb3BhY2l0eVwiLCAwKVxuICAgICAgICAgICAgLmFwcGVuZChcInRleHRQYXRoXCIpXG4gICAgICAgICAgICAuYXR0cihcInhsaW5rOmhyZWZcIiwgYXBwZW5kKCcjZHZBcmMnKSlcbiAgICAgICAgICAgIC50ZXh0KFwiRGVwIFZhclwiKTtcblxuICAgICAgICBnLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgIC5hdHRyKFwiaWRcIiwgYXBwZW5kKCdub21BcmMnKSlcbiAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBhcmM0KVxuICAgICAgICAgICAgLnN0eWxlKFwiZmlsbFwiLCBub21Db2xvcilcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDApXG4gICAgICAgICAgICAub24oJ21vdXNlb3ZlcicsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZC5kZWZhdWx0TnVtY2hhciA9PSBcImNoYXJhY3RlclwiKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZmlsbFRoaXModGhpcywgLjMsIDAsIDEwMCk7XG4gICAgICAgICAgICAgICAgZmlsbChkLCBcIm5vbVRleHRcIiwgLjksIDAsIDEwMCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICBpZiAoZC5kZWZhdWx0TnVtY2hhciA9PSBcImNoYXJhY3RlclwiKSByZXR1cm47XG4gICAgICAgICAgICAgICAgZmlsbFRoaXModGhpcywgMCwgMTAwLCA1MDApO1xuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJub21UZXh0XCIsIDAsIDEwMCwgNTAwKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2NsaWNrJywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIGlmIChkLmRlZmF1bHROdW1jaGFyID09IFwiY2hhcmFjdGVyXCIpIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZXRDb2xvcnMoZCwgbm9tQ29sb3IpO1xuICAgICAgICAgICAgICAgIGxlZ2VuZChub21Db2xvcik7XG4gICAgICAgICAgICAgICAgcmVzdGFydCgpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgZy5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIGFwcGVuZChcIm5vbVRleHRcIikpXG4gICAgICAgICAgICAuYXR0cihcInhcIiwgNilcbiAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgMTEuNSlcbiAgICAgICAgICAgIC5hdHRyKFwiZmlsbC1vcGFjaXR5XCIsIDApXG4gICAgICAgICAgICAuYXBwZW5kKFwidGV4dFBhdGhcIilcbiAgICAgICAgICAgIC5hdHRyKFwieGxpbms6aHJlZlwiLCBhcHBlbmQoXCIjbm9tQXJjXCIpKVxuICAgICAgICAgICAgLnRleHQoXCJOb21pbmFsXCIpO1xuXG4gICAgICAgIGcuYXBwZW5kKCdzdmc6Y2lyY2xlJylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdub2RlJylcbiAgICAgICAgICAgIC5hdHRyKCdyJywgYWxsUilcbiAgICAgICAgICAgIC5zdHlsZSgncG9pbnRlci1ldmVudHMnLCAnaW5oZXJpdCcpXG4gICAgICAgICAgICAuc3R5bGUoJ2ZpbGwnLCBkID0+IGQubm9kZUNvbClcbiAgICAgICAgICAgIC5zdHlsZSgnb3BhY2l0eScsIFwiMC41XCIpXG4gICAgICAgICAgICAuc3R5bGUoJ3N0cm9rZScsIGQgPT4gZDMucmdiKGQuc3Ryb2tlQ29sb3IpLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAuY2xhc3NlZCgncmVmbGV4aXZlJywgZCA9PiBkLnJlZmxleGl2ZSlcbiAgICAgICAgICAgIC5vbignZGJsY2xpY2snLCBmdW5jdGlvbihfKSB7XG4gICAgICAgICAgICAgICAgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7IC8vIHN0b3AgY2xpY2sgZnJvbSBidWJibGluZ1xuICAgICAgICAgICAgICAgIHN1bW1hcnlIb2xkID0gdHJ1ZTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ2NvbnRleHRtZW51JywgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgIC8vIHJpZ2h0IGNsaWNrIG9uIG5vZGVcbiAgICAgICAgICAgICAgICBkMy5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgICAgICAgIGQzLmV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICAgICAgcmlnaHRDbGlja0xhc3QgPSB0cnVlO1xuICAgICAgICAgICAgICAgIG1vdXNlZG93bl9ub2RlID0gZDtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZF9ub2RlID0gbW91c2Vkb3duX25vZGUgPT09IHNlbGVjdGVkX25vZGUgPyBudWxsIDogbW91c2Vkb3duX25vZGU7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWRfbGluayA9IG51bGw7XG5cbiAgICAgICAgICAgICAgICAvLyByZXBvc2l0aW9uIGRyYWcgbGluZVxuICAgICAgICAgICAgICAgIGRyYWdfbGluZVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ21hcmtlci1lbmQnLCAndXJsKCNlbmQtYXJyb3cpJylcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZGRlbicsIGZhbHNlKVxuICAgICAgICAgICAgICAgICAgICAuYXR0cignZCcsICdNJyArIG1vdXNlZG93bl9ub2RlLnggKyAnLCcgKyBtb3VzZWRvd25fbm9kZS55ICsgJ0wnICsgbW91c2Vkb3duX25vZGUueCArICcsJyArIG1vdXNlZG93bl9ub2RlLnkpO1xuXG4gICAgICAgICAgICAgICAgc3ZnLm9uKCdtb3VzZW1vdmUnLCBtb3VzZW1vdmUpO1xuICAgICAgICAgICAgICAgIHJlc3RhcnQoKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAub24oJ21vdXNldXAnLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgZDMuZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmlnaHRDbGlja0xhc3QpIHtcbiAgICAgICAgICAgICAgICAgICAgcmlnaHRDbGlja0xhc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIW1vdXNlZG93bl9ub2RlKSByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAvLyBuZWVkZWQgYnkgRkZcbiAgICAgICAgICAgICAgICBkcmFnX2xpbmVcbiAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoJ2hpZGRlbicsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIC5zdHlsZSgnbWFya2VyLWVuZCcsICcnKTtcblxuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGZvciBkcmFnLXRvLXNlbGZcbiAgICAgICAgICAgICAgICBtb3VzZXVwX25vZGUgPSBkO1xuICAgICAgICAgICAgICAgIGlmIChtb3VzZXVwX25vZGUgPT09IG1vdXNlZG93bl9ub2RlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TW91c2VWYXJzKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyB1bmVubGFyZ2UgdGFyZ2V0IG5vZGVcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXR0cigndHJhbnNmb3JtJywgJycpO1xuXG4gICAgICAgICAgICAgICAgLy8gYWRkIGxpbmsgdG8gZ3JhcGggKHVwZGF0ZSBpZiBleGlzdHMpXG4gICAgICAgICAgICAgICAgLy8gTkI6IGxpbmtzIGFyZSBzdHJpY3RseSBzb3VyY2UgPCB0YXJnZXQ7IGFycm93cyBzZXBhcmF0ZWx5IHNwZWNpZmllZCBieSBib29sZWFuc1xuICAgICAgICAgICAgICAgIHZhciBzb3VyY2UsIHRhcmdldCwgZGlyZWN0aW9uO1xuICAgICAgICAgICAgICAgIGlmIChtb3VzZWRvd25fbm9kZS5pZCA8IG1vdXNldXBfbm9kZS5pZCkge1xuICAgICAgICAgICAgICAgICAgICBzb3VyY2UgPSBtb3VzZWRvd25fbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gbW91c2V1cF9ub2RlO1xuICAgICAgICAgICAgICAgICAgICBkaXJlY3Rpb24gPSAncmlnaHQnO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHNvdXJjZSA9IG1vdXNldXBfbm9kZTtcbiAgICAgICAgICAgICAgICAgICAgdGFyZ2V0ID0gbW91c2Vkb3duX25vZGU7XG4gICAgICAgICAgICAgICAgICAgIGRpcmVjdGlvbiA9ICdsZWZ0JztcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBsZXQgbGluayA9IGxpbmtzLmZpbHRlcih4ID0+IHguc291cmNlID09IHNvdXJjZSAmJiB4LnRhcmdldCA9PSB0YXJnZXQpWzBdO1xuICAgICAgICAgICAgICAgIGlmIChsaW5rKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmtbZGlyZWN0aW9uXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGluayA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZTogc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFyZ2V0OiB0YXJnZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICBsZWZ0OiBmYWxzZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJpZ2h0OiBmYWxzZVxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICBsaW5rW2RpcmVjdGlvbl0gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBsaW5rcy5wdXNoKGxpbmspO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIHNlbGVjdCBuZXcgbGlua1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkX2xpbmsgPSBsaW5rO1xuICAgICAgICAgICAgICAgIHNlbGVjdGVkX25vZGUgPSBudWxsO1xuICAgICAgICAgICAgICAgIHN2Zy5vbignbW91c2Vtb3ZlJywgbnVsbCk7XG5cbiAgICAgICAgICAgICAgICByZXNldE1vdXNlVmFycygpO1xuICAgICAgICAgICAgICAgIHJlc3RhcnQoKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHNob3cgbm9kZSBuYW1lc1xuICAgICAgICBnLmFwcGVuZCgnc3ZnOnRleHQnKVxuICAgICAgICAgICAgLmF0dHIoJ3gnLCAwKVxuICAgICAgICAgICAgLmF0dHIoJ3knLCAxNSlcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdpZCcpXG4gICAgICAgICAgICAudGV4dChkID0+IGQubmFtZSk7XG5cbiAgICAgICAgLy8gc2hvdyBzdW1tYXJ5IHN0YXRzIG9uIG1vdXNlb3ZlclxuICAgICAgICAvLyBTVkcgZG9lc24ndCBzdXBwb3J0IHRleHQgd3JhcHBpbmcsIHVzZSBodG1sIGluc3RlYWRcbiAgICAgICAgZy5zZWxlY3RBbGwoXCJjaXJjbGUubm9kZVwiKVxuICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIGQgPT4ge1xuICAgICAgICAgICAgICAgIHRhYkxlZnQoJ3RhYjMnKTtcbiAgICAgICAgICAgICAgICB2YXJTdW1tYXJ5KGQpO1xuXG4gICAgICAgICAgICAgICAgYnlJZCgndHJhbnNmb3JtYXRpb25zJykuc2V0QXR0cmlidXRlKCdzdHlsZScsICdkaXNwbGF5OmJsb2NrJyk7XG4gICAgICAgICAgICAgICAgYnlJZChcInRyYW5zU2VsXCIpLnNlbGVjdGVkSW5kZXggPSBkLmlkO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybVZhciA9IHZhbHVlS2V5W2QuaWRdO1xuXG4gICAgICAgICAgICAgICAgZmlsbChkLCBcImR2QXJjXCIsIC4xLCAwLCAxMDApO1xuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJkdlRleHRcIiwgLjUsIDAsIDEwMCk7XG4gICAgICAgICAgICAgICAgaWYgKGQuZGVmYXVsdE51bWNoYXIgPT0gXCJudW1lcmljXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgZmlsbChkLCBcIm5vbUFyY1wiLCAuMSwgMCwgMTAwKTtcbiAgICAgICAgICAgICAgICAgICAgZmlsbChkLCBcIm5vbVRleHRcIiwgLjUsIDAsIDEwMCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJjc0FyY1wiLCAuMSwgMCwgMTAwKTtcbiAgICAgICAgICAgICAgICBmaWxsKGQsIFwiY3NUZXh0XCIsIC41LCAwLCAxMDApO1xuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJ0aW1lQXJjXCIsIC4xLCAwLCAxMDApO1xuICAgICAgICAgICAgICAgIGZpbGwoZCwgXCJ0aW1lVGV4dFwiLCAuNSwgMCwgMTAwKTtcblxuICAgICAgICAgICAgICAgIG0ucmVkcmF3KCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLm9uKCdtb3VzZW91dCcsIGQgPT4ge1xuICAgICAgICAgICAgICAgIHN1bW1hcnlIb2xkIHx8IHRhYkxlZnQoc3Vic2V0ID8gJ3RhYjInIDogJ3RhYjEnKTtcbiAgICAgICAgICAgICAgICAnY3NBcmMgY3NUZXh0IHRpbWVBcmMgdGltZVRleHQgZHZBcmMgZHZUZXh0IG5vbUFyYyBub21UZXh0Jy5zcGxpdCgnICcpLm1hcCh4ID0+IGZpbGwoZCwgeCwgMCwgMTAwLCA1MDApKTtcbiAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gdGhlIHRyYW5zZm9ybWF0aW9uIHZhcmlhYmxlIGxpc3QgaXMgc2lsZW50bHkgdXBkYXRlZCBhcyBwZWJibGVzIGFyZSBhZGRlZC9yZW1vdmVkXG4gICAgICAgIGQzLnNlbGVjdChcIiN0cmFuc1NlbFwiKVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgnbGknKVxuICAgICAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgICAgIGQzLnNlbGVjdChcIiN0cmFuc1NlbFwiKVxuICAgICAgICAgICAgLnNlbGVjdEFsbCgnbGknKVxuICAgICAgICAgICAgLmRhdGEobm9kZXMubWFwKHggPT4geC5uYW1lKSkgLy8gc2V0IHRvIHZhcmlhYmxlcyBpbiBtb2RlbCBzcGFjZSBhcyB0aGV5J3JlIGFkZGVkXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImxpXCIpXG4gICAgICAgICAgICAudGV4dChkID0+IGQpO1xuXG4gICAgICAgICQoJyN0cmFuc1NlbCBsaScpLmNsaWNrKGZ1bmN0aW9uKGV2dCkge1xuICAgICAgICAgICAgLy8gaWYgJ2ludGVyYWN0aW9uJyBpcyB0aGUgc2VsZWN0ZWQgZnVuY3Rpb24sIGRvbid0IHNob3cgdGhlIGZ1bmN0aW9uIGxpc3QgYWdhaW5cbiAgICAgICAgICAgIGlmIChzZWxJbnRlcmFjdCkge1xuICAgICAgICAgICAgICAgIHZhciBuID0gJCgnI3RJbnB1dCcpLnZhbCgpLmNvbmNhdCgkKHRoaXMpLnRleHQoKSk7XG4gICAgICAgICAgICAgICAgJCgnI3RJbnB1dCcpLnZhbChuKTtcbiAgICAgICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgICAgICAgdmFyIHQgPSB0cmFuc1BhcnNlKG4gPSBuKTtcbiAgICAgICAgICAgICAgICBpZiAoIXQpIHJldHVybjtcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLmZhZGVPdXQoMTAwKTtcbiAgICAgICAgICAgICAgICB0cmFuc2Zvcm0obiA9IHQuc2xpY2UoMCwgdC5sZW5ndGggLSAxKSwgdCA9IHRbdC5sZW5ndGggLSAxXSwgdHlwZVRyYW5zZm9ybSA9IGZhbHNlKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICQoJyN0SW5wdXQnKS52YWwoJCh0aGlzKS50ZXh0KCkpO1xuICAgICAgICAgICAgJCh0aGlzKS5wYXJlbnQoKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgICAgICAkKCcjdHJhbnNMaXN0JykuZmFkZUluKDEwMCk7XG4gICAgICAgICAgICBldnQuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHJlbW92ZSBvbGQgbm9kZXNcbiAgICAgICAgY2lyY2xlLmV4aXQoKS5yZW1vdmUoKTtcbiAgICAgICAgZm9yY2Uuc3RhcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZWRvd24oZCkge1xuICAgICAgICAvLyBwcmV2ZW50IEktYmFyIG9uIGRyYWdcbiAgICAgICAgZDMuZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgLy8gYmVjYXVzZSA6YWN0aXZlIG9ubHkgd29ya3MgaW4gV2ViS2l0P1xuICAgICAgICBzdmcuY2xhc3NlZCgnYWN0aXZlJywgdHJ1ZSk7XG4gICAgICAgIGlmIChkMy5ldmVudC5jdHJsS2V5IHx8IG1vdXNlZG93bl9ub2RlIHx8IG1vdXNlZG93bl9saW5rKSByZXR1cm47XG4gICAgICAgIHJlc3RhcnQoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZW1vdmUoZCkge1xuICAgICAgICBpZiAoIW1vdXNlZG93bl9ub2RlKVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAvLyB1cGRhdGUgZHJhZyBsaW5lXG4gICAgICAgIGRyYWdfbGluZS5hdHRyKCdkJywgJ00nICsgbW91c2Vkb3duX25vZGUueCArICcsJyArIG1vdXNlZG93bl9ub2RlLnkgKyAnTCcgKyBkMy5tb3VzZSh0aGlzKVswXSArICcsJyArIGQzLm1vdXNlKHRoaXMpWzFdKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb3VzZXVwKGQpIHtcbiAgICAgICAgaWYgKG1vdXNlZG93bl9ub2RlKSB7XG4gICAgICAgICAgICBkcmFnX2xpbmVcbiAgICAgICAgICAgICAgICAuY2xhc3NlZCgnaGlkZGVuJywgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuc3R5bGUoJ21hcmtlci1lbmQnLCAnJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gYmVjYXVzZSA6YWN0aXZlIG9ubHkgd29ya3MgaW4gV2ViS2l0P1xuICAgICAgICBzdmcuY2xhc3NlZCgnYWN0aXZlJywgZmFsc2UpO1xuICAgICAgICAvLyBjbGVhciBtb3VzZSBldmVudCB2YXJzXG4gICAgICAgIHJlc2V0TW91c2VWYXJzKCk7XG4gICAgfVxuXG4gICAgLy8gYXBwIHN0YXJ0cyBoZXJlXG4gICAgc3ZnLmF0dHIoJ2lkJywgKCkgPT4gXCJ3aGl0ZXNwYWNlXCIuY29uY2F0KG15c3BhY2UpKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgaGVpZ2h0KVxuICAgICAgICAub24oJ21vdXNlZG93bicsIGZ1bmN0aW9uKCkge21vdXNlZG93bih0aGlzKTt9KVxuICAgICAgICAub24oJ21vdXNldXAnLCBmdW5jdGlvbigpIHttb3VzZXVwKHRoaXMpO30pO1xuXG4gICAgZDMuc2VsZWN0KHdpbmRvdylcbiAgICAgICAgLm9uKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgICAgIC8vIGFsbCBjbGlja3Mgd2lsbCBidWJibGUgaGVyZSB1bmxlc3MgZXZlbnQuc3RvcFByb3BhZ2F0aW9uKClcbiAgICAgICAgICAgICQoJyN0cmFuc0xpc3QnKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgICAgICAkKCcjdHJhbnNTZWwnKS5mYWRlT3V0KDEwMCk7XG4gICAgICAgIH0pO1xuXG4gICAgcmVzdGFydCgpOyAvLyBpbml0aWFsaXplcyBmb3JjZS5sYXlvdXQoKVxuICAgIGZha2VDbGljaygpO1xufVxuXG5cbmxldCBmaW5kID0gKCRub2RlcywgbmFtZSkgPT4ge1xuICAgIGZvciAobGV0IGkgaW4gJG5vZGVzKVxuICAgICAgICBpZiAoJG5vZGVzW2ldLm5hbWUgPT0gbmFtZSkgcmV0dXJuICRub2Rlc1tpXS5pZDtcbn07XG5cbi8vIHJldHVybnMgaWRcbmV4cG9ydCBsZXQgZmluZE5vZGVJbmRleCA9IChuYW1lLCBhbGwpID0+IHtcbiAgICBmb3IgKGxldCBub2RlIG9mIGFsbE5vZGVzKSB7XG4gICAgICAgIGlmIChub2RlLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICAgIC8vY2RiKCdZZXMhJyArIGFsbE5vZGVzW2ldLmlkKTtcbiAgICAgICAgICAgIHJldHVybiBhbGw/IG5vZGUgOiBub2RlLmlkO1xuICAgICAgICB9XG4gICAgfVxufTtcblxubGV0IG5vZGVJbmRleCA9IG5vZGVOYW1lID0+IHtcbiAgICBmb3IgKGxldCBpIGluIG5vZGVzKVxuICAgICAgICBpZiAobm9kZXNbaV0ubmFtZSA9PSBub2RlTmFtZSkgcmV0dXJuIGk7XG59O1xuXG5leHBvcnQgbGV0IGZpbmROb2RlID0gbm9kZU5hbWUgPT4ge1xuICAgIGZvciAobGV0IGkgaW4gYWxsTm9kZXMpXG4gICAgICAgIGlmIChhbGxOb2Rlc1tpXS5uYW1lID09IG5vZGVOYW1lKSByZXR1cm4gYWxsTm9kZXNbaV07XG59O1xuXG4vKlxuICAgIFJldHJpZXZlIHRoZSB2YXJpYWJsZSBsaXN0IGZyb20gdGhlIHByZXByb2Nlc3MgZGF0YS5cbiAgICBUaGlzIGhlbHBzIGhhbmRsZSB0aGUgbmV3IGZvcm1hdCBhbmQgKHRlbXBvcmFyaWx5KVxuICAgIHRoZSBvbGRlciBmb3JtYXQgaW4gcHJvZHVjdGlvbiAocnAgOC4xNC4yMDE3KVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VmFyaWFibGVEYXRhKGpzb25EYXRhKXtcbiAgICAvKiBcIm5ld1wiIHJlc3BvbnNlOlxuICAgIHtcbiAgICAgICAgXCJkYXRhc2V0XCIgOiB7Li4ufVxuICAgICAgICBcInZhcmlhYmxlc1wiIDoge1xuICAgICAgICAgICAgXCJ2YXIxXCIgOiB7Li4ufSwgKGV0YylcbiAgICAgICAgfVxuICAgIH1cbiAgICBcIm9sZFwiIHJlc3BvbnNlXG4gICAge1xuICAgICAgICAgXCJ2YXIxXCIgOiB7Li4ufSxcbiAgICAgICAgIChldGMpXG4gICAgfSovXG4gICAgcmV0dXJuIGpzb25EYXRhLmhhc093blByb3BlcnR5KCd2YXJpYWJsZXMnKSA/IGpzb25EYXRhLnZhcmlhYmxlcyA6IGpzb25EYXRhO1xufVxuXG4vLyBmdW5jdGlvbiBjYWxsZWQgYnkgZm9yY2UgYnV0dG9uXG5leHBvcnQgZnVuY3Rpb24gZm9yY2VTd2l0Y2goKSB7XG4gICAgZm9yY2V0b2dnbGUgPSBbZm9yY2V0b2dnbGVbMF0gPT0gJ3RydWUnID8gJ2ZhbHNlJyA6ICd0cnVlJ107XG4gICAgaWYgKGZvcmNldG9nZ2xlWzBdID09PSBcImZhbHNlXCIpIHtcbiAgICAgICAgYnlJZCgnYnRuRm9yY2UnKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImJ0biBhY3RpdmVcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYnlJZCgnYnRuRm9yY2UnKS5zZXRBdHRyaWJ1dGUoXCJjbGFzc1wiLCBcImJ0biBidG4tZGVmYXVsdFwiKTtcbiAgICAgICAgZmFrZUNsaWNrKCk7XG4gICAgfVxufVxuXG5leHBvcnQgbGV0IHNwbGljZUxpbmtzRm9yTm9kZSA9IG5vZGUgPT4gbGlua3NcbiAgICAuZmlsdGVyKGwgPT4gbC5zb3VyY2UgPT09IG5vZGUgfHwgbC50YXJnZXQgPT09IG5vZGUpXG4gICAgLm1hcCh4ID0+IGxpbmtzLnNwbGljZShsaW5rcy5pbmRleE9mKHgpLCAxKSk7XG5cbmZ1bmN0aW9uIHpQb3AoKSB7XG4gICAgaWYgKGRhdGF1cmwpIHpwYXJhbXMuemRhdGF1cmwgPSBkYXRhdXJsO1xuICAgIHpwYXJhbXMuem1vZGVsY291bnQgPSBtb2RlbENvdW50O1xuICAgIHpwYXJhbXMuemVkZ2VzID0gW107XG4gICAgenBhcmFtcy56dmFycyA9IFtdO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbm9kZXMubGVuZ3RoOyBqKyspIHsgLy9wb3B1bGF0ZSB6dmFycyBhcnJheVxuICAgICAgICB6cGFyYW1zLnp2YXJzLnB1c2gobm9kZXNbal0ubmFtZSk7XG4gICAgICAgIGxldCB0ZW1wID0gbm9kZXNbal0uaWQ7XG4gICAgICAgIHpwYXJhbXMuenNldHhbal0gPSBhbGxOb2Rlc1t0ZW1wXS5zZXR4dmFscztcbiAgICAgICAgenBhcmFtcy56c3Vic2V0W2pdID0gYWxsTm9kZXNbdGVtcF0uc3Vic2V0cmFuZ2U7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGlua3MubGVuZ3RoOyBqKyspIHsgLy9wb3B1bGF0ZSB6ZWRnZXMgYXJyYXlcbiAgICAgICAgLy9jb3JyZWN0IHRoZSBzb3VyY2UgdGFyZ2V0IG9yZGVyaW5nIGZvciBaZWxpZ1xuICAgICAgICBsZXQgc3JjdGd0ID0gbGlua3Nbal0ubGVmdCA9PSBmYWxzZSA/XG4gICAgICAgICAgICBbbGlua3Nbal0uc291cmNlLm5hbWUsIGxpbmtzW2pdLnRhcmdldC5uYW1lXSA6XG4gICAgICAgICAgICBbbGlua3Nbal0udGFyZ2V0Lm5hbWUsIGxpbmtzW2pdLnNvdXJjZS5uYW1lXTtcbiAgICAgICAgenBhcmFtcy56ZWRnZXMucHVzaChzcmN0Z3QpO1xuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVzdGltYXRlKGJ0bikge1xuICAgIGlmIChwcm9kdWN0aW9uICYmIHpwYXJhbXMuenNlc3Npb25pZCA9PSAnJykge1xuICAgICAgICBhbGVydChcIldhcm5pbmc6IERhdGEgZG93bmxvYWQgaXMgbm90IGNvbXBsZXRlLiBUcnkgYWdhaW4gc29vbi5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB6UG9wKCk7XG4gICAgLy8gd3JpdGUgbGlua3MgdG8gZmlsZSAmIHJ1biBSIENNRFxuICAgIC8vIHBhY2thZ2UgdGhlIG91dHB1dCBhcyBKU09OXG4gICAgLy8gYWRkIGNhbGwgaGlzdG9yeSBhbmQgcGFja2FnZSB0aGUgenBhcmFtcyBvYmplY3QgYXMgSlNPTlxuICAgIHpwYXJhbXMuY2FsbEhpc3RvcnkgPSBjYWxsSGlzdG9yeTtcbiAgICB2YXIganNvbm91dCA9IEpTT04uc3RyaW5naWZ5KHpwYXJhbXMpO1xuXG4gICAgdmFyIHVybGNhbGwgPSByYXBwVVJMICsgXCJ6ZWxpZ2FwcFwiOyAvL2Jhc2UuY29uY2F0KGpzb25vdXQpO1xuICAgIHZhciBzb2xhanNvbm91dCA9IFwic29sYUpTT049XCIgKyBqc29ub3V0O1xuICAgIGNkYihcInVybGNhbGwgb3V0OiBcIiwgdXJsY2FsbCk7XG4gICAgY2RiKFwiUE9TVCBvdXQ6IFwiLCBzb2xhanNvbm91dCk7XG5cbiAgICB6cGFyYW1zLmFsbFZhcnMgPSB2YWx1ZUtleS5zbGljZSgxMCwgMjUpOyAvLyBiZWNhdXNlIHRoZSBVUkwgaXMgdG9vIGxvbmcuLi5cbiAgICBqc29ub3V0ID0gSlNPTi5zdHJpbmdpZnkoenBhcmFtcyk7XG4gICAgdmFyIHNlbGVjdG9ydXJsY2FsbCA9IHJhcHBVUkwgKyBcInNlbGVjdG9yYXBwXCI7XG5cbiAgICBmdW5jdGlvbiBlc3RpbWF0ZVN1Y2Nlc3MoYnRuLCBqc29uKSB7XG4gICAgICAgIGVzdGltYXRlTGFkZGEuc3RvcCgpOyAvLyBzdG9wIHNwaW5uZXJcbiAgICAgICAgYWxsUmVzdWx0cy5wdXNoKGpzb24pO1xuICAgICAgICBjZGIoXCJqc29uIGluOiBcIiwganNvbik7XG5cbiAgICAgICAgaWYgKCFlc3RpbWF0ZWQpIGJ5SWQoXCJyZXN1bHRzXCIpLnJlbW92ZUNoaWxkKGJ5SWQoXCJyZXN1bHRzSG9sZGVyXCIpKTtcblxuICAgICAgICBlc3RpbWF0ZWQgPSB0cnVlO1xuICAgICAgICBkMy5zZWxlY3QoXCIjcmVzdWx0c1wiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xuXG4gICAgICAgIGQzLnNlbGVjdChcIiNyZXN1bHRzVmlld1wiKVxuICAgICAgICAgICAgLnN0eWxlKFwiZGlzcGxheVwiLCBcImJsb2NrXCIpO1xuXG4gICAgICAgIGQzLnNlbGVjdChcIiNtb2RlbFZpZXdcIilcbiAgICAgICAgICAgIC5zdHlsZShcImRpc3BsYXlcIiwgXCJibG9ja1wiKTtcblxuICAgICAgICAvLyBwcm9ncmFtbWF0aWMgY2xpY2sgb24gUmVzdWx0cyBidXR0b25cbiAgICAgICAgJChcIiNidG5SZXN1bHRzXCIpLnRyaWdnZXIoXCJjbGlja1wiKTtcblxuICAgICAgICBsZXQgbW9kZWwgPSBcIk1vZGVsXCIuY29uY2F0KG1vZGVsQ291bnQgPSBtb2RlbENvdW50ICsgMSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbW9kQ29sKCkge1xuICAgICAgICAgICAgZDMuc2VsZWN0KFwiI21vZGVsVmlld1wiKVxuICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAgICAgICAgICAgLnN0eWxlKCdiYWNrZ3JvdW5kLWNvbG9yJywgaGV4VG9SZ2JhKHZhckNvbG9yKSk7XG4gICAgICAgIH1cbiAgICAgICAgbW9kQ29sKCk7XG5cbiAgICAgICAgZDMuc2VsZWN0KFwiI21vZGVsVmlld1wiKVxuICAgICAgICAgICAgLmluc2VydChcInBcIiwgXCI6Zmlyc3QtY2hpbGRcIikgLy8gdG9wIHN0YWNrIGZvciByZXN1bHRzXG4gICAgICAgICAgICAuYXR0cihcImlkXCIsIG1vZGVsKVxuICAgICAgICAgICAgLnRleHQobW9kZWwpXG4gICAgICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCBoZXhUb1JnYmEoc2VsVmFyQ29sb3IpKVxuICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIGEgPSB0aGlzLnN0eWxlLmJhY2tncm91bmRDb2xvci5yZXBsYWNlKC9cXHMqL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgIHZhciBiID0gaGV4VG9SZ2JhKHNlbFZhckNvbG9yKS5yZXBsYWNlKC9cXHMqL2csIFwiXCIpO1xuICAgICAgICAgICAgICAgIGlmIChhLnN1YnN0cigwLCAxNykgPT0gYi5zdWJzdHIoMCwgMTcpKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47IC8vIGVzY2FwZSBmdW5jdGlvbiBpZiBkaXNwbGF5ZWQgbW9kZWwgaXMgY2xpY2tlZFxuICAgICAgICAgICAgICAgIG1vZENvbCgpO1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAuc3R5bGUoJ2JhY2tncm91bmQtY29sb3InLCBoZXhUb1JnYmEoc2VsVmFyQ29sb3IpKTtcbiAgICAgICAgICAgICAgICB2aXoodGhpcy5pZCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICBsZXQgckNhbGwgPSBbXTtcbiAgICAgICAgckNhbGxbMF0gPSBqc29uLmNhbGw7XG4gICAgICAgIHNob3dMb2coXCJlc3RpbWF0ZVwiLCByQ2FsbCk7XG5cbiAgICAgICAgdml6KG1vZGVsKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBlc3RpbWF0ZUZhaWwoYnRuKSB7XG4gICAgICAgIGVzdGltYXRlTGFkZGEuc3RvcCgpOyAvLyBzdG9wIHNwaW5uZXJcbiAgICAgICAgZXN0aW1hdGVkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZWxlY3RvclN1Y2Nlc3MoYnRuLCBqc29uKSB7XG4gICAgICAgIGQzLnNlbGVjdChcIiN0aWNrZXJcIilcbiAgICAgICAgICAgIC50ZXh0KFwiU3VnZ2VzdGVkIHZhcmlhYmxlcyBhbmQgcGVyY2VudCBpbXByb3ZlbWVudCBvbiBSTVNFOiBcIiArIGpzb24udmFycyk7XG4gICAgICAgIGNkYihcInNlbGVjdG9yU3VjY2VzczogXCIsIGpzb24pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNlbGVjdG9yRmFpbChidG4pIHtcbiAgICAgICAgYWxlcnQoXCJTZWxlY3RvciBGYWlsXCIpO1xuICAgIH1cblxuICAgIGVzdGltYXRlTGFkZGEuc3RhcnQoKTsgLy8gc3RhcnQgc3Bpbm5lclxuICAgIG1ha2VDb3JzUmVxdWVzdCh1cmxjYWxsLCBidG4sIGVzdGltYXRlU3VjY2VzcywgZXN0aW1hdGVGYWlsLCBzb2xhanNvbm91dCk7XG59XG5cbmZ1bmN0aW9uIGRhdGFEb3dubG9hZCgpIHtcbiAgICB6UG9wKCk7XG4gICAgLy8gd3JpdGUgbGlua3MgdG8gZmlsZSAmIHJ1biBSIENNRFxuXG4gICAgLy9wYWNrYWdlIHRoZSBvdXRwdXQgYXMgSlNPTlxuICAgIC8vIGFkZCBjYWxsIGhpc3RvcnkgYW5kIHBhY2thZ2UgdGhlIHpwYXJhbXMgb2JqZWN0IGFzIEpTT05cbiAgICB2YXIganNvbm91dCA9IEpTT04uc3RyaW5naWZ5KHpwYXJhbXMpO1xuICAgIHZhciBidG4gPSBcIm5vYnV0dG9uXCI7XG5cbiAgICB2YXIgdXJsY2FsbCA9IHJhcHBVUkwgKyBcImRhdGFhcHBcIjtcbiAgICB2YXIgc29sYWpzb25vdXQgPSBcInNvbGFKU09OPVwiICsganNvbm91dDtcbiAgICBjZGIoXCJ1cmxjYWxsIG91dDogXCIsIHVybGNhbGwpO1xuICAgIGNkYihcIlBPU1Qgb3V0OiBcIiwgc29sYWpzb25vdXQpO1xuXG4gICAgbGV0IGRvd25sb2FkU3VjY2VzcyA9IChidG4sIGpzb24pID0+IHtcbiAgICAgICAgY2RiKCdkYXRhRG93bmxvYWQganNvbiBpbjogJywganNvbik7XG4gICAgICAgIHpwYXJhbXMuenNlc3Npb25pZCA9IGpzb24uc2Vzc2lvbmlkWzBdO1xuICAgICAgICAvLyBzZXQgbGluayBVUkxcbiAgICAgICAgYnlJZChcImxvZ0lEXCIpLmhyZWYgPSBgJHtwcm9kdWN0aW9uID8gcmFwcFVSTCArICdsb2dfZGlyL2xvZ18nIDogJ3Jvb2svbG9nXycgfSR7enBhcmFtcy56c2Vzc2lvbmlkfS50eHRgO1xuICAgIH07XG4gICAgbGV0IGRvd25sb2FkRmFpbCA9IF8gPT4gY2RiKCdEYXRhIGhhdmUgbm90IGJlZW4gZG93bmxvYWRlZCcpO1xuICAgIG1ha2VDb3JzUmVxdWVzdCh1cmxjYWxsLCBidG4sIGRvd25sb2FkU3VjY2VzcywgZG93bmxvYWRGYWlsLCBzb2xhanNvbm91dCk7XG59XG5cbmZ1bmN0aW9uIHZpeihteW0pIHtcbiAgICB2YXIgbXltID0gK215bS5zdWJzdHIoNSwgNSkgLSAxO1xuXG4gICAgZnVuY3Rpb24gcmVtb3ZlS2lkcyhwYXJlbnQpIHtcbiAgICAgICAgd2hpbGUgKHBhcmVudC5maXJzdENoaWxkKVxuICAgICAgICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKHBhcmVudC5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICByZW1vdmVLaWRzKGJ5SWQoXCJyZXN1bHRzVmlld1wiKSk7XG5cbiAgICBsZXQganNvbiA9IGFsbFJlc3VsdHNbbXltXTtcblxuICAgIC8vIHBpcGUgaW4gZmlndXJlcyB0byByaWdodCBwYW5lbFxuICAgIHZhciBmaWxlbGlzdCA9IG5ldyBBcnJheTtcbiAgICBmb3IgKHZhciBpIGluIGpzb24uaW1hZ2VzKSB7XG4gICAgICAgIHZhciB6ZmlnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImltZ1wiKTtcbiAgICAgICAgemZpZy5zZXRBdHRyaWJ1dGUoXCJzcmNcIiwganNvbi5pbWFnZXNbaV0pO1xuICAgICAgICB6ZmlnLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAyMDApO1xuICAgICAgICB6ZmlnLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgMjAwKTtcbiAgICAgICAgYnlJZChcInJlc3VsdHNWaWV3XCIpLmFwcGVuZENoaWxkKHpmaWcpO1xuICAgIH1cblxuICAgIC8vIHdyaXRlIHRoZSByZXN1bHRzIHRhYmxlXG4gICAgdmFyIHJlc3VsdHNBcnJheSA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBqc29uLnN1bUluZm8pIHtcbiAgICAgICAgaWYgKGtleSA9PSAnY29sbmFtZXMnKVxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIHJlc3VsdHNBcnJheS5wdXNoKGpzb24uc3VtSW5mb1trZXldKTtcbiAgICB9XG5cbiAgICB2YXIgdGFibGUgPSBkMy5zZWxlY3QoXCIjcmVzdWx0c1ZpZXdcIilcbiAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgLmFwcGVuZChcInRhYmxlXCIpO1xuXG4gICAgdmFyIHRoZWFkID0gdGFibGUuYXBwZW5kKFwidGhlYWRcIik7XG4gICAgdGhlYWQuYXBwZW5kKFwidHJcIilcbiAgICAgICAgLnNlbGVjdEFsbChcInRoXCIpXG4gICAgICAgIC5kYXRhKGpzb24uc3VtSW5mby5jb2xuYW1lcylcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInRoXCIpXG4gICAgICAgIC50ZXh0KGQgPT4gZCk7XG5cbiAgICB2YXIgdGJvZHkgPSB0YWJsZS5hcHBlbmQoXCJ0Ym9keVwiKTtcbiAgICB0Ym9keS5zZWxlY3RBbGwoXCJ0clwiKVxuICAgICAgICAuZGF0YShyZXN1bHRzQXJyYXkpXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRyXCIpXG4gICAgICAgIC5zZWxlY3RBbGwoXCJ0ZFwiKVxuICAgICAgICAuZGF0YShkID0+IGQpXG4gICAgICAgIC5lbnRlcigpLmFwcGVuZChcInRkXCIpXG4gICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgIHZhciBteU51bSA9IE51bWJlcihkKTtcbiAgICAgICAgICAgIGlmIChpc05hTihteU51bSkpXG4gICAgICAgICAgICAgICAgcmV0dXJuIGQ7XG4gICAgICAgICAgICByZXR1cm4gbXlOdW0udG9QcmVjaXNpb24oMyk7XG4gICAgICAgIH0pXG4gICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zdHlsZShcImJhY2tncm91bmQtY29sb3JcIiwgXCJhbGljZWJsdWVcIik7XG4gICAgICAgIH0pIC8vIGZvciBubyBkaXNjZXJuYWJsZSByZWFzb25cbiAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc3R5bGUoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIFwiI0Y5RjlGOVwiKTtcbiAgICAgICAgfSk7IC8vKGJ1dCBtYXliZSB3ZSdsbCB0aGluayBvZiBvbmUpXG5cbiAgICBkMy5zZWxlY3QoXCIjcmVzdWx0c1ZpZXdcIilcbiAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgLmh0bWwoKCkgPT4gXCI8Yj5Gb3JtdWxhOiA8L2I+XCIuY29uY2F0KGpzb24uY2FsbFswXSkpO1xuXG4gICAgbS5yZWRyYXcoKTtcbn1cblxuLy8gcGFyc2VzIHRoZSB0cmFuc2Zvcm1hdGlvbiBpbnB1dC4gdmFyaWFibGUgbmFtZXMgYXJlIG9mdGVuIG5lc3RlZCBpbnNpZGUgb25lIGFub3RoZXIsIGUuZy4sIGV0aHdhciwgd2FyLCB3YXJzLCBhbmQgc28gdGhpcyBpcyBoYW5kbGVkXG5mdW5jdGlvbiB0cmFuc1BhcnNlKG4pIHtcbiAgICB2YXIgb3V0MiA9IFtdO1xuICAgIHZhciB0MiA9IG47XG4gICAgdmFyIGsyID0gMDtcbiAgICB2YXIgc3ViTWUyID0gXCJfdHJhbnN2YXJcIi5jb25jYXQoazIpO1xuICAgIHZhciBpbmRleGVkID0gW107XG5cbiAgICAvLyBvdXQyIGlzIGFsbCBtYXRjaGVkIHZhcmlhYmxlcywgaW5kZXhlZCBpcyBhbiBhcnJheSwgZWFjaCBlbGVtZW50IGlzIGFuIG9iamVjdCB0aGF0IGNvbnRhaW5zIHRoZSBtYXRjaGVkIHZhcmlhYmxlcyBzdGFydGluZyBpbmRleCBhbmQgZmluaXNoaW5nIGluZGV4LiAgZS5nLiwgbj1cIndhcnMrMlwiLCBvdXQyPVt3YXIsIHdhcnNdLCBpbmRleGVkPVt7MCwyfSx7MCwzfV1cbiAgICBmb3IgKHZhciBpIGluIHZhbHVlS2V5KSB7XG4gICAgICAgIHZhciBtMiA9IG4ubWF0Y2godmFsdWVLZXlbaV0pO1xuICAgICAgICBpZiAobTIgIT0gbnVsbClcbiAgICAgICAgICAgIG91dDIucHVzaChtMlswXSk7XG5cbiAgICAgICAgdmFyIHJlID0gbmV3IFJlZ0V4cCh2YWx1ZUtleVtpXSwgXCJnXCIpO1xuICAgICAgICB2YXIgcyA9IG4uc2VhcmNoKHJlKTtcbiAgICAgICAgaWYgKHMgIT0gLTEpXG4gICAgICAgICAgICBpbmRleGVkLnB1c2goe2Zyb206IHMsIHRvOiBzICsgdmFsdWVLZXlbaV0ubGVuZ3RofSk7XG4gICAgfVxuXG4gICAgLy8gbmVzdGVkIGxvb3Agbm90IGdvb2QsIGJ1dCBpbmRleGVkIGlzIG5vdCBsaWtlbHkgdG8gYmUgdmVyeSBsYXJnZS5cbiAgICAvLyBpZiBhIHZhcmlhYmxlIGlzIG5lc3RlZCwgaXQgaXMgcmVtb3ZlZCBmcm9tIG91dDJcbiAgICAvLyBub3RpY2UsIGxvb3AgaXMgYmFja3dhcmRzIHNvIHRoYXQgaW5kZXggY2hhbmdlcyBkb24ndCBhZmZlY3QgdGhlIHNwbGljZVxuICAgIGNkYihcImluZGV4ZWQgXCIsIGluZGV4ZWQpO1xuICAgIGZvciAodmFyIGkgPSBpbmRleGVkLmxlbmd0aCAtIDE7IGkgPiAtMTsgaS0tKSB7XG4gICAgICAgIGZvciAodmFyIGogPSBpbmRleGVkLmxlbmd0aCAtIDE7IGogPiAtMTsgai0tKSB7XG4gICAgICAgICAgICBpZiAoaSA9PT0gailcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIGlmICgoaW5kZXhlZFtpXS5mcm9tID49IGluZGV4ZWRbal0uZnJvbSkgJiAoaW5kZXhlZFtpXS50byA8PSBpbmRleGVkW2pdLnRvKSkge1xuICAgICAgICAgICAgICAgIGNkYihpLCBcIiBpcyBuZXN0ZWQgaW4gXCIsIGopO1xuICAgICAgICAgICAgICAgIG91dDIuc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSBpbiBvdXQyKSB7XG4gICAgICAgIHQyID0gdDIucmVwbGFjZShvdXQyW2ldLCBzdWJNZTIpOyAvL3NvbWV0aGluZyB0aGF0J2xsIG5ldmVyIGJlIGEgdmFyaWFibGUgbmFtZVxuICAgICAgICBrMiA9IGsyICsgMTtcbiAgICAgICAgc3ViTWUyID0gXCJfdHJhbnN2YXJcIi5jb25jYXQoazIpO1xuICAgIH1cblxuICAgIGlmIChvdXQyLmxlbmd0aCA+IDApIHtcbiAgICAgICAgb3V0Mi5wdXNoKHQyKTtcbiAgICAgICAgY2RiKFwibmV3IG91dCBcIiwgb3V0Mik7XG4gICAgICAgIHJldHVybiAob3V0Mik7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgYWxlcnQoXCJObyB2YXJpYWJsZSBuYW1lIGZvdW5kLiBQZXJoYXBzIGNoZWNrIHlvdXIgc3BlbGxpbmc/XCIpO1xuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbi8qKlxuICBuID0gbmFtZSBvZiBjb2x1bW4vbm9kZVxuICB0ID0gc2VsZWN0ZWQgdHJhbnNmb3JtYXRpb25cbiAqL1xuZnVuY3Rpb24gdHJhbnNmb3JtKG4sIHQsIHR5cGVUcmFuc2Zvcm0pIHtcbiAgICBpZiAocHJvZHVjdGlvbiAmJiB6cGFyYW1zLnpzZXNzaW9uaWQgPT0gXCJcIikge1xuICAgICAgICBhbGVydChcIldhcm5pbmc6IERhdGEgZG93bmxvYWQgaXMgbm90IGNvbXBsZXRlLiBUcnkgYWdhaW4gc29vbi5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKCF0eXBlVHJhbnNmb3JtKVxuICAgICAgICB0ID0gdC5yZXBsYWNlKFwiK1wiLCBcIl9wbHVzX1wiKTsgLy8gY2FuJ3Qgc2VuZCB0aGUgcGx1cyBvcGVyYXRvclxuXG4gICAgY2RiKCduYW1lIG9mIGNvbDogJyArIG4pO1xuICAgIGNkYigndHJhbnNmb3JtYXRpb246ICcgKyB0KTtcblxuICAgIHZhciBidG4gPSBieUlkKCdidG5Fc3RpbWF0ZScpO1xuXG4gICAgLy8gZmluZCB0aGUgbm9kZSBieSBuYW1lXG4gICAgdmFyIG15biA9IGZpbmROb2RlSW5kZXgoblswXSwgdHJ1ZSk7XG5cbiAgICBpZiAodHlwZW9mIG15biA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBteW4gPSBmaW5kTm9kZUluZGV4KG4sIHRydWUpO1xuICAgIH1cblxuICAgIHZhciBvdXR0eXBlcyA9IHtcbiAgICAgICAgdmFybmFtZXNUeXBlczogbixcbiAgICAgICAgaW50ZXJ2YWw6IG15bi5pbnRlcnZhbCxcbiAgICAgICAgbnVtY2hhcjogbXluLm51bWNoYXIsXG4gICAgICAgIG5hdHVyZTogbXluLm5hdHVyZSxcbiAgICAgICAgYmluYXJ5OiBteW4uYmluYXJ5XG4gICAgfTtcblxuICAgIGNkYihteW4pO1xuICAgIC8vIGlmIHR5cGVUcmFuc2Zvcm0gYnV0IHdlIGFscmVhZHkgaGF2ZSB0aGUgbWV0YWRhdGFcbiAgICBpZiAodHlwZVRyYW5zZm9ybSkge1xuICAgICAgICBpZiAobXluLm5hdHVyZSA9PSBcIm5vbWluYWxcIiAmIHR5cGVvZiBteW4ucGxvdHZhbHVlcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgbXluLnBsb3R0eXBlID0gXCJiYXJcIjtcbiAgICAgICAgICAgIGJhcnNOb2RlKG15bik7XG4gICAgICAgICAgICBwYW5lbFBsb3RzKCk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH0gZWxzZSBpZiAobXluLm5hdHVyZSAhPSBcIm5vbWluYWxcIiAmIHR5cGVvZiBteW4ucGxvdHggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIG15bi5wbG90dHlwZSA9IFwiY29udGludW91c1wiO1xuICAgICAgICAgICAgZGVuc2l0eU5vZGUobXluKTtcbiAgICAgICAgICAgIHBhbmVsUGxvdHMoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vcGFja2FnZSB0aGUgb3V0cHV0IGFzIEpTT05cbiAgICB2YXIgdHJhbnNmb3Jtc3R1ZmYgPSB7XG4gICAgICAgIHpkYXRhdXJsOiBkYXRhdXJsLFxuICAgICAgICB6dmFyczogbXluLm5hbWUsXG4gICAgICAgIHpzZXNzaW9uaWQ6IHpwYXJhbXMuenNlc3Npb25pZCxcbiAgICAgICAgdHJhbnNmb3JtOiB0LFxuICAgICAgICBjYWxsSGlzdG9yeTogY2FsbEhpc3RvcnksXG4gICAgICAgIHR5cGVUcmFuc2Zvcm06IHR5cGVUcmFuc2Zvcm0sXG4gICAgICAgIHR5cGVTdHVmZjogb3V0dHlwZXNcbiAgICB9O1xuICAgIHZhciBqc29ub3V0ID0gSlNPTi5zdHJpbmdpZnkodHJhbnNmb3Jtc3R1ZmYpO1xuICAgIHZhciB1cmxjYWxsID0gcmFwcFVSTCArIFwidHJhbnNmb3JtYXBwXCI7XG4gICAgdmFyIHNvbGFqc29ub3V0ID0gXCJzb2xhSlNPTj1cIiArIGpzb25vdXQ7XG4gICAgY2RiKFwidXJsY2FsbCBvdXQ6IFwiICsgdXJsY2FsbCk7XG4gICAgY2RiKFwiUE9TVCBvdXQ6IFwiICsgc29sYWpzb25vdXQpO1xuXG4gICAgZnVuY3Rpb24gdHJhbnNmb3JtU3VjY2VzcyhidG4sIGpzb24pIHtcbiAgICAgICAgZXN0aW1hdGVMYWRkYS5zdG9wKCk7XG4gICAgICAgIGNkYihcImpzb24gaW46IFwiICsgSlNPTi5zdHJpbmdpZnkoanNvbikpO1xuXG4gICAgICAgIC8vIElzIHRoaXMgYSB0eXBlVHJhbnNmb3JtP1xuICAgICAgICBpZiAoanNvbi50eXBlVHJhbnNmb3JtWzBdKSB7XG4gICAgICAgICAgICAvLyBZZXMuIFdlJ3JlIHVwZGF0aW5nIGFuIGV4aXN0aW5nIG5vZGVcbiAgICAgICAgICAgIGQzLmpzb24oanNvbi51cmwsIChlcnIsIGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGVycik7XG4gICAgICAgICAgICAgICAgbGV0IG5vZGU7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgbm9kZSA9IGZpbmROb2RlSW5kZXgoa2V5LCB0cnVlKTtcblx0XHQgICAgaWYgKCFub2RlKVxuXHRcdCAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQodHJ1ZSwgbm9kZSwgZGF0YVtrZXldKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5wbG90dHlwZSA9PT0gXCJjb250aW51b3VzXCIgPyBkZW5zaXR5Tm9kZShub2RlKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnBsb3R0eXBlID09PSBcImJhclwiID8gYmFyc05vZGUobm9kZSkgOiBudWxsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmYWtlQ2xpY2soKTtcbiAgICAgICAgICAgICAgICBwYW5lbFBsb3RzKCk7XG4gICAgICAgICAgICAgICAgbm9kZSAmJiBjZGIobm9kZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiBObywgd2UgaGF2ZSBhIG5ldyBub2RlIGhlcmUtLWUuZy4gdGhlIHRyYW5zZm9ybWVkIGNvbHVtblxuICAgICAgICAgICAgICAgZXhhbXBsZSByZXNwb25zZToge1xuICAgICAgICAgICAgICAgXCJjYWxsXCI6W1widF95ZWFyXzJcIl0sXG4gICAgICAgICAgICAgICBcInVybFwiOltcImRhdGEvcHJlcHJvY2Vzc1N1YnNldF9CQUNDQkM3OC03REQ5LTQ0ODItQjMxRC02RUIwMUMzQTBDOTUudHh0XCJdLFxuICAgICAgICAgICAgICAgXCJ0cmFuc1wiOltcInllYXJcIixcIl90cmFuc3ZhcjBeMlwiXSxcbiAgICAgICAgICAgICAgIFwidHlwZVRyYW5zZm9ybVwiOltmYWxzZV1cbiAgICAgICAgICAgICB9XG4gICAgICAgICAgKi9cbiAgICAgICAgICAgIGNhbGxIaXN0b3J5LnB1c2goe1xuICAgICAgICAgICAgICAgIGZ1bmM6IFwidHJhbnNmb3JtXCIsXG4gICAgICAgICAgICAgICAgenZhcnM6IG4sXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtOiB0XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdmFyIHN1YnNldGVkID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgckNhbGwgPSBbXTtcblxuICAgICAgICAgICAgckNhbGxbMF0gPSBqc29uLmNhbGw7XG4gICAgICAgICAgICB2YXIgbmV3VmFyID0gckNhbGxbMF1bMF07XG5cbiAgICAgICAgICAgIHRyYW5zLnB1c2gobmV3VmFyKTtcblxuICAgICAgICAgICAgLy8gUmVhZCB0aGUgcHJlcHJvY2VzcyBmaWxlIGNvbnRhaW5pbmcgdmFsdWVzXG4gICAgICAgICAgICAvLyBmb3IgdGhlIHRyYW5zZm9ybWVkIHZhcmlhYmxlXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgZDMuanNvbihqc29uLnVybCwgZnVuY3Rpb24oZXJyb3IsIGpzb24pIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyb3IpIHJldHVybiBjb25zb2xlLndhcm4oZXJyb3IpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGpzb25kYXRhID0gZ2V0VmFyaWFibGVEYXRhKGpzb24pO1xuXG4gICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGpzb25kYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBteUluZGV4ID0gZmluZE5vZGVJbmRleChrZXkpO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG15SW5kZXggIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiSW52YWxpZCB0cmFuc2Zvcm1hdGlvbjogdGhpcyB2YXJpYWJsZSBuYW1lIGFscmVhZHkgZXhpc3RzLlwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdHJhbnNmb3JtZWQgdmFyaWFibGUgdG8gdGhlIGN1cnJlbnQgc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSBhbGxOb2Rlcy5sZW5ndGg7ICAvLyBnZXQgbmV3IGluZGV4XG4gICAgICAgICAgICAgICAgICAgIHZhciBvYmoxID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGksXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZsZXhpdmU6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgbGFibDogXCJ0cmFuc2Zvcm1sYWJlbFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogWzUsIDE1LCAyMCwgMCwgNSwgMTUsIDIwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50OiBbLjYsIC4yLCAuOSwgLjgsIC4xLCAuMywgLjRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZUNvbDogY29sb3JzKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZUNvbDogY29sb3JzKGkpLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlQ29sb3I6IHNlbFZhckNvbG9yLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlV2lkdGg6IFwiMVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2V0cGxvdDogZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJzZXRyYW5nZTogW1wiXCIsIFwiXCJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0eHBsb3Q6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0eHZhbHM6IFtcIlwiLCBcIlwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGdyYXlvdXQ6IGZhbHNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEludGVydmFsOiBqc29uZGF0YVtrZXldLmludGVydmFsLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdE51bWNoYXI6IGpzb25kYXRhW2tleV0ubnVtY2hhcixcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHROYXR1cmU6IGpzb25kYXRhW2tleV0ubmF0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdEJpbmFyeToganNvbmRhdGFba2V5XS5iaW5hcnlcbiAgICAgICAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICAgICAgICBqUXVlcnkuZXh0ZW5kKHRydWUsIG9iajEsIGpzb25kYXRhW2tleV0pO1xuICAgICAgICAgICAgICAgICAgICBhbGxOb2Rlcy5wdXNoKG9iajEpO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlS2V5LnB1c2gobmV3VmFyKTtcbiAgICAgICAgICAgICAgICAgICAgbm9kZXMucHVzaChhbGxOb2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIGZha2VDbGljaygpO1xuICAgICAgICAgICAgICAgICAgICBwYW5lbFBsb3RzKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGFsbE5vZGVzW2ldLnBsb3R0eXBlID09PSBcImNvbnRpbnVvdXNcIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVuc2l0eU5vZGUoYWxsTm9kZXNbaV0pO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGFsbE5vZGVzW2ldLnBsb3R0eXBlID09PSBcImJhclwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBiYXJzTm9kZShhbGxOb2Rlc1tpXSk7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBtLnJlZHJhdygpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICBzaG93TG9nKCd0cmFuc2Zvcm0nLCByQ2FsbCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmFuc2Zvcm1GYWlsKGJ0bikge1xuICAgICAgICBhbGVydChcInRyYW5zZm9ybSBmYWlsXCIpO1xuICAgICAgICBlc3RpbWF0ZUxhZGRhLnN0b3AoKTtcbiAgICB9XG5cbiAgICBlc3RpbWF0ZUxhZGRhLnN0YXJ0KCk7IC8vIHN0YXJ0IHNwaW5uZXJcbiAgICBtYWtlQ29yc1JlcXVlc3QodXJsY2FsbCwgYnRuLCB0cmFuc2Zvcm1TdWNjZXNzLCB0cmFuc2Zvcm1GYWlsLCBzb2xhanNvbm91dCk7XG59XG5cbi8vIGJlbG93IGZyb20gaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvY29ycy8gZm9yIGNyb3NzLW9yaWdpbiByZXNvdXJjZSBzaGFyaW5nXG4vLyBDcmVhdGUgdGhlIFhIUiBvYmplY3QuXG5mdW5jdGlvbiBjcmVhdGVDT1JTUmVxdWVzdChtZXRob2QsIHVybCwgY2FsbGJhY2spIHtcbiAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgaWYgKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKSB7XG4gICAgICAgIC8vIFhIUiBmb3IgQ2hyb21lL0ZpcmVmb3gvT3BlcmEvU2FmYXJpLlxuICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCwgdHJ1ZSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgWERvbWFpblJlcXVlc3QgIT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAvLyBYRG9tYWluUmVxdWVzdCBmb3IgSUUuXG4gICAgICAgIHhociA9IG5ldyBYRG9tYWluUmVxdWVzdCgpO1xuICAgICAgICB4aHIub3BlbihtZXRob2QsIHVybCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gQ09SUyBub3Qgc3VwcG9ydGVkLlxuICAgICAgICB4aHIgPSBudWxsO1xuICAgIH1cbiAgICAvLyB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ3RleHQvcGxhaW4nKTtcbiAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcignQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCcpO1xuICAgIHJldHVybiB4aHI7XG59XG5cbi8vIE1ha2UgdGhlIGFjdHVhbCBDT1JTIHJlcXVlc3QuXG5mdW5jdGlvbiBtYWtlQ29yc1JlcXVlc3QodXJsLCBidG4sIGNhbGxiYWNrLCB3YXJuaW5nY2FsbGJhY2ssIGpzb25zdHJpbmcpIHtcbiAgICB2YXIgeGhyID0gY3JlYXRlQ09SU1JlcXVlc3QoJ1BPU1QnLCB1cmwpO1xuICAgIGlmICgheGhyKSB7XG4gICAgICAgIGFsZXJ0KCdDT1JTIG5vdCBzdXBwb3J0ZWQnKTtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBSZXNwb25zZSBoYW5kbGVycyBmb3IgYXN5bmNocm9ub3VzIGxvYWRcbiAgICAvLyBvbmxvYWQgb3Igb25yZWFkeXN0YXRlY2hhbmdlP1xuXG4gICAgeGhyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB2YXIgdGV4dCA9IHhoci5yZXNwb25zZVRleHQ7XG4gICAgICAgIGNkYihcInRleHQgXCIsIHRleHQpO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2YXIganNvbiA9IEpTT04ucGFyc2UodGV4dCk7IC8vIHNob3VsZCB3cmFwIGluIHRyeSAvIGNhdGNoXG4gICAgICAgICAgICB2YXIgbmFtZXMgPSBPYmplY3Qua2V5cyhqc29uKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBlc3RpbWF0ZUxhZGRhLnN0b3AoKTtcbiAgICAgICAgICAgIHNlbGVjdExhZGRhLnN0b3AoKTtcbiAgICAgICAgICAgIGNkYihlcnIpO1xuICAgICAgICAgICAgYWxlcnQoJ0Vycm9yOiBDb3VsZCBub3QgcGFyc2UgaW5jb21pbmcgSlNPTi4nKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChuYW1lc1swXSA9PSBcIndhcm5pbmdcIikge1xuICAgICAgICAgICAgd2FybmluZ2NhbGxiYWNrKGJ0bik7XG4gICAgICAgICAgICBhbGVydChcIldhcm5pbmc6IFwiICsganNvbi53YXJuaW5nKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNhbGxiYWNrKGJ0biwganNvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHhoci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vIG5vdGU6IHhoci5yZWFkeXN0YXRlIHNob3VsZCBiZSA0IGFuZCBzdGF0dXMgc2hvdWxkIGJlIDIwMC4gYSBzdGF0dXMgb2YgMCBvY2N1cnMgd2hlbiB0aGUgdXJsIGlzIHRvbyBsYXJnZVxuICAgICAgICB4aHIuc3RhdHVzID09IDAgPyBhbGVydCgnVGhlcmUgd2FzIGFuIGVycm9yIG1ha2luZyB0aGUgcmVxdWVzdC4geG1saHR0cHJlcXVlc3Qgc3RhdHVzIGlzIDAuJykgOlxuICAgICAgICAgICAgeGhyLnJlYWR5U3RhdGUgIT0gNCA/IGFsZXJ0KCdUaGVyZSB3YXMgYW4gZXJyb3IgbWFraW5nIHRoZSByZXF1ZXN0LiB4bWxodHRwcmVxdWVzdCByZWFkeXN0YXRlIGlzIG5vdCA0LicpIDpcbiAgICAgICAgICAgIGFsZXJ0KCdXb29wcywgdGhlcmUgd2FzIGFuIGVycm9yIG1ha2luZyB0aGUgcmVxdWVzdC4nKTtcbiAgICAgICAgY2RiKHhocik7XG4gICAgICAgIGVzdGltYXRlTGFkZGEuc3RvcCgpO1xuICAgICAgICBzZWxlY3RMYWRkYS5zdG9wKCk7XG4gICAgfTtcbiAgICB4aHIuc2VuZChqc29uc3RyaW5nKTtcbn1cblxuZXhwb3J0IGxldCBsZWdlbmQgPSBfID0+IHtcbiAgICBib3JkZXJTdGF0ZSgpO1xuICAgIG0ucmVkcmF3KCk7XG59O1xuXG4vLyBwcm9ncmFtbWF0aWNhbGx5IGRlc2VsZWN0IGV2ZXJ5IHNlbGVjdGVkIHZhcmlhYmxlXG5leHBvcnQgZnVuY3Rpb24gZXJhc2UoKSB7XG4gICAgbGVmdHBhbmVsTWVkaXVtKCk7XG4gICAgcmlnaHRwYW5lbE1lZGl1bSgpO1xuICAgIHRhYkxlZnQoJ3RhYjEnKTtcbiAgICBqUXVlcnkuZm4uZDNDbGljayA9IGZ1bmN0aW9uKCkge1xuICAgICAgICB0aGlzLmNoaWxkcmVuKCkuZWFjaChmdW5jdGlvbihpLCBlKSB7XG4gICAgICAgICAgICB2YXIgbXljb2wgPSBkMy5yZ2IodGhpcy5zdHlsZS5iYWNrZ3JvdW5kQ29sb3IpO1xuICAgICAgICAgICAgaWYgKG15Y29sLnRvU3RyaW5nKCkgPT09IHZhckNvbG9yLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgdmFyIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KFwiTW91c2VFdmVudHNcIik7XG4gICAgICAgICAgICBldnQuaW5pdE1vdXNlRXZlbnQoXCJjbGlja1wiLCB0cnVlLCB0cnVlLCB3aW5kb3csIDAsIDAsIDAsIDAsIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgICAgICAgICAgIGUuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgICQoXCIjdmFyTGlzdFwiKS5kM0NsaWNrKCk7XG59XG5cbi8vIGh0dHA6Ly93d3cudHV0b3JpYWxzMmxlYXJuLmNvbS90dXRvcmlhbHMvc2NyaXB0cy9qYXZhc2NyaXB0L3htbC1wYXJzZXItamF2YXNjcmlwdC5odG1sXG5mdW5jdGlvbiBsb2FkWE1MRG9jKFhNTG5hbWUpIHtcbiAgICB2YXIgeG1sRG9jO1xuICAgIGlmICh3aW5kb3cuWE1MSHR0cFJlcXVlc3QpIHtcbiAgICAgICAgeG1sRG9jID0gbmV3IHdpbmRvdy5YTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgICB4bWxEb2Mub3BlbihcIkdFVFwiLCBYTUxuYW1lLCBmYWxzZSk7XG4gICAgICAgIHhtbERvYy5zZW5kKFwiXCIpO1xuICAgICAgICByZXR1cm4geG1sRG9jLnJlc3BvbnNlWE1MO1xuICAgIH1cbiAgICAvLyBJRSA1IGFuZCBJRSA2XG4gICAgZWxzZSBpZiAoQWN0aXZlWE9iamVjdChcIk1pY3Jvc29mdC5YTUxET01cIikpIHtcbiAgICAgICAgeG1sRG9jID0gbmV3IEFjdGl2ZVhPYmplY3QoXCJNaWNyb3NvZnQuWE1MRE9NXCIpO1xuICAgICAgICB4bWxEb2MuYXN5bmMgPSBmYWxzZTtcbiAgICAgICAgeG1sRG9jLmxvYWQoWE1MbmFtZSk7XG4gICAgICAgIHJldHVybiB4bWxEb2M7XG4gICAgfVxuICAgIGFsZXJ0KFwiRXJyb3IgbG9hZGluZyBkb2N1bWVudCFcIik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWJMZWZ0KHRhYikge1xuICAgIGJ5SWQoJ3RhYjEnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGJ5SWQoJ3RhYjInKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGJ5SWQoJ3RhYjMnKS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIGJ5SWQodGFiKS5zdHlsZS5kaXNwbGF5ID0gJ2Jsb2NrJztcbiAgICBpZiAodGFiICE9ICd0YWIzJykge1xuICAgICAgICBzdWJzZXQgPSB0YWIgPT0gJ3RhYjInO1xuICAgICAgICBzdW1tYXJ5SG9sZCA9IGZhbHNlO1xuICAgIH1cbiAgICBsZWZ0dGFiID0gdGFiO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFiUmlnaHQodGFiaWQpIHtcblxuICAgIGxldCBjbHMgPSBcInNpZGVwYW5lbCBjb250YWluZXIgY2xlYXJmaXhcIjtcbiAgICBsZXQgc2VsZWN0ID0gY2xzID0+IHtcbiAgICAgICAgbGV0IHBhbmVsID0gZDMuc2VsZWN0KFwiI3JpZ2h0cGFuZWxcIik7XG4gICAgICAgIHJldHVybiBjbHMgPyBwYW5lbC5hdHRyKCdjbGFzcycsIGNscykgOiBwYW5lbC5hdHRyKCdjbGFzcycpO1xuICAgIH07XG5cbiAgICBsZXQgdG9nZ2xlUiA9ICgpID0+IHtcbiAgICAgICAgc2VsZWN0KGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgbGV0IGV4cGFuZCA9IGNscyArICcgZXhwYW5kcGFuZWwnO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKFwiY2xhc3NcIikgPT09IGV4cGFuZCA/IGNscyA6IGV4cGFuZDtcbiAgICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICh0YWJpZCA9PSBcImJ0bk1vZGVsc1wiKSBzZWxlY3QoY2xzKTtcbiAgICBlbHNlIGlmICh0YWJpZCA9PSBcImJ0blNldHhcIikgcmlnaHR0YWIgPT0gXCJidG5TZXR4XCIgfHwgc2VsZWN0KCkgPT0gY2xzICYmIHRvZ2dsZVIoKTtcbiAgICBlbHNlIGlmICh0YWJpZCA9PSBcImJ0blJlc3VsdHNcIikgIWVzdGltYXRlZCA/IHNlbGVjdChjbHMpIDpcbiAgICAgICAgcmlnaHR0YWIgPT0gXCJidG5SZXN1bHRzXCIgfHwgc2VsZWN0KCkgPT0gY2xzID8gdG9nZ2xlUigpIDogbnVsbDtcblxuICAgIHJpZ2h0dGFiID0gdGFiaWQ7XG5cbn1cblxuZXhwb3J0IGxldCBzdW1tYXJ5ID0ge2RhdGE6IFtdfTtcblxuZnVuY3Rpb24gdmFyU3VtbWFyeShkKSB7XG4gICAgbGV0IHQxID0gJ01lYW46LCBNZWRpYW46LCBNb3N0IEZyZXE6LCBPY2N1cnJlbmNlczosIE1lZGlhbiBGcmVxOiwgT2NjdXJyZW5jZXM6LCBMZWFzdCBGcmVxOiwgT2NjdXJyZW5jZXM6LCBTdGQgRGV2OiwgTWluaW11bTosIE1heGltdW06LCBJbnZhbGlkOiwgVmFsaWQ6LCBVbmlxdWVzOiwgSGVyZmluZGFobCcuc3BsaXQoJywgJyk7XG5cbiAgICBsZXQgcmludCA9IGQzLmZvcm1hdCgncicpO1xuICAgIGxldCBzdHIgPSAoeCwgcCkgPT4gKCt4KS50b1ByZWNpc2lvbihwIHx8IDQpLnRvU3RyaW5nKCk7XG4gICAgbGV0IHQyID0gcHJpdiAmJiBkLm1lYW5DSSA/XG4gICAgICAgIFtzdHIoZC5tZWFuLCAyKSArICcgKCcgKyBzdHIoZC5tZWFuQ0kubG93ZXJCb3VuZCwgMikgKyAnIC0gJyArIHN0cihkLm1lYW5DSS51cHBlckJvdW5kLCAyKSArICcpJyxcbiAgICAgICAgIHN0cihkLm1lZGlhbiksIGQubW9kZSwgcmludChkLmZyZXFtb2RlKSwgZC5taWQsIHJpbnQoZC5mcmVxbWlkKSwgZC5mZXdlc3QsIHJpbnQoZC5mcmVxZmV3ZXN0KSxcbiAgICAgICAgIHN0cihkLnNkKSwgc3RyKGQubWluKSwgc3RyKGQubWF4KSwgcmludChkLmludmFsaWQpLCByaW50KGQudmFsaWQpLCByaW50KGQudW5pcXVlcyksIHN0cihkLmhlcmZpbmRhaGwpXSA6XG4gICAgICAgIFtzdHIoZC5tZWFuKSwgc3RyKGQubWVkaWFuKSwgZC5tb2RlLCByaW50KGQuZnJlcW1vZGUpLCBkLm1pZCwgcmludChkLmZyZXFtaWQpLCBkLmZld2VzdCwgcmludChkLmZyZXFmZXdlc3QpLFxuICAgICAgICAgc3RyKGQuc2QpLCBzdHIoZC5taW4pLCBzdHIoZC5tYXgpLCByaW50KGQuaW52YWxpZCksIHJpbnQoZC52YWxpZCksIHJpbnQoZC51bmlxdWVzKSwgc3RyKGQuaGVyZmluZGFobCldO1xuXG4gICAgc3VtbWFyeS5kYXRhID0gW107XG4gICAgdDEuZm9yRWFjaCgoZSwgaSkgPT4gIXQyW2ldLmluY2x1ZGVzKCdOYU4nKSAmJiB0MltpXSAhPSAnTkEnICYmIHQyW2ldICE9ICcnICYmIHN1bW1hcnkuZGF0YS5wdXNoKFtlLCB0MltpXV0pKTtcblxuICAgIHN1bW1hcnkubmFtZSA9IGQubmFtZTtcbiAgICBzdW1tYXJ5LmxhYmwgPSBkLmxhYmw7XG5cbiAgICBkMy5zZWxlY3QoJyN0YWIzJylcbiAgICAgICAgLnNlbGVjdEFsbCgnc3ZnJylcbiAgICAgICAgLnJlbW92ZSgpO1xuXG4gICAgaWYgKCFkLnBsb3R0eXBlKVxuICAgICAgICByZXR1cm47XG4gICAgZC5wbG90dHlwZSA9PSAnY29udGludW91cycgPyBkZW5zaXR5KGQsICd2YXJTdW1tYXJ5JywgcHJpdikgOlxuICAgICAgICBkLnBsb3R0eXBlID09IFwiYmFyXCIgPyBiYXJzKGQsICd2YXJTdW1tYXJ5JywgcHJpdikgOlxuICAgICAgICBkMy5zZWxlY3QoXCIjdGFiM1wiKSAvLyBubyBncmFwaCB0byBkcmF3LCBidXQgc3RpbGwgbmVlZCB0byByZW1vdmUgcHJldmlvdXMgZ3JhcGhcbiAgICAgICAgLnNlbGVjdEFsbChcInN2Z1wiKVxuICAgICAgICAucmVtb3ZlKCk7XG59XG5cbmV4cG9ydCBsZXQgcG9wb3ZlckNvbnRlbnQgPSBkID0+IHtcbiAgICBsZXQgdGV4dCA9ICcnO1xuICAgIGxldCBbcmludCwgcHJlY10gPSBbZDMuZm9ybWF0KCdyJyksICh2YWwsIGludCkgPT4gKCt2YWwpLnRvUHJlY2lzaW9uKGludCkudG9TdHJpbmcoKV07XG4gICAgbGV0IGRpdiA9IChmaWVsZCwgbmFtZSwgdmFsKSA9PiB7XG4gICAgICAgIGlmIChmaWVsZCAhPSAnTkEnKSB0ZXh0ICs9IGA8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPiR7bmFtZX08L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+JHt2YWwgfHwgZmllbGR9PC9wPjwvZGl2PjwvZGl2PmA7XG4gICAgfTtcbiAgICBkLmxhYmwgIT0gJycgJiYgZGl2KGQubGFibCwgJ0xhYmVsJyk7XG4gICAgZGl2KGQubWVhbiwgJ01lYW4nLCBwcml2ICYmIGQubWVhbkNJID9cbiAgICAgICAgYCR7cHJlYyhkLm1lYW4sIDIpfSAoJHtwcmVjKGQubWVhbkNJLmxvd2VyQm91bmQsIDIpfSAtICR7cHJlYyhkLm1lYW5DSS51cHBlckJvdW5kLCAyKX0pYCA6XG4gICAgICAgIHByZWMoZC5tZWFuLCA0KSk7XG4gICAgZGl2KGQubWVkaWFuLCAnTWVkaWFuJywgcHJlYyhkLm1lZGlhbiwgNCkpO1xuICAgIGRpdihkLm1vZGUsICdNb3N0IEZyZXEnKTtcbiAgICBkaXYoZC5mcmVxbW9kZSwgJ09jY3VycmVuY2VzJywgIHJpbnQoZC5mcmVxbW9kZSkpO1xuICAgIGRpdihkLm1pZCwgJ01lZGlhbiBGcmVxJyk7XG4gICAgZGl2KGQuZnJlcW1pZCwgJ09jY3VycmVuY2VzJywgcmludChkLmZyZXFtaWQpKTtcbiAgICBkaXYoZC5mZXdlc3QsICdMZWFzdCBGcmVxJyk7XG4gICAgZGl2KGQuZnJlcWZld2VzdCwgJ09jY3VycmVuY2VzJywgcmludChkLmZyZXFmZXdlc3QpKTtcbiAgICBkaXYoZC5zZCwgJ1N0YW5kIERldicsIHByZWMoZC5zZCwgNCkpO1xuICAgIGRpdihkLm1heCwgJ01heGltdW0nLCBwcmVjKGQubWF4LCA0KSk7XG4gICAgZGl2KGQubWluLCAnTWluaW11bScsIHByZWMoZC5taW4sIDQpKTtcbiAgICBkaXYoZC5pbnZhbGlkLCAnSW52YWxpZCcsIHJpbnQoZC5pbnZhbGlkKSk7XG4gICAgZGl2KGQudmFsaWQsICdWYWxpZCcsIHJpbnQoZC52YWxpZCkpO1xuICAgIGRpdihkLnVuaXF1ZXMsICdVbmlxdWVzJywgcmludChkLnVuaXF1ZXMpKTtcbiAgICBkaXYoZC5oZXJmaW5kYWhsLCAnSGVyZmluZGFobCcsIHByZWMoZC5oZXJmaW5kYWhsLCA0KSk7XG4gICAgcmV0dXJuIHRleHQ7XG59XG5cbmZ1bmN0aW9uIHBvcHVwWChkKSB7XG4gICAgdmFyIHRzZiA9IGQzLmZvcm1hdChcIi40clwiKTtcbiAgICB2YXIgcmludCA9IGQzLmZvcm1hdChcInJcIik7XG4gICAgLy9DcmVhdGUgdGhlIHRvb2x0aXAgbGFiZWxcbiAgICBkMy5zZWxlY3QoXCIjdG9vbHRpcFwiKVxuICAgICAgICAuc3R5bGUoXCJsZWZ0XCIsIHRlbXBYICsgXCJweFwiKVxuICAgICAgICAuc3R5bGUoXCJ0b3BcIiwgdGVtcFkgKyBcInB4XCIpXG4gICAgICAgIC5zZWxlY3QoXCIjdG9vbHRpcHRleHRcIilcbiAgICAgICAgLmh0bWwoXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPk1lYW48L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyB0c2YoZC5tZWFuKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiICtcbiAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5NZWRpYW48L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyB0c2YoZC5tZWRpYW4pICsgXCI8L3A+PC9kaXY+PC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPk1vZGU8L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyBkLm1vZGUgKyBcIjwvcD48L2Rpdj48L2Rpdj5cIiArXG4gICAgICAgICAgICBcIjxkaXYgY2xhc3M9J2Zvcm0tZ3JvdXAnPjxsYWJlbCBjbGFzcz0nY29sLXNtLTQgY29udHJvbC1sYWJlbCc+U3RhbmQgRGV2PC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgdHNmKGQuc2QpICsgXCI8L3A+PC9kaXY+PC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPk1heGltdW08L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyB0c2YoZC5tYXgpICsgXCI8L3A+PC9kaXY+PC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPk1pbmltdW08L2xhYmVsPjxkaXYgY2xhc3M9J2NvbC1zbS02Jz48cCBjbGFzcz0nZm9ybS1jb250cm9sLXN0YXRpYyc+XCIgKyB0c2YoZC5taW4pICsgXCI8L3A+PC9kaXY+PC9kaXY+XCIgK1xuICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdmb3JtLWdyb3VwJz48bGFiZWwgY2xhc3M9J2NvbC1zbS00IGNvbnRyb2wtbGFiZWwnPlZhbGlkPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgcmludChkLnZhbGlkKSArIFwiPC9wPjwvZGl2PjwvZGl2PlwiICtcbiAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nZm9ybS1ncm91cCc+PGxhYmVsIGNsYXNzPSdjb2wtc20tNCBjb250cm9sLWxhYmVsJz5JbnZhbGlkPC9sYWJlbD48ZGl2IGNsYXNzPSdjb2wtc20tNic+PHAgY2xhc3M9J2Zvcm0tY29udHJvbC1zdGF0aWMnPlwiICsgcmludChkLmludmFsaWQpICsgXCI8L3A+PC9kaXY+PC9kaXY+XCJcbiAgICAgICAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhbmVsUGxvdHMoKSB7XG4gICAgLy8gYnVpbGQgYXJyYXlzIGZyb20gbm9kZXMgaW4gbWFpblxuICAgIGxldCB2YXJzID0gW107XG4gICAgbGV0IGlkcyA9IFtdO1xuICAgIG5vZGVzLmZvckVhY2gobiA9PiB7XG4gICAgICAgIHZhcnMucHVzaChuLm5hbWUucmVwbGFjZSgvXFwofFxcKS9nLCAnJykpO1xuICAgICAgICBpZHMucHVzaChuLmlkKTtcbiAgICB9KTtcblxuICAgIC8vcmVtb3ZlIGFsbCBwbG90cywgY291bGQgYmUgc21hcnRlciBoZXJlXG4gICAgZDMuc2VsZWN0KCcjc2V0eCcpLnNlbGVjdEFsbCgnc3ZnJykucmVtb3ZlKCk7XG4gICAgZDMuc2VsZWN0KCcjdGFiMicpLnNlbGVjdEFsbCgnc3ZnJykucmVtb3ZlKCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2YXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBub2RlID0gYWxsTm9kZXNbaWRzW2ldXTtcbiAgICAgICAgbm9kZS5zZXR4cGxvdCA9IGZhbHNlO1xuICAgICAgICBub2RlLnN1YnNldHBsb3QgPSBmYWxzZTtcbiAgICAgICAgaWYgKG5vZGUucGxvdHR5cGUgPT09IFwiY29udGludW91c1wiICYgbm9kZS5zZXR4cGxvdCA9PSBmYWxzZSkge1xuICAgICAgICAgICAgbm9kZS5zZXR4cGxvdCA9IHRydWU7XG4gICAgICAgICAgICBkZW5zaXR5KG5vZGUsIGRpdiA9IFwic2V0eFwiLCBwcml2KTtcbiAgICAgICAgICAgIG5vZGUuc3Vic2V0cGxvdCA9IHRydWU7XG4gICAgICAgICAgICBkZW5zaXR5KG5vZGUsIGRpdiA9IFwic3Vic2V0XCIsIHByaXYpO1xuICAgICAgICB9IGVsc2UgaWYgKG5vZGUucGxvdHR5cGUgPT09IFwiYmFyXCIgJiBub2RlLnNldHhwbG90ID09IGZhbHNlKSB7XG4gICAgICAgICAgICBub2RlLnNldHhwbG90ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJhcnMobm9kZSwgZGl2ID0gXCJzZXR4XCIsIHByaXYpO1xuICAgICAgICAgICAgbm9kZS5zdWJzZXRwbG90ID0gdHJ1ZTtcbiAgICAgICAgICAgIGJhcnNTdWJzZXQobm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBkMy5zZWxlY3QoXCIjc2V0eFwiKS5zZWxlY3RBbGwoXCJzdmdcIilcbiAgICAgICAgLmVhY2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIHJlZ3N0ciA9IC8oLispX3NldHhfKFxcZCspLztcbiAgICAgICAgICAgIHZhciBteW5hbWUgPSByZWdzdHIuZXhlYyh0aGlzLmlkKTtcbiAgICAgICAgICAgIHZhciBub2RlaWQgPSBteW5hbWVbMl07XG4gICAgICAgICAgICBteW5hbWUgPSBteW5hbWVbMV07XG4gICAgICAgICAgICBpZiAoIXZhcnMuaW5jbHVkZXMobXluYW1lKSkge1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzW25vZGVpZF0uc2V0eHBsb3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBsZXQgdGVtcCA9IFwiI1wiLmNvbmNhdChteW5hbWUsIFwiX3NldHhfXCIsIG5vZGVpZCk7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRlbXApXG4gICAgICAgICAgICAgICAgICAgIC5yZW1vdmUoKTtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tub2RlaWRdLnN1YnNldHBsb3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB0ZW1wID0gXCIjXCIuY29uY2F0KG15bmFtZSwgXCJfdGFiMl9cIiwgbm9kZWlkKTtcbiAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGVtcClcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbn1cblxuLy8gZWFzeSBmdW5jdGlvbnMgdG8gY29sbGFwc2UgcGFuZWxzIHRvIGJhc2VcbmZ1bmN0aW9uIHJpZ2h0cGFuZWxNZWRpdW0oKSB7XG4gICAgZDMuc2VsZWN0KFwiI3JpZ2h0cGFuZWxcIilcbiAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcInNpZGVwYW5lbCBjb250YWluZXIgY2xlYXJmaXhcIik7XG59XG5cbmZ1bmN0aW9uIGxlZnRwYW5lbE1lZGl1bSgpIHtcbiAgICBkMy5zZWxlY3QoXCIjbGVmdHBhbmVsXCIpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJzaWRlcGFuZWwgY29udGFpbmVyIGNsZWFyZml4XCIpO1xufVxuXG4vLyBjb252ZXJ0cyBjb2xvciBjb2Rlc1xuZXhwb3J0IGxldCBoZXhUb1JnYmEgPSBoZXggPT4ge1xuICAgIGxldCBpbnQgPSBwYXJzZUludChoZXgucmVwbGFjZSgnIycsICcnKSwgMTYpO1xuICAgIHJldHVybiBgcmdiYSgke1soaW50ID4+IDE2KSAmIDI1NSwgKGludCA+PiA4KSAmIDI1NSwgaW50ICYgMjU1LCAnMC41J10uam9pbignLCcpfSlgO1xufTtcblxuLy8gdGFrZXMgbm9kZSBhbmQgY29sb3IgYW5kIHVwZGF0ZXMgenBhcmFtc1xuZnVuY3Rpb24gc2V0Q29sb3JzKG4sIGMpIHtcbiAgICBpZiAobi5zdHJva2VXaWR0aCA9PSAnMScpIHtcbiAgICAgICAgLy8gYWRkaW5nIHRpbWUsIGNzLCBkdiwgbm9tIHRvIG5vZGUgd2l0aCBubyBzdHJva2VcbiAgICAgICAgbi5zdHJva2VXaWR0aCA9ICc0JztcbiAgICAgICAgbi5zdHJva2VDb2xvciA9IGM7XG4gICAgICAgIG4ubm9kZUNvbCA9IHRhZ2dlZENvbG9yO1xuICAgICAgICBsZXQgcHVzaCA9IChbY29sb3IsIGtleV0pID0+IHtcbiAgICAgICAgICAgIGlmIChjb2xvciAhPSBjKVxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIHpwYXJhbXNba2V5XSA9IEFycmF5LmlzQXJyYXkoenBhcmFtc1trZXldKSA/IHpwYXJhbXNba2V5XSA6IFtdO1xuICAgICAgICAgICAgenBhcmFtc1trZXldLnB1c2gobi5uYW1lKTtcbiAgICAgICAgICAgIGlmIChrZXkgPT0gJ3pub20nKSB7XG4gICAgICAgICAgICAgICAgZmluZE5vZGVJbmRleChuLm5hbWUsIHRydWUpLm5hdHVyZSA9IFwibm9taW5hbFwiO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybShuLm5hbWUsIHQgPSBudWxsLCB0eXBlVHJhbnNmb3JtID0gdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIFtbZHZDb2xvciwgJ3pkdiddLCBbY3NDb2xvciwgJ3pjcm9zcyddLCBbdGltZUNvbG9yLCAnenRpbWUnXSwgW25vbUNvbG9yLCAnem5vbSddXS5mb3JFYWNoKHB1c2gpO1xuICAgIH0gZWxzZSBpZiAobi5zdHJva2VXaWR0aCA9PSAnNCcpIHtcbiAgICAgICAgaWYgKGMgPT0gbi5zdHJva2VDb2xvcikgeyAvLyBkZXNlbGVjdGluZyB0aW1lLCBjcywgZHYsIG5vbVxuICAgICAgICAgICAgbi5zdHJva2VXaWR0aCA9ICcxJztcbiAgICAgICAgICAgIG4uc3Ryb2tlQ29sb3IgPSBzZWxWYXJDb2xvcjtcbiAgICAgICAgICAgIG4ubm9kZUNvbCA9IGNvbG9ycyhuLmlkKTtcbiAgICAgICAgICAgIHNwbGljZShjLCBuLm5hbWUsIFtkdkNvbG9yLCAnemR2J10sIFtjc0NvbG9yLCAnemNyb3NzJ10sIFt0aW1lQ29sb3IsICd6dGltZSddLCBbbm9tQ29sb3IsICd6bm9tJ10pO1xuICAgICAgICAgICAgaWYgKG5vbUNvbG9yID09IGMgJiYgenBhcmFtcy56bm9tLmluY2x1ZGVzKG4ubmFtZSkpIHtcbiAgICAgICAgICAgICAgICBmaW5kTm9kZUluZGV4KG4ubmFtZSwgdHJ1ZSkubmF0dXJlID0gZmluZE5vZGVJbmRleChuLm5hbWUsIHRydWUpLmRlZmF1bHROYXR1cmU7XG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtKG4ubmFtZSwgdCA9IG51bGwsIHR5cGVUcmFuc2Zvcm0gPSB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gZGVzZWxlY3RpbmcgdGltZSwgY3MsIGR2LCBub20gQU5EIGNoYW5naW5nIGl0IHRvIHRpbWUsIGNzLCBkdiwgbm9tXG4gICAgICAgICAgICBzcGxpY2Uobi5zdHJva2VDb2xvciwgbi5uYW1lLCBbZHZDb2xvciwgJ3pkdiddLCBbY3NDb2xvciwgJ3pjcm9zcyddLCBbdGltZUNvbG9yLCAnenRpbWUnXSwgW25vbUNvbG9yLCAnem5vbSddKTtcbiAgICAgICAgICAgIGlmIChub21Db2xvciA9PSBuLnN0cm9rZUNvbG9yICYmIHpwYXJhbXMuem5vbS5pbmNsdWRlcyhuLm5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZmluZE5vZGVJbmRleChuLm5hbWUsIHRydWUpLm5hdHVyZSA9IGZpbmROb2RlSW5kZXgobi5uYW1lLCB0cnVlKS5kZWZhdWx0TmF0dXJlO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybShuLm5hbWUsIHQgPSBudWxsLCB0eXBlVHJhbnNmb3JtID0gdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuLnN0cm9rZUNvbG9yID0gYztcbiAgICAgICAgICAgIGlmIChkdkNvbG9yID09IGMpIHpwYXJhbXMuemR2LnB1c2gobi5uYW1lKTtcbiAgICAgICAgICAgIGVsc2UgaWYgKGNzQ29sb3IgPT0gYykgenBhcmFtcy56Y3Jvc3MucHVzaChuLm5hbWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAodGltZUNvbG9yID09IGMpIHpwYXJhbXMuenRpbWUucHVzaChuLm5hbWUpO1xuICAgICAgICAgICAgZWxzZSBpZiAobm9tQ29sb3IgPT0gYykge1xuICAgICAgICAgICAgICAgIHpwYXJhbXMuem5vbS5wdXNoKG4ubmFtZSk7XG4gICAgICAgICAgICAgICAgZmluZE5vZGVJbmRleChuLm5hbWUsIHRydWUpLm5hdHVyZSA9IFwibm9taW5hbFwiO1xuICAgICAgICAgICAgICAgIHRyYW5zZm9ybShuLm5hbWUsIHQgPSBudWxsLCB0eXBlVHJhbnNmb3JtID0gdHJ1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBib3JkZXJTdGF0ZSgpIHtcbiAgICB6cGFyYW1zLnpkdi5sZW5ndGggPiAwID9cbiAgICAgICAgJCgnI2R2QnV0dG9uIC5yZWN0Q29sb3Igc3ZnIGNpcmNsZScpLmF0dHIoJ3N0cm9rZScsIGR2Q29sb3IpIDpcbiAgICAgICAgJCgnI2R2QnV0dG9uJykuY3NzKCdib3JkZXItY29sb3InLCAnI2NjYycpO1xuICAgIHpwYXJhbXMuemNyb3NzLmxlbmd0aCA+IDAgP1xuICAgICAgICAkKCcjY3NCdXR0b24gLnJlY3RDb2xvciBzdmcgY2lyY2xlJykuYXR0cignc3Ryb2tlJywgY3NDb2xvcikgOlxuICAgICAgICAkKCcjY3NCdXR0b24nKS5jc3MoJ2JvcmRlci1jb2xvcicsICcjY2NjJyk7XG4gICAgenBhcmFtcy56dGltZS5sZW5ndGggPiAwID9cbiAgICAgICAgJCgnI3RpbWVCdXR0b24gLnJlY3RDb2xvciBzdmcgY2lyY2xlJykuYXR0cignc3Ryb2tlJywgdGltZUNvbG9yKSA6XG4gICAgICAgICQoJyN0aW1lQnV0dG9uJykuY3NzKCdib3JkZXItY29sb3InLCAnI2NjYycpO1xuICAgIHpwYXJhbXMuem5vbS5sZW5ndGggPiAwID9cbiAgICAgICAgJCgnI25vbUJ1dHRvbiAucmVjdENvbG9yIHN2ZyBjaXJjbGUnKS5hdHRyKCdzdHJva2UnLCBub21Db2xvcikgOlxuICAgICAgICAkKCcjbm9tQnV0dG9uJykuY3NzKCdib3JkZXItY29sb3InLCAnI2NjYycpO1xufVxuXG4vLyBzbWFsbCBhcHBlYXJhbmNlIHJlc2V0cywgYnV0IHBlcmhhcHMgdGhpcyB3aWxsIGJlY29tZSBhIGhhcmQgcmVzZXQgYmFjayB0byBhbGwgb3JpZ2luYWwgYWxsTm9kZSB2YWx1ZXM/XG5mdW5jdGlvbiBub2RlUmVzZXQobikge1xuICAgIG4uc3Ryb2tlQ29sb3IgPSBzZWxWYXJDb2xvcjtcbiAgICBuLnN0cm9rZVdpZHRoID0gXCIxXCI7XG4gICAgbi5ub2RlQ29sID0gbi5iYXNlQ29sO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc3Vic2V0U2VsZWN0KGJ0bikge1xuICAgIGlmIChkYXRhdXJsKVxuICAgICAgICB6cGFyYW1zLnpkYXRhdXJsID0gZGF0YXVybDtcbiAgICBpZiAocHJvZHVjdGlvbiAmJiB6cGFyYW1zLnpzZXNzaW9uaWQgPT0gXCJcIikge1xuICAgICAgICBhbGVydChcIldhcm5pbmc6IERhdGEgZG93bmxvYWQgaXMgbm90IGNvbXBsZXRlLiBUcnkgYWdhaW4gc29vbi5cIik7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgenBhcmFtcy56dmFycyA9IFtdO1xuICAgIHpwYXJhbXMuenBsb3QgPSBbXTtcbiAgICB2YXIgc3Vic2V0RW1wdHkgPSB0cnVlO1xuICAgIC8vIGlzIHRoaXMgdGhlIHNhbWUgYXMgelBvcCgpP1xuICAgIGZvciAodmFyIGogPSAwOyBqIDwgbm9kZXMubGVuZ3RoOyBqKyspIHsgLy8gcG9wdWxhdGUgenZhcnMgYW5kIHpzdWJzZXQgYXJyYXlzXG4gICAgICAgIHpwYXJhbXMuenZhcnMucHVzaChub2Rlc1tqXS5uYW1lKTtcbiAgICAgICAgdmFyIHRlbXAgPSBub2Rlc1tqXS5pZDtcbiAgICAgICAgenBhcmFtcy56c3Vic2V0W2pdID0gYWxsTm9kZXNbdGVtcF0uc3Vic2V0cmFuZ2U7XG4gICAgICAgIGlmICh6cGFyYW1zLnpzdWJzZXRbal0ubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgaWYgKHpwYXJhbXMuenN1YnNldFtqXVswXSAhPSBcIlwiKVxuICAgICAgICAgICAgICAgIHpwYXJhbXMuenN1YnNldFtqXVswXSA9IE51bWJlcih6cGFyYW1zLnpzdWJzZXRbal1bMF0pO1xuICAgICAgICAgICAgaWYgKHpwYXJhbXMuenN1YnNldFtqXVsxXSAhPSBcIlwiKVxuICAgICAgICAgICAgICAgIHpwYXJhbXMuenN1YnNldFtqXVsxXSA9IE51bWJlcih6cGFyYW1zLnpzdWJzZXRbal1bMV0pO1xuICAgICAgICB9XG4gICAgICAgIHpwYXJhbXMuenBsb3QucHVzaChhbGxOb2Rlc1t0ZW1wXS5wbG90dHlwZSk7XG4gICAgICAgIGlmICh6cGFyYW1zLnpzdWJzZXRbal1bMV0gIT0gXCJcIilcbiAgICAgICAgICAgIHN1YnNldEVtcHR5ID0gZmFsc2U7IC8vIG9ubHkgbmVlZCB0byBjaGVjayBvbmVcbiAgICB9XG5cbiAgICBpZiAoc3Vic2V0RW1wdHkgPT0gdHJ1ZSkge1xuICAgICAgICBhbGVydChcIldhcm5pbmc6IE5vIG5ldyBzdWJzZXQgc2VsZWN0ZWQuXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgdmFyIG91dHR5cGVzID0gW107XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCBhbGxOb2Rlcy5sZW5ndGg7IGorKykge1xuICAgICAgICBvdXR0eXBlcy5wdXNoKHtcbiAgICAgICAgICAgIHZhcm5hbWVzVHlwZXM6IGFsbE5vZGVzW2pdLm5hbWUsXG4gICAgICAgICAgICBuYXR1cmU6IGFsbE5vZGVzW2pdLm5hdHVyZSxcbiAgICAgICAgICAgIG51bWNoYXI6IGFsbE5vZGVzW2pdLm51bWNoYXIsXG4gICAgICAgICAgICBiaW5hcnk6IGFsbE5vZGVzW2pdLmJpbmFyeSxcbiAgICAgICAgICAgIGludGVydmFsOiBhbGxOb2Rlc1tqXS5pbnRlcnZhbFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgc3Vic2V0c3R1ZmYgPSB7XG4gICAgICAgIHpkYXRhdXJsOiB6cGFyYW1zLnpkYXRhdXJsLFxuICAgICAgICB6dmFyczogenBhcmFtcy56dmFycyxcbiAgICAgICAgenN1YnNldDogenBhcmFtcy56c3Vic2V0LFxuICAgICAgICB6c2Vzc2lvbmlkOiB6cGFyYW1zLnpzZXNzaW9uaWQsXG4gICAgICAgIHpwbG90OiB6cGFyYW1zLnpwbG90LFxuICAgICAgICBjYWxsSGlzdG9yeTogY2FsbEhpc3RvcnksXG4gICAgICAgIHR5cGVTdHVmZjogb3V0dHlwZXNcbiAgICB9O1xuXG4gICAgdmFyIGpzb25vdXQgPSBKU09OLnN0cmluZ2lmeShzdWJzZXRzdHVmZik7XG4gICAgdmFyIHVybGNhbGwgPSByYXBwVVJMICsgXCJzdWJzZXRhcHBcIjtcbiAgICB2YXIgc29sYWpzb25vdXQgPSBcInNvbGFKU09OPVwiICsganNvbm91dDtcbiAgICBjZGIoXCJ1cmxjYWxsIG91dDogXCIsIHVybGNhbGwpO1xuICAgIGNkYihcIlBPU1Qgb3V0OiBcIiwgc29sYWpzb25vdXQpO1xuXG4gICAgZnVuY3Rpb24gc3Vic2V0U2VsZWN0U3VjY2VzcyhidG4sIGpzb24pIHtcbiAgICAgICAgc2VsZWN0TGFkZGEuc3RvcCgpOyAvLyBzdG9wIG1vdGlvblxuICAgICAgICAkKFwiI2J0blZhcmlhYmxlc1wiKS50cmlnZ2VyKFwiY2xpY2tcIik7IC8vIHByb2dyYW1tYXRpYyBjbGlja3NcbiAgICAgICAgJChcIiNidG5Nb2RlbHNcIikudHJpZ2dlcihcImNsaWNrXCIpO1xuXG4gICAgICAgIHZhciBncmF5T3V0cyA9IFtdO1xuICAgICAgICB2YXIgckNhbGwgPSBbXTtcbiAgICAgICAgckNhbGxbMF0gPSBqc29uLmNhbGw7XG5cbiAgICAgICAgLy8gc3RvcmUgY29udGVudHMgb2YgdGhlIHByZS1zdWJzZXQgc3BhY2VcbiAgICAgICAgelBvcCgpO1xuICAgICAgICB2YXIgbXlOb2RlcyA9IGpRdWVyeS5leHRlbmQodHJ1ZSwgW10sIGFsbE5vZGVzKTtcbiAgICAgICAgdmFyIG15UGFyYW1zID0galF1ZXJ5LmV4dGVuZCh0cnVlLCB7fSwgenBhcmFtcyk7XG4gICAgICAgIHZhciBteVRyYW5zID0galF1ZXJ5LmV4dGVuZCh0cnVlLCBbXSwgdHJhbnMpO1xuICAgICAgICB2YXIgbXlGb3JjZSA9IGpRdWVyeS5leHRlbmQodHJ1ZSwgW10sIGZvcmNldG9nZ2xlKTtcbiAgICAgICAgdmFyIG15UHJlcHJvY2VzcyA9IGpRdWVyeS5leHRlbmQodHJ1ZSwge30sIHByZXByb2Nlc3MpO1xuICAgICAgICB2YXIgbXlMb2cgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIFtdLCBsb2dBcnJheSk7XG4gICAgICAgIHZhciBteUhpc3RvcnkgPSBqUXVlcnkuZXh0ZW5kKHRydWUsIFtdLCBjYWxsSGlzdG9yeSk7XG5cbiAgICAgICAgc3BhY2VzW215c3BhY2VdID0ge1xuICAgICAgICAgICAgXCJhbGxOb2Rlc1wiOiBteU5vZGVzLFxuICAgICAgICAgICAgXCJ6cGFyYW1zXCI6IG15UGFyYW1zLFxuICAgICAgICAgICAgXCJ0cmFuc1wiOiBteVRyYW5zLFxuICAgICAgICAgICAgXCJmb3JjZVwiOiBteUZvcmNlLFxuICAgICAgICAgICAgXCJwcmVwcm9jZXNzXCI6IG15UHJlcHJvY2VzcyxcbiAgICAgICAgICAgIFwibG9nQXJyYXlcIjogbXlMb2csXG4gICAgICAgICAgICBcImNhbGxIaXN0b3J5XCI6IG15SGlzdG9yeVxuICAgICAgICB9O1xuXG4gICAgICAgIC8vIHJlbW92ZSBwcmUtc3Vic2V0IHN2Z1xuICAgICAgICB2YXIgc2VsZWN0TWUgPSBcIiNtXCIuY29uY2F0KG15c3BhY2UpO1xuICAgICAgICBkMy5zZWxlY3Qoc2VsZWN0TWUpLmF0dHIoJ2NsYXNzJywgJ2l0ZW0nKTtcbiAgICAgICAgc2VsZWN0TWUgPSBcIiN3aGl0ZXNwYWNlXCIuY29uY2F0KG15c3BhY2UpO1xuICAgICAgICBkMy5zZWxlY3Qoc2VsZWN0TWUpLnJlbW92ZSgpO1xuXG4gICAgICAgIG15c3BhY2UgPSBzcGFjZXMubGVuZ3RoO1xuICAgICAgICBjYWxsSGlzdG9yeS5wdXNoKHtcbiAgICAgICAgICAgIGZ1bmM6IFwic3Vic2V0XCIsXG4gICAgICAgICAgICB6dmFyczogalF1ZXJ5LmV4dGVuZCh0cnVlLCBbXSwgenBhcmFtcy56dmFycyksXG4gICAgICAgICAgICB6c3Vic2V0OiBqUXVlcnkuZXh0ZW5kKHRydWUsIFtdLCB6cGFyYW1zLnpzdWJzZXQpLFxuICAgICAgICAgICAgenBsb3Q6IGpRdWVyeS5leHRlbmQodHJ1ZSwgW10sIHpwYXJhbXMuenBsb3QpXG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIHRoaXMgaXMgdG8gYmUgdXNlZCB0byBncmF5IG91dCBhbmQgcmVtb3ZlIGxpc3RlbmVycyBmb3IgdmFyaWFibGVzIHRoYXQgaGF2ZSBiZWVuIHN1YnNldHRlZCBvdXQgb2YgdGhlIGRhdGFcbiAgICAgICAgZnVuY3Rpb24gdmFyT3V0KHYpIHtcbiAgICAgICAgICAgIC8vIGlmIGluIG5vZGVzLCByZW1vdmUgZ3JheSBvdXQgaW4gbGVmdCBwYW5lbFxuICAgICAgICAgICAgLy8gbWFrZSB1bmNsaWNrYWJsZSBpbiBsZWZ0IHBhbmVsXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHYubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0TWUgPSB2W2ldLnJlcGxhY2UoL1xcVy9nLCBcIl9cIik7XG4gICAgICAgICAgICAgICAgYnlJZChzZWxlY3RNZSkuc3R5bGUuY29sb3IgPSBoZXhUb1JnYmEoZ3JheUNvbG9yKTtcbiAgICAgICAgICAgICAgICBzZWxlY3RNZSA9IFwicCNcIi5jb25jYXQoc2VsZWN0TWUpO1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChzZWxlY3RNZSlcbiAgICAgICAgICAgICAgICAgICAgLm9uKFwiY2xpY2tcIiwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBzaG93TG9nKCdzdWJzZXQnLCByQ2FsbCk7XG4gICAgICAgIHJlV3JpdGVMb2coKTtcblxuICAgICAgICBkMy5zZWxlY3QoXCIjaW5uZXJjYXJvdXNlbFwiKVxuICAgICAgICAgICAgLmFwcGVuZCgnZGl2JylcbiAgICAgICAgICAgIC5hdHRyKCdjbGFzcycsICdpdGVtIGFjdGl2ZScpXG4gICAgICAgICAgICAuYXR0cignaWQnLCAoKSA9PiBcIm1cIi5jb25jYXQobXlzcGFjZS50b1N0cmluZygpKSlcbiAgICAgICAgICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgICAgICAgICAuYXR0cignaWQnLCAnd2hpdGVzcGFjZScpO1xuICAgICAgICBzdmcgPSBkMy5zZWxlY3QoXCIjd2hpdGVzcGFjZVwiKTtcblxuICAgICAgICBkMy5qc29uKGpzb24udXJsLCBmdW5jdGlvbihlcnJvciwganNvbikge1xuICAgICAgICAgICAgaWYgKGVycm9yKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gY29uc29sZS53YXJuKGVycm9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBqc29uZGF0YSA9IGdldFZhcmlhYmxlRGF0YShqc29uKTtcblxuICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGpzb25kYXRhKSB7XG4gICAgICAgICAgICAgICAgdmFyIG15SW5kZXggPSBmaW5kTm9kZUluZGV4KGtleSk7XG5cbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5wbG90eCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5wbG90eSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5wbG90dmFsdWVzID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzW215SW5kZXhdLnBsb3R0eXBlID0gXCJcIjtcblxuICAgICAgICAgICAgICAgIGpRdWVyeS5leHRlbmQodHJ1ZSwgYWxsTm9kZXNbbXlJbmRleF0sIGpzb25kYXRhW2tleV0pO1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzW215SW5kZXhdLnN1YnNldHBsb3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5zdWJzZXRyYW5nZSA9IFtcIlwiLCBcIlwiXTtcbiAgICAgICAgICAgICAgICBhbGxOb2Rlc1tteUluZGV4XS5zZXR4cGxvdCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGFsbE5vZGVzW215SW5kZXhdLnNldHh2YWxzID0gW1wiXCIsIFwiXCJdO1xuXG4gICAgICAgICAgICAgICAgaWYgKGFsbE5vZGVzW215SW5kZXhdLnZhbGlkID09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgZ3JheU91dHMucHVzaChhbGxOb2Rlc1tteUluZGV4XS5uYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgYWxsTm9kZXNbbXlJbmRleF0uZ3JheW91dCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmVQbG90KCk7XG5cbiAgICAgICAgICAgIGxheW91dChsYXlvdXRBZGQpO1xuICAgICAgICB9KTtcblxuICAgICAgICB2YXJPdXQoZ3JheU91dHMpO1xuICAgIH1cblxuICAgIHNlbGVjdExhZGRhLnN0YXJ0KCk7IC8vc3RhcnQgYnV0dG9uIG1vdGlvblxuICAgIG1ha2VDb3JzUmVxdWVzdCh1cmxjYWxsLCBidG4sIHN1YnNldFNlbGVjdFN1Y2Nlc3MsIGJ0biA9PiBzZWxlY3RMYWRkYS5zdG9wKCksIHNvbGFqc29ub3V0KTtcbn1cblxuZnVuY3Rpb24gcmVhZFByZXByb2Nlc3ModXJsLCBwLCB2LCBjYWxsYmFjaykge1xuICBjZGIoJ3JlYWRQcmVwcm9jZXNzOiAnICsgdXJsICk7XG5cbiAgICBkMy5qc29uKHVybCwgKGVyciwganNvbikgPT4ge1xuICAgICAgICBpZiAoZXJyKVxuICAgICAgICAgICAgcmV0dXJuIGNvbnNvbGUud2FybihlcnIpO1xuICAgICAgICBjZGIoJ2luc2lkZSByZWFkUHJlcHJvY2VzcyBmdW5jdGlvbicpO1xuICAgICAgICBjZGIoanNvbik7XG5cbiAgICAgICAgcHJpdiA9IGpzb24uZGF0YXNldC5wcml2IHx8IHByaXY7XG4gICAgICAgIC8vIGNvcHkgb2JqZWN0XG4gICAgICAgIE9iamVjdC5rZXlzKGpzb24udmFyaWFibGVzKS5mb3JFYWNoKGsgPT4gcFtrXSA9IGpzb24udmFyaWFibGVzW2tdKTtcbiAgICAgICAgaWYgKHR5cGVvZiBjYWxsYmFjayA9PSAnZnVuY3Rpb24nKSBjYWxsYmFjaygpO1xuICAgIH0pO1xufVxuXG4vLyByZW1vdmVzIGFsbCB0aGUgY2hpbGRyZW4gc3ZncyBpbnNpZGUgc3Vic2V0IGFuZCBzZXR4IGRpdnNcbmZ1bmN0aW9uIHJlUGxvdCgpIHtcbiAgICBkMy5zZWxlY3QoJyN0YWIyJylcbiAgICAgICAgLnNlbGVjdEFsbCgnc3ZnJylcbiAgICAgICAgLnJlbW92ZSgpO1xuICAgIGQzLnNlbGVjdCgnI3NldHgnKVxuICAgICAgICAuc2VsZWN0QWxsKCdzdmcnKVxuICAgICAgICAucmVtb3ZlKCk7XG4gICAgYWxsTm9kZXMuZm9yRWFjaChuID0+IG4uc2V0eHBsb3QgPSBuLnN1YnNldHBsb3QgPSBmYWxzZSk7XG59XG5cbmxldCBzaG93TG9nID0gKHZhbCwgckNhbGwpID0+IHtcbiAgICBsb2dBcnJheS5wdXNoKCh2YWwgKyAnOiAnKS5jb25jYXQockNhbGxbMF0pKTtcbiAgICBtLnJlZHJhdygpO1xufVxuXG5mdW5jdGlvbiByZVdyaXRlTG9nKCkge1xuICAgIGQzLnNlbGVjdChcIiNjb2xsYXBzZUxvZyBkaXYucGFuZWwtYm9keVwiKS5zZWxlY3RBbGwoXCJwXCIpXG4gICAgICAgIC5yZW1vdmUoKTtcbiAgICBkMy5zZWxlY3QoXCIjY29sbGFwc2VMb2cgZGl2LnBhbmVsLWJvZHlcIikuc2VsZWN0QWxsKFwicFwiKVxuICAgICAgICAuZGF0YShsb2dBcnJheSlcbiAgICAgICAgLmVudGVyKClcbiAgICAgICAgLmFwcGVuZChcInBcIilcbiAgICAgICAgLnRleHQoZCA9PiBkKTtcbn1cblxuLy8gYWN0cyBhcyBpZiB0aGUgdXNlciBjbGlja2VkIGluIHdoaXRlc3BhY2UuIHVzZWZ1bCB3aGVuIHJlc3RhcnQoKSBpcyBvdXRzaWRlIG9mIHNjb3BlXG5leHBvcnQgbGV0IGZha2VDbGljayA9ICgpID0+IHtcbiAgICBsZXQgd3MgPSBcIiN3aGl0ZXNwYWNlXCIuY29uY2F0KG15c3BhY2UpO1xuICAgIC8vIGQzIGFuZCBwcm9ncmFtbWF0aWMgZXZlbnRzIGRvbid0IG1lc2ggd2VsbCwgaGVyZSdzIGEgU08gd29ya2Fyb3VuZCB0aGF0IGxvb2tzIGdvb2QgYnV0IHVzZXMganF1ZXJ5Li4uXG4gICAgalF1ZXJ5LmZuLmQzQ2xpY2sgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdGhpcy5lYWNoKChpLCBlKSA9PiB7XG4gICAgICAgICAgICBsZXQgZXZ0ID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoXCJNb3VzZUV2ZW50c1wiKTtcbiAgICAgICAgICAgIGV2dC5pbml0TW91c2VFdmVudChcIm1vdXNlZG93blwiLCB0cnVlLCB0cnVlLCB3aW5kb3csIDAsIDAsIDAsIDAsIDAsIGZhbHNlLCBmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCBudWxsKTtcbiAgICAgICAgICAgIGUuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgICQod3MpLmQzQ2xpY2soKTtcbiAgICBkMy5zZWxlY3Qod3MpXG4gICAgICAgIC5jbGFzc2VkKCdhY3RpdmUnLCBmYWxzZSk7XG59O1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2FwcC9hcHAuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){"use strict";eval('\n\nObject.defineProperty(exports, "__esModule", {\n    value: true\n});\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();\n\nexports.density = density;\nexports.bars = bars;\nexports.barsSubset = barsSubset;\nexports.densityNode = densityNode;\nexports.barsNode = barsNode;\nvar d3Color = \'#1f77b4\'; // d3\'s default blue\nvar selVarColor = exports.selVarColor = \'#fa8072\'; // d3.rgb("salmon");\n\n// function to use d3 to graph density plots with preprocessed data\nfunction density(node, div, priv) {\n    div = { subset: \'#tab2\', setx: \'#setx\', varSummary: \'#tab3\' }[div];\n    if (!div) return alert("Error: incorrect div selected for plots");\n\n    var _ref = [node.plotx, node.ploty],\n        xVals = _ref[0],\n        yVals = _ref[1];\n\n    if (priv && node.plotCI) {\n        var _map = [\'upperBound\', \'lowerBound\'].map(function (bound) {\n            return xVals.map(function (x, i) {\n                return { x: +x, y: +node.plotCI[bound][i] };\n            });\n        }),\n            _map2 = _slicedToArray(_map, 2),\n            _upperError = _map2[0],\n            _lowerError = _map2[1];\n\n        console.log(\'upperError\\n\', _upperError);\n    }\n\n    var tempWidth = d3.select(div).style("width");\n    var width = tempWidth.substring(0, tempWidth.length - 2);\n    var tempHeight = d3.select(div).style("height");\n    var height = tempHeight.substring(0, tempHeight.length - 2);\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 30\n    };\n\n    // Need to fix automatic width and height settings for leftpanel (#tab2, #tab3)\n    if (div == "#tab3") {\n        width = 0.7 * (width - margin.left - margin.right), height = 0.3 * (height - margin.top - margin.bottom);\n    } else if (div == "#tab2" | div == "#setx") {\n        width = 200;\n        height = 120;\n    } else {\n        width = 0.35 * (width - margin.left - margin.right), height = 0.25 * (height - margin.top - margin.bottom);\n    };\n\n    var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width]);\n    var invx = d3.scale.linear().range([d3.min(xVals), d3.max(xVals)]).domain([0, width]);\n    var y = d3.scale.linear().domain([d3.min(yVals), d3.max(yVals)]).range([height, 0]);\n    var xAxis = d3.svg.axis().scale(x).ticks(5).orient("bottom");\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n    var brush = d3.svg.brush().x(x).extent(node.subsetrange).on("brush", brushed);\n    var brush2 = d3.svg.brush().x(x).on("brush", brushed2);\n    var area = d3.svg.area().interpolate("monotone").x(function (d) {\n        return x(d.x);\n    }).y0(height).y1(function (d) {\n        return y(d.y);\n    });\n    var line = d3.svg.line().x(function (d) {\n        return x(d.x);\n    }).y(function (d) {\n        return y(d.y);\n    }).interpolate("monotone");\n\n    // cumbersome to treat "tab3" differently, but works for now\n    // tab3, has an issue, that unless width height hardcoded, they grow with each additional graph.\n    if (div == "#tab3") {\n        var plotsvg = d3.select(div).selectAll("svg").remove();\n        plotsvg = d3.select(div).append("svg").attr("id", function () {\n            return node.name.toString().concat(div.substr(1));\n        }).style("width", 300) // set height to the height of #main.left\n        .style("height", 200).append("g").attr("transform", \'translate(\' + margin.left + \',\' + margin.top + \')\');\n    } else {\n        var plotsvg = d3.select(div).append("svg").attr("id", function () {\n            return node.name.toString().replace(/\\(|\\)/g, "").concat("_", div.substr(1), "_", node.id);\n        }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n        .style("height", height + margin.top + margin.bottom).append("g").attr("transform", \'translate(\' + margin.left + \',\' + margin.top + \')\');\n    };\n    plotsvg.append("path").datum(xVals.map(function (x, i) {\n        return { x: +x, y: +node.ploty[i] };\n    })).attr("class", "area").attr("d", area);\n\n    //add upper bound\n    priv && node.plotCI && plotsvg.append("path").attr("class", "upperError").datum(upperError).attr("d", area);\n\n    //add lower bound\n    priv && node.plotCI && plotsvg.append("path").attr("class", "lowerError").datum(lowerError).attr("d", area);\n\n    plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(node.name);\n\n    // add brush if subset\n    if (div == "#tab2") {\n        plotsvg.append("text").attr("id", "range").attr("x", 25).attr("y", height + 40).text(function () {\n            return "Range: ".concat(d3.min(xVals).toPrecision(4), " to ", d3.max(xVals).toPrecision(4));\n        });\n        plotsvg.append("g").attr("class", "x brush").call(brush).selectAll("rect").attr("height", height);\n    }\n\n    // add z lines and sliders setx\n    if (div == "#setx") {\n        plotsvg.append("text").attr("id", "range").attr("x", 25).attr("y", height + 40).text(function () {\n            return "x: ".concat((+node.mean).toPrecision(4));\n        });\n\n        plotsvg.append("text").attr("id", "range2").attr("x", 25).attr("y", height + 50).text(function () {\n            return "x1: ".concat((+node.mean).toPrecision(4));\n        });\n\n        // create tick marks at all zscores in the bounds of the data\n        var lineFunction = d3.svg.line().x(function (d) {\n            return d.x;\n        }).y(function (d) {\n            return d.y;\n        }).interpolate("linear");\n\n        var colSeq = ["#A2CD5A", "orange", "red"]; // will cycle through color sequence, and then repeat last color\n        var lineData = new Array();\n\n        var zLower = -1 * (d3.min(xVals) - node.mean) / node.sd; // zscore of lower bound\n        var zUpper = (d3.max(xVals) - node.mean) / node.sd; // zscore of upper bound\n\n        for (var i = 0; i < zUpper; i++) {\n            lineData = [{\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = 1; i < zLower; i++) {\n            lineData = [{\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        // initialize slider components\n        var slideBox = plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height * .8 + ")").call(d3.svg.axis().scale(x).ticks(0).orient("bottom"));\n        var slider = plotsvg.append("g").attr("class", "slider").call(brush);\n        var handle = slider.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .7 + ")").attr("points", function (_) {\n            var s = 6;\n            var xnm = node.setxvals[0] == \'\' ? x(node.mean) : x(node.setxvals[0]);\n            return xnm - s + "," + -s + " " + (xnm + s) + "," + -s + " " + xnm + "," + s * 1.3;\n        });\n        var slider2 = plotsvg.append("g").attr("class", "slider").call(brush2);\n        var handle2 = slider2.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .9 + ")").attr("points", function (_) {\n            var s = 6;\n            var xnm = node.setxvals[1] == \'\' ? x(node.mean) : x(node.setxvals[1]);\n            return xnm - s + "," + s + " " + (xnm + s) + "," + s + " " + xnm + "," + -s * 1.3;\n        });\n    }\n\n    // brushing functions\n    function brushed() {\n        if (div == "#tab2") {\n            plotsvg.select("text#range").text(function () {\n                return brush.empty() ? "Range: ".concat(d3.min(xVals).toPrecision(4), " to ", d3.max(xVals).toPrecision(4)) : "Range: ".concat(brush.extent()[0].toPrecision(4), " to ", brush.extent()[1].toPrecision(4));\n            });\n            node.subsetrange = brush.extent()[0].toPrecision(4) != brush.extent()[1].toPrecision(4) ? [brush.extent()[0].toPrecision(4), brush.extent()[1].toPrecision(4)] : ["", ""];\n        } else if (div == "#setx") {\n            var value = brush.extent()[0];\n            var s = 6;\n            if (d3.event.sourceEvent) {\n                value = x.invert(d3.mouse(this)[0]);\n                brush.extent([value, value]);\n            }\n\n            // set x position of slider center\n            var xpos = x(value);\n            if (value > d3.max(xVals)) {\n                // dragged past max\n                xpos = x(d3.max(xVals));\n            } else if (value < d3.min(xVals)) {\n                // dragged past min\n                xpos = x(d3.min(xVals));\n            } else {\n                var m = +node.mean;\n                var sd = +node.sd;\n                var zScore = (value - m) / sd; // z-score\n                var zRound = Math.round(zScore); // nearest integer z-score\n                if (.1 > Math.abs(zRound - zScore)) // snap to integer z-score\n                    xpos = x(m + zRound * sd);\n            }\n\n            // create slider symbol and text\n            handle.attr("points", function (_) {\n                return xpos - s + "," + -s + " " + (xpos + s) + "," + -s + " " + xpos + "," + s * 1.3;\n            });\n            plotsvg.select("text#range").text(function () {\n                return "x: ".concat(invx(xpos).toPrecision(4));\n            });\n            node.setxvals[1] = invx(xpos).toPrecision(4);\n        }\n    }\n\n    // certainly a more clever way to do this, but for now it\'s basically copied with brush and handle changes to brush2 and handle2 and #range to #range2 and setxvals[0] to setxvals[1]\n    function brushed2() {\n        var value = brush2.extent()[0];\n        var s = 6; // scaling for triangle shape\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush2.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > d3.max(xVals)) {\n            // dragged past max\n            xpos = x(d3.max(xVals));\n        } else if (value < d3.min(xVals)) {\n            // dragged past min\n            xpos = x(d3.min(xVals));\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(zRound - zScore)) // snap to integer z-score\n                xpos = x(m + zRound * sd);\n        }\n\n        // create slider symbol and text\n        handle2.attr("points", function (_) {\n            return xpos - s + "," + s + " " + (xpos + s) + "," + s + " " + xpos + "," + -s * 1.3;\n        });\n        plotsvg.select("text#range2").text(function () {\n            return "x1: ".concat(invx(xpos).toPrecision(4));\n        });\n        node.setxvals[1] = invx(xpos).toPrecision(4);\n    }\n}\n\nfunction bars(node, div, priv) {\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n    var plotXaxis = true;\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var ciUpperVals = new Array();\n    var ciLowerVals = new Array();\n    var ciSize;\n\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    if (node.nature == "nominal") {\n        var xi = 0;\n        for (var i = 0; i < keys.length; i++) {\n            if (node.plotvalues[keys[i]] == 0) continue;\n            yVals[xi] = node.plotvalues[keys[i]];\n            xVals[xi] = xi;\n            if (priv) {\n                if (node.plotvaluesCI) {\n                    ciLowerVals[xi] = node.plotValuesCI.lowerBound[keys[i]];\n                    ciUpperVals[xi] = node.plotValuesCI.upperBound[keys[i]];\n                }\n                ciSize = ciUpperVals[xi] - ciLowerVals[xi];\n            };\n\n            yValKey.push({\n                y: yVals[xi],\n                x: keys[i]\n            });\n            xi = xi + 1;\n        }\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n        ciUpperVals.sort(function (a, b) {\n            return b.y - a.y;\n        }); // ?\n        ciLowerVals.sort(function (a, b) {\n            return b.y - a.y;\n        }); // ?\n    } else {\n        for (var i = 0; i < keys.length; i++) {\n            console.log("plotvalues in bars");\n            yVals[i] = node.plotvalues[keys[i]];\n            xVals[i] = Number(keys[i]);\n            if (priv) {\n                if (node.plotvaluesCI) {\n                    ciLowerVals[i] = node.plotvaluesCI.lowerBound[keys[i]];\n                    ciUpperVals[i] = node.plotvaluesCI.upperBound[keys[i]];\n                }\n                ciSize = ciUpperVals[i] - ciLowerVals[i];\n            }\n        }\n    }\n\n    if (yVals.length > 15 & node.numchar == "numeric" || yVals.length > 5 & node.numchar == "character") plotXaxis = false;\n    var maxY = d3.max(yVals); // in the future, set maxY to the value of the maximum confidence limit\n    if (priv && node.plotvaluesCI) maxY = d3.max(ciUpperVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n\n    var mydiv = void 0;\n    if (div == "setx") mydiv = "#setx";else if (div == "varSummary") mydiv = "#tab3";else return alert("Error: incorrect div selected for plots");\n\n    var tempWidth = d3.select(mydiv).style("width");\n    var width = tempWidth.substring(0, tempWidth.length - 2);\n    var tempHeight = d3.select(mydiv).style("height");\n    var height = tempHeight.substring(0, tempHeight.length - 2);\n\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 50\n    };\n\n    // Need to fix automatic width and height settings for leftpanel (#tab2, #tab3)\n    if (mydiv == "#tab3") {\n        width = 0.7 * (width - margin.left - margin.right);\n        height = 0.3 * (height - margin.top - margin.bottom);\n    } else if (mydiv == "#setx") {\n        width = 200;\n        height = 120;\n    } else {\n        width = 0.35 * (width - margin.left - margin.right);\n        height = 0.25 * (height - margin.top - margin.bottom);\n    };\n\n    if (priv && node.stabilityBin) {\n        var x = d3.scale.linear().domain([minX - 0.5, maxX + 1.5]).range([0, width]);\n    } else {\n        var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n    }\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    var xAxis = d3.svg.axis().scale(x).ticks(yVals.length).orient("bottom");\n\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n\n    var brush = d3.svg.brush().x(x).extent(function () {\n        return node.subsetrange.length == 1 ? [node.subsetrange[0], node.subsetrange[0]] : node.subsetrange;\n    }).on("brush", brushed);\n\n    var brush2 = d3.svg.brush().x(x).on("brush", brushed2);\n\n    // Create SVG element\n    // cumbersome to treat "tab3" differently, but works for now\n    // tab3, has an issue, that unless width height hardcoded, they grow with each additional graph.\n    if (mydiv == "#tab3") {\n        var plotsvg = d3.select(mydiv).selectAll("svg").remove();\n\n        var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n            return node.name.toString().concat(mydiv.substr(1));\n        }).style("width", 300) //setting height to the height of #main.left\n        .style("height", 200).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n    } else {\n        var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n            var myname = node.name.toString();\n            myname = myname.replace(/\\(|\\)/g, "");\n            return myname.concat("_", mydiv.substr(1), "_", node.id);\n        }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n        .style("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n    };\n\n    var rectWidth = x(minX + 0.5 - 2 * barPadding); //the "width" is the coordinate of the end of the first bar\n\n    plotsvg.selectAll("rect").data(yVals).enter().append("rect").attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(maxY - d);\n    }).attr("width", rectWidth).attr("height", y).attr("fill", "#1f77b4");\n\n    // draw error bars, threshold line and extra bin\n    if (priv) {\n        if (yVals.length <= 20) {\n            plotsvg.selectAll("line").data(ciUpperVals).enter().append("line").style("stroke", "black").attr("x1", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding) + rectWidth / 2;\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding) + rectWidth / 2;\n            }).attr("y2", function (d) {\n                var y2 = y(maxY - d + ciSize);\n                return y2 >= y(maxY) ? y(maxY) : y2;\n            });\n\n            //draw top ticks on error bars\n            //need to fix the height of the graphs - the tops of error bars are getting cut off\n            plotsvg.selectAll(".topTick").data(ciUpperVals).enter().append("line").attr("class", "topTick").style("stroke", "black").attr("x1", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding); //make tick bigger to increase visibility\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.4 * rectWidth;\n                }\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding) + rectWidth; //make tick bigger to increase visibility\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.6 * rectWidth;\n                }\n            }).attr("y2", function (d) {\n                return y(maxY - d);\n            });\n\n            // draw bottom ticks of error bars\n            plotsvg.selectAll(".bottomTick").data(ciLowerVals).enter().append("line").attr("class", "bottomTick").style("stroke", "black").attr("x1", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding);\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.4 * rectWidth;\n                }\n            }).attr("y1", function (d) {\n                return y(maxY - d);\n            }).attr("x2", function (d, i) {\n                if (yVals.length > 20) {\n                    return x(xVals[i] - 0.5 + barPadding) + rectWidth;\n                } else {\n                    return x(xVals[i] - 0.5 + barPadding) + 0.6 * rectWidth;\n                }\n            }).attr("y2", function (d) {\n                return y(maxY - d);\n            });\n        } else {\n            plotsvg.selectAll(".denseError").data(yVals).enter().append("rect").attr("class", "denseError").attr("x", function (d, i) {\n                return x(xVals[i] - 0.5 + barPadding);\n            }).attr("y", function (d) {\n                return y(maxY - d) - .1 * y(d);\n            }).attr("width", rectWidth).attr("height", function (d) {\n                return y(maxY - d) + .1 * y(d) - (y(maxY - d) - .1 * y(d));\n            }).attr("fill", "silver");\n        }\n\n        //if statement for stability histograms\n        //extra stability bin\n        if (node.stabilityBin) {\n            plotsvg.append("rect").attr("x", x(maxX + 0.5 - barPadding)).attr("y", y(maxY) - node.stabilityBin).attr("width", rectWidth).attr("height", node.stabilityBin).attr("fill", "silver");\n        }\n\n        //threshold line\n        if (node.threshold) {\n            plotsvg.append("line").style("stroke", "black").attr("x1", x(minX - 0.5 + barPadding)).attr("y1", y(maxY) - node.threshold).attr("x2", function () {\n                console.log("stabilityBin");\n                console.log(node.stabilityBin);\n                if (node.stabilityBin) {\n                    return x(maxX + 0.5 - barPadding) + rectWidth;\n                } else {\n                    return x(maxX + 0.5 - barPadding);\n                }\n            }).attr("y2", y(maxY) - node.threshold);\n        }\n    }\n\n    if (plotXaxis) {\n        plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n    }\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(node.name);\n\n    if (mydiv == "#setx") {\n        plotsvg.append("text").attr("id", "range").attr("x", 25).attr("y", height + 40).text(function () {\n            if (node.nature === "nominal") {\n                var t = Math.round(yValKey.length / 2) - 1;\n                return "x: " + yValKey[t].x;\n            } else {\n                return "x: ".concat((+node.mean).toPrecision(4).toString());\n            }\n        });\n\n        plotsvg.append("text").attr("id", "range2").attr("x", 25).attr("y", height + 50).text(function () {\n            if (node.nature === "nominal") {\n                var t = Math.round(yValKey.length / 2) - 1;\n                return "x1: " + yValKey[t].x;\n            } else {\n                return "x1: ".concat((+node.mean).toPrecision(4).toString());\n            }\n        });\n\n        // create tick marks at all zscores in the bounds of the data\n        var lineFunction = d3.svg.line().x(function (d) {\n            return d.x;\n        }).y(function (d) {\n            return d.y;\n        }).interpolate("linear");\n\n        var colSeq = ["#A2CD5A", "orange", "red"]; // will cycle through color sequence, and then repeat last color\n        var lineData = new Array();\n\n        var zLower = -1 * (minX - node.mean) / node.sd; // zscore of lower bound\n        var zUpper = (maxX - node.mean) / node.sd; // zscore of upper bound\n\n        for (var i = 0; i < zUpper; i++) {\n            lineData = [{\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean + i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = 1; i < zLower; i++) {\n            lineData = [{\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .7\n            }, {\n                "x": x(+node.mean - i * node.sd),\n                "y": height * .9\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", colSeq[d3.min([i, colSeq.length - 1])]).attr("stroke-width", 1.5).attr("fill", "none");\n        }\n\n        for (var i = d3.min(xVals); i <= d3.max(xVals); i++) {\n            lineData = [{\n                "x": x(i),\n                "y": height * .75\n            }, {\n                "x": x(i),\n                "y": height * .85\n            }];\n            plotsvg.append("path").attr("d", lineFunction([lineData[0], lineData[1]])).attr("stroke", "black").attr("stroke-width", 1).attr("fill", "none");\n        }\n\n        // initialize slider components\n        var slideBox = plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height * .8 + ")").call(d3.svg.axis().scale(x).ticks(0).orient("bottom"));\n\n        var slider = plotsvg.append("g").attr("class", "slider").call(brush);\n        var slider2 = plotsvg.append("g").attr("class", "slider").call(brush2);\n\n        var points = function points(i) {\n            return function (d) {\n                var xnm = void 0,\n                    s = 6;\n                if (node.setxvals[i] == \'\') {\n                    // if nominal, use the median frequency as the position for the setx slider\n                    xnm = node.nature == \'nominal\' ? x(Math.round(xVals.length / 2) - 1) : x(node.mean);\n                } else {\n                    xnm = x(node.setxvals[i]);\n                };\n                return xnm - s + \',\' + -s + \' \' + (xnm + s) + \',\' + -s + \' \' + xnm + \',\' + s * 1.3;\n            };\n        };\n        var handle = slider.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .7 + ")").attr("points", points(0));\n        var handle2 = slider2.append("polygon").attr("class", "handle").attr("transform", "translate(0," + height * .9 + ")").attr("points", points(1));\n    }\n\n    function twoSF(x) {\n        var tsf = d3.format(".2r"); // format to two significant figures after the decimal place\n        return tsf(x).replace(/0+$/, "").replace(/\\.$/, ""); // trim trailing zeros after a period, and any orphaned period\n    }\n\n    // brushing functions\n    function brushed() {\n        var value = brush.extent()[0];\n        var s = 6;\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > maxX) {\n            // dragged past max\n            xpos = x(maxX);\n        } else if (value < minX) {\n            // dragged past min\n            xpos = x(minX);\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(Math.round(value) - value)) {\n                // snap to integer\n                xpos = x(Math.round(value));\n            } else if (.1 > Math.abs(zRound - zScore)) {\n                // snap to integer z-score\n                xpos = x(m + zRound * sd);\n            }\n        }\n\n        // create slider symbol and text\n        handle.attr("points", function (d) {\n            return xpos - s + "," + -s + " " + (xpos + s) + "," + -s + " " + xpos + "," + s * 1.3;\n        });\n        plotsvg.select("text#range").text(function () {\n            if (node.nature === "nominal") {\n                return "x: " + yValKey[Math.round(invx(xpos))].x;\n            } else {\n                return "x: ".concat(+invx(xpos).toPrecision(4).toString());\n            }\n        });\n        node.setxvals[1] = +invx(xpos).toPrecision(4);\n    }\n\n    // certainly a more clever way to do this, but for now it\'s basically copied with brush and handle changes to brush2 and handle2 and #range to #range2 and setxvals[0] to setxvals[1]\n    function brushed2() {\n        var value = brush2.extent()[0];\n        var s = 6; // scaling for triangle shape\n\n        if (d3.event.sourceEvent) {\n            value = x.invert(d3.mouse(this)[0]);\n            brush2.extent([value, value]);\n        }\n\n        // set x position of slider center\n        var xpos = x(value);\n        if (value > maxX) {\n            // dragged past max\n            xpos = x(maxX);\n        } else if (value < minX) {\n            // dragged past min\n            xpos = x(minX);\n        } else {\n            var m = +node.mean;\n            var sd = +node.sd;\n            var zScore = (value - m) / sd; // z-score\n            var zRound = Math.round(zScore); // nearest integer z-score\n            if (.1 > Math.abs(Math.round(value) - value)) {\n                // snap to integer\n                xpos = x(Math.round(value));\n            } else if (.1 > Math.abs(zRound - zScore)) {\n                // snap to integer z-score\n                xpos = x(m + zRound * sd);\n            }\n        }\n\n        // create slider symbol and text\n        handle2.attr("points", function (d) {\n            return xpos - s + "," + s + " " + (xpos + s) + "," + s + " " + xpos + "," + -s * 1.3;\n        });\n        plotsvg.select("text#range2").text(function () {\n            if (node.nature === "nominal") {\n                return "x1: " + yValKey[Math.round(invx(xpos))].x;\n            } else {\n                return "x1: ".concat(+invx(xpos).toPrecision(4).toString());\n            }\n        });\n        node.setxvals[1] = +invx(xpos).toPrecision(4);\n    }\n}\n\n// draws barplots in subset tab\nfunction barsSubset(node) {\n    // if untouched, set node.subsetrange to an empty array, meaning all values selected by default\n    if (node.subsetrange[0] == "" & node.subsetrange[1] == "") {\n        node.subsetrange = [];\n    }\n\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n    var plotXaxis = true;\n\n    // Variable name\n    var myname = node.name.toString();\n    myname = myname.replace(/\\(|\\)/g, "");\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    var xi = 0;\n    for (var i = 0; i < keys.length; i++) {\n        if (node.plotvalues[keys[i]] == 0) continue;\n        yVals[xi] = node.plotvalues[keys[i]];\n        xVals[xi] = xi;\n        yValKey.push({\n            y: yVals[xi],\n            x: keys[i]\n        });\n        xi = xi + 1;\n    }\n    if (node.nature === "nominal") {\n        // if nominal, orders bars left to right, highest frequency to lowest\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n    }\n\n    plotXaxis = false;\n\n    var maxY = d3.max(yVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n    var gname = ["subsetyes", "subsetno"];\n\n    var yVals2 = [];\n    var yVals1 = [];\n    for (i = 0; i < yVals.length; i++) {\n        yVals1.push({\n            y0: maxY - yVals[i],\n            y1: yVals[i],\n            col: d3Color\n        });\n        yVals2.push({\n            y0: 0,\n            y1: maxY - yVals[i],\n            col: "transparent"\n        });\n    }\n    var freqs = [yVals1, yVals2];\n\n    // y0 is the starting point\n    // y1 is the length of the bar\n\n    var mydiv = "#tab2";\n    var width = 200;\n    var height = 120;\n    var margin = {\n        top: 20,\n        right: 20,\n        bottom: 53,\n        left: 50\n    };\n\n    var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    var xAxis = d3.svg.axis().scale(x).ticks(yVals.length).orient("bottom");\n\n    var yAxis = d3.svg.axis().scale(y).orient("left");\n\n    //Create SVG element\n    var plotsvg = d3.select(mydiv).append("svg").attr("id", function () {\n        return myname.concat("_", mydiv.substr(1), "_", node.id);\n    }).style("width", width + margin.left + margin.right) //setting height to the height of #main.left\n    .style("height", height + margin.top + margin.bottom).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    var freq = plotsvg.selectAll("g.freq").data(freqs).enter().append("g").attr("class", "freq").attr("name", function (d, i) {\n        return myname.concat(gname[i]);\n    });\n\n    var rect = freq.selectAll("rect").data(Object).enter().append("rect").attr("class", "bar").attr("name", function (d, i) {\n        return xVals[i];\n    }).attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(d.y0);\n    }).attr("width", x(minX + 0.5 - 2 * barPadding)) // the "width" is the coordinate of the end of the first bar\n    .attr("height", function (d) {\n        return y(d.y1);\n    }).style("fill", function (d, i) {\n        if (node.subsetrange.length > 0 & d.col === d3Color & $.inArray(xVals[i].toString(), node.subsetrange) > -1) {\n            return selVarColor;\n        } else {\n            return d.col;\n        }\n    }).on("click", function () {\n        var selectMe = this;\n        var selectName = this.getAttribute("name");\n        if (this.parentNode.getAttribute("name") == myname.concat("subsetno")) {\n            selectMe = $(\'[name="\' + myname.concat("subsetyes") + \'"]\').children(\'[name="\' + selectName + \'"]\')[0];\n        }\n        d3.select(selectMe).style("fill", function (d, i) {\n            var myCol = "";\n            if (this.style.fill === selVarColor) {\n                var myindex = node.subsetrange.indexOf(this.getAttribute("name"));\n                node.subsetrange.splice(myindex, 1);\n                myCol = d3Color;\n            } else {\n                node.subsetrange.push(this.getAttribute("name"));\n                myCol = selVarColor;\n            }\n            return myCol;\n        });\n        plotsvg.select("text#selectrange").text(function () {\n            if (node.subsetrange.length == 0) {\n                return "Selected: all values";\n            } else {\n                var a = node.subsetrange;\n                var selecteds = new Array();\n                a.forEach(function (val) {\n                    selecteds.push(yValKey[val].x);\n                });\n                return "Selected: " + selecteds;\n            }\n        });\n    }).on("mouseover", function () {\n        var i = this.getAttribute("name");\n        plotsvg.select("text#mymouseover").text(function () {\n            return yValKey[i].x + ": " + yValKey[i].y;\n        });\n    }).on("mouseout", function () {\n        var i = this.getAttribute("name");\n        plotsvg.select("text#mymouseover").text(function () {\n            return "Value: Frequency";\n        });\n    });\n\n    if (plotXaxis) {\n        plotsvg.append("g").attr("class", "x axis").attr("transform", "translate(0," + height + ")").call(xAxis);\n    } else {\n        plotsvg.append("text").attr("id", "mymouseover").attr("x", 25).attr("y", height + 20).text(function () {\n            return "Value: Frequency";\n        });\n    }\n\n    plotsvg.append("text").attr("x", width / 2).attr("y", 0 - margin.top / 2).attr("text-anchor", "middle").style("font-size", "12px").text(myname);\n\n    plotsvg.append("text").attr("id", "selectrange").attr("x", 25).attr("y", height + 40).text(function () {\n        if (node.subsetrange.length == 0) return "Selected: all values";\n        var selecteds = new Array();\n        node.subsetrange.forEach(function (val) {\n            return selecteds.push(yValKey[val].x);\n        });\n        return "Selected: " + selecteds;\n    });\n}\n\nfunction densityNode(node, obj) {\n    var myname = node.name.toString().concat("nodeplot");\n\n    if (typeof obj === "undefined") {\n        var obj = document.getElementById(node.name.toString() + "biggroup");\n        // if obj contains an svg element, remove it. this removes any plot inside the node\n        if (d3.select(obj).selectAll("svg")[0].length > 0) d3.select(obj).selectAll("svg").remove();\n    }\n\n    var yVals = node.ploty;\n    var xVals = node.plotx;\n    // array of objects\n    var data2 = node.plotx.map(function (x, i) {\n        return { x: +x, y: +node.ploty[i] };\n    });\n\n    var width = 60; // hardcoded, should be set automatically\n    var height = 30;\n    var margin = {\n        top: 20,\n        right: 10,\n        bottom: 53,\n        left: 10\n    };\n\n    var x = d3.scale.linear().domain([d3.min(xVals), d3.max(xVals)]).range([0, width]);\n\n    var y = d3.scale.linear().domain([d3.min(yVals), d3.max(yVals)]).range([height, 0]);\n\n    var area = d3.svg.area().interpolate("monotone").x(function (d) {\n        return x(d.x);\n    }).y0(height).y1(function (d) {\n        return y(d.y);\n    });\n\n    var plotsvg = d3.select(obj).insert("svg", ":first-child").attr("x", -40) // NOTE: Not sure exactly why these numbers work, but these hardcoded values seem to position the plot inside g correctly.  this shouldn\'t be hardcoded in the future\n    .attr("y", -45).attr("id", function () {\n        return myname;\n    }).style("width", width).style("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    plotsvg.append("path").datum(data2).attr("class", "area").attr("d", area);\n}\n\nfunction barsNode(node, obj) {\n    var myname = node.name.toString().concat("nodeplot");\n\n    if (typeof obj === "undefined") {\n        var obj = document.getElementById(node.name.toString() + "biggroup");\n        // if obj contains an svg element, remove it. this removes any plot inside the node\n        if (d3.select(obj).selectAll("svg")[0].length > 0) {\n            d3.select(obj).selectAll("svg").remove();\n        }\n    }\n\n    // Histogram spacing\n    var barPadding = .015; // Space between bars\n    var topScale = 1.2; // Multiplicative factor to assign space at top within graph - currently removed from implementation\n\n    // Data\n    var keys = Object.keys(node.plotvalues);\n    var yVals = new Array();\n    var xVals = new Array();\n    var yValKey = new Array();\n\n    if (node.nature === "nominal") {\n        var xi = 0;\n        for (var i = 0; i < keys.length; i++) {\n            if (node.plotvalues[keys[i]] == 0) continue;\n            yVals[xi] = node.plotvalues[keys[i]];\n            xVals[xi] = xi;\n            yValKey.push({ y: yVals[xi], x: keys[i] });\n            xi = xi + 1;\n        }\n        yValKey.sort(function (a, b) {\n            return b.y - a.y;\n        }); // array of objects, each object has y, the same as yVals, and x, the category\n        yVals.sort(function (a, b) {\n            return b - a;\n        }); // array of y values, the height of the bars\n    } else {\n        for (var i = 0; i < keys.length; i++) {\n            yVals[i] = node.plotvalues[keys[i]];\n            xVals[i] = Number(keys[i]);\n        }\n    }\n\n    var maxY = d3.max(yVals);\n    var minX = d3.min(xVals);\n    var maxX = d3.max(xVals);\n\n    var width = 60;\n    var height = 30;\n    var margin = {\n        top: 20,\n        right: 10,\n        bottom: 53,\n        left: 10\n    };\n\n    var x = d3.scale.linear().domain([minX - 0.5, maxX + 0.5]).range([0, width]);\n\n    var invx = d3.scale.linear().range([minX - 0.5, maxX + 0.5]).domain([0, width]);\n\n    var y = d3.scale.linear().domain([0, maxY]).range([0, height]);\n\n    //Create SVG element\n    var plotsvg = d3.select(obj).insert("svg", ":first-child").attr("x", -40).attr("y", -45).attr("id", function () {\n        return myname;\n    }).style("width", width) // set height to the height of #main.left\n    .style("height", height).append("g").attr("transform", "translate(" + margin.left + "," + margin.top + ")");\n\n    plotsvg.selectAll("rect").data(yVals).enter().append("rect").attr("x", function (d, i) {\n        return x(xVals[i] - 0.5 + barPadding);\n    }).attr("y", function (d) {\n        return y(maxY - d);\n    }).attr("width", x(minX + 0.5 - 2 * barPadding)) // the "width" is the coordinate of the end of the first bar\n    .attr("height", y).attr("fill", "#1f77b4");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval('var g;\r\n\r\n// This works in non-strict mode\r\ng = (function() {\r\n\treturn this;\r\n})();\r\n\r\ntry {\r\n\t// This works if eval is allowed (see CSP)\r\n\tg = g || Function("return this")() || (1,eval)("this");\r\n} catch(e) {\r\n\t// This works if the window reference is available\r\n\tif(typeof window === "object")\r\n\t\tg = window;\r\n}\r\n\r\n// g can still be undefined, but nothing to do about it...\r\n// We return undefined, instead of nothing here, so it\'s\r\n// easier to handle this case. if(!global) { ...}\r\n\r\nmodule.exports = g;\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vZ2xvYmFsLmpzPzM2OTgiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLDRDQUE0Qzs7QUFFNUMiLCJmaWxlIjoiMy5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBnO1xyXG5cclxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcclxuZyA9IChmdW5jdGlvbigpIHtcclxuXHRyZXR1cm4gdGhpcztcclxufSkoKTtcclxuXHJcbnRyeSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXHJcblx0ZyA9IGcgfHwgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpIHx8ICgxLGV2YWwpKFwidGhpc1wiKTtcclxufSBjYXRjaChlKSB7XHJcblx0Ly8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcclxuXHRpZih0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKVxyXG5cdFx0ZyA9IHdpbmRvdztcclxufVxyXG5cclxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxyXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xyXG4vLyBlYXNpZXIgdG8gaGFuZGxlIHRoaXMgY2FzZS4gaWYoIWdsb2JhbCkgeyAuLi59XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGc7XHJcblxuXG5cbi8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gV0VCUEFDSyBGT09URVJcbi8vICh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qc1xuLy8gbW9kdWxlIGlkID0gM1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///3\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.getClass = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar getClass = exports.getClass = function getClass(panel) {\n    if (panel.closed) return '.closepanel';\n    return panel.side === 'left' && app.lefttab === 'tab2' ? '.expandpanel' : '';\n};\n\nvar Panel = function () {\n    function Panel() {\n        _classCallCheck(this, Panel);\n    }\n\n    _createClass(Panel, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            this.closed = false;\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var dot = [_mithril2.default.trust('&#9679;'), (0, _mithril2.default)('br')];\n            return (0, _mithril2.default)('#' + vnode.attrs.side + 'panel.sidepanel.container.clearfix' + getClass(this), [(0, _mithril2.default)('#toggle' + (vnode.attrs.side === 'left' ? 'L' : 'R') + 'panelicon.panelbar[style=height: calc(100% - 60px)]', (0, _mithril2.default)('span', { onclick: function onclick(_) {\n                    return _this.closed = !_this.closed;\n                } }, [].concat([dot, dot, dot, dot]))), (0, _mithril2.default)('#' + this.side + 'paneltitle.panel-heading.text-center', (0, _mithril2.default)(\"h3.panel-title\", vnode.attrs.title))].concat(vnode.children));\n        }\n    }]);\n\n    return Panel;\n}();\n\nexports.default = Panel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1BhbmVsLmpzPzkyNGYiXSwibmFtZXMiOlsiYXBwIiwiZ2V0Q2xhc3MiLCJwYW5lbCIsImNsb3NlZCIsInNpZGUiLCJsZWZ0dGFiIiwiUGFuZWwiLCJ2bm9kZSIsImRvdCIsInRydXN0IiwiYXR0cnMiLCJvbmNsaWNrIiwiY29uY2F0IiwidGl0bGUiLCJjaGlsZHJlbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7SUFBWUEsRzs7Ozs7Ozs7QUFFTCxJQUFJQyw4QkFBVyxTQUFYQSxRQUFXLENBQVNDLEtBQVQsRUFBZ0I7QUFDbEMsUUFBSUEsTUFBTUMsTUFBVixFQUFrQixPQUFPLGFBQVA7QUFDbEIsV0FBUUQsTUFBTUUsSUFBTixLQUFlLE1BQWYsSUFBeUJKLElBQUlLLE9BQUosS0FBZ0IsTUFBMUMsR0FBb0QsY0FBcEQsR0FBcUUsRUFBNUU7QUFDSCxDQUhNOztJQUtEQyxLOzs7Ozs7OytCQUNLQyxLLEVBQU87QUFDVixpQkFBS0osTUFBTCxHQUFjLEtBQWQ7QUFDSDs7OzZCQUVJSSxLLEVBQU87QUFBQTs7QUFDUixnQkFBSUMsTUFBTSxDQUFDLGtCQUFFQyxLQUFGLENBQVEsU0FBUixDQUFELEVBQXFCLHVCQUFFLElBQUYsQ0FBckIsQ0FBVjtBQUNBLG1CQUFPLDZCQUFNRixNQUFNRyxLQUFOLENBQVlOLElBQWxCLDBDQUEyREgsU0FBUyxJQUFULENBQTNELEVBQTZFLENBQ2hGLG9DQUFZTSxNQUFNRyxLQUFOLENBQVlOLElBQVosS0FBcUIsTUFBckIsR0FBOEIsR0FBOUIsR0FBb0MsR0FBaEQsMkRBQ0UsdUJBQUUsTUFBRixFQUFVLEVBQUNPLFNBQVM7QUFBQSwyQkFBSyxNQUFLUixNQUFMLEdBQWMsQ0FBQyxNQUFLQSxNQUF6QjtBQUFBLGlCQUFWLEVBQVYsRUFDRSxHQUFHUyxNQUFILENBQVUsQ0FBQ0osR0FBRCxFQUFNQSxHQUFOLEVBQVdBLEdBQVgsRUFBZ0JBLEdBQWhCLENBQVYsQ0FERixDQURGLENBRGdGLEVBSWhGLDZCQUFNLEtBQUtKLElBQVgsMkNBQ0UsdUJBQUUsZ0JBQUYsRUFBb0JHLE1BQU1HLEtBQU4sQ0FBWUcsS0FBaEMsQ0FERixDQUpnRixFQU1sRkQsTUFOa0YsQ0FNM0VMLE1BQU1PLFFBTnFFLENBQTdFLENBQVA7QUFPSDs7Ozs7O2tCQUdVUixLIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbSBmcm9tICdtaXRocmlsJztcblxuaW1wb3J0ICogYXMgYXBwIGZyb20gJy4uL2FwcCc7XG5cbmV4cG9ydCBsZXQgZ2V0Q2xhc3MgPSBmdW5jdGlvbihwYW5lbCkge1xuICAgIGlmIChwYW5lbC5jbG9zZWQpIHJldHVybiAnLmNsb3NlcGFuZWwnO1xuICAgIHJldHVybiAocGFuZWwuc2lkZSA9PT0gJ2xlZnQnICYmIGFwcC5sZWZ0dGFiID09PSAndGFiMicpID8gJy5leHBhbmRwYW5lbCcgOiAnJztcbn07XG5cbmNsYXNzIFBhbmVsIHtcbiAgICBvbmluaXQodm5vZGUpIHtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCBkb3QgPSBbbS50cnVzdCgnJiM5Njc5OycpLCBtKCdicicpXTtcbiAgICAgICAgcmV0dXJuIG0oYCMke3Zub2RlLmF0dHJzLnNpZGV9cGFuZWwuc2lkZXBhbmVsLmNvbnRhaW5lci5jbGVhcmZpeCR7Z2V0Q2xhc3ModGhpcyl9YCwgW1xuICAgICAgICAgICAgbShgI3RvZ2dsZSR7dm5vZGUuYXR0cnMuc2lkZSA9PT0gJ2xlZnQnID8gJ0wnIDogJ1InfXBhbmVsaWNvbi5wYW5lbGJhcltzdHlsZT1oZWlnaHQ6IGNhbGMoMTAwJSAtIDYwcHgpXWAsXG4gICAgICAgICAgICAgIG0oJ3NwYW4nLCB7b25jbGljazogXyA9PiB0aGlzLmNsb3NlZCA9ICF0aGlzLmNsb3NlZH0sXG4gICAgICAgICAgICAgICAgW10uY29uY2F0KFtkb3QsIGRvdCwgZG90LCBkb3RdKSkpLFxuICAgICAgICAgICAgbShgIyR7dGhpcy5zaWRlfXBhbmVsdGl0bGUucGFuZWwtaGVhZGluZy50ZXh0LWNlbnRlcmAsXG4gICAgICAgICAgICAgIG0oXCJoMy5wYW5lbC10aXRsZVwiLCB2bm9kZS5hdHRycy50aXRsZSkpXG4gICAgICAgIF0uY29uY2F0KHZub2RlLmNoaWxkcmVuKSk7XG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYW5lbDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvdmlld3MvUGFuZWwuanMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///4\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.searchIndex = undefined;\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _plots = __webpack_require__(2);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar searchIndex = exports.searchIndex = void 0;\n\nvar search = function search(val) {\n    var all = app.allNodes;\n    if (val === '') {\n        exports.searchIndex = searchIndex = null;\n        return app.valueKey = all.map(function (n) {\n            return n.name;\n        });\n    }\n\n    var matches = [],\n        others = [],\n        match = function match(n, key) {\n        return n[key].toLowerCase().includes(val.toLowerCase());\n    };\n\n    all.forEach(function (n) {\n        return match(n, 'name') || match(n, 'labl') ? matches.push(n) : others.push(n);\n    });\n    exports.searchIndex = searchIndex = matches.length;\n    app.valueKey = matches.concat(others).map(function (n) {\n        return n.name;\n    });\n};\n\nvar Search = function () {\n    function Search() {\n        _classCallCheck(this, Search);\n    }\n\n    _createClass(Search, [{\n        key: 'view',\n        value: function view(vnode) {\n            vnode.attrs.oninput = _mithril2.default.withAttr('value', search);\n            return (0, _mithril2.default)('input#searchvar.form-control[style=margin-bottom: 5px; width: 100%]', vnode.attrs);\n        }\n    }]);\n\n    return Search;\n}();\n\nexports.default = Search;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1NlYXJjaC5qcz8xMzc4Il0sIm5hbWVzIjpbImFwcCIsInNlYXJjaEluZGV4Iiwic2VhcmNoIiwiYWxsIiwiYWxsTm9kZXMiLCJ2YWwiLCJ2YWx1ZUtleSIsIm1hcCIsIm4iLCJuYW1lIiwibWF0Y2hlcyIsIm90aGVycyIsIm1hdGNoIiwia2V5IiwidG9Mb3dlckNhc2UiLCJpbmNsdWRlcyIsImZvckVhY2giLCJwdXNoIiwibGVuZ3RoIiwiY29uY2F0IiwiU2VhcmNoIiwidm5vZGUiLCJhdHRycyIsIm9uaW5wdXQiLCJ3aXRoQXR0ciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7Ozs7QUFFQTs7SUFBWUEsRzs7QUFDWjs7Ozs7Ozs7QUFFTyxJQUFJQywwQ0FBSjs7QUFFUCxJQUFJQyxTQUFTLFNBQVRBLE1BQVMsTUFBTztBQUNoQixRQUFJQyxNQUFNSCxJQUFJSSxRQUFkO0FBQ0EsUUFBSUMsUUFBUSxFQUFaLEVBQWdCO0FBQ1osZ0JBTEdKLFdBS0gsaUJBQWMsSUFBZDtBQUNBLGVBQU9ELElBQUlNLFFBQUosR0FBZUgsSUFBSUksR0FBSixDQUFRO0FBQUEsbUJBQUtDLEVBQUVDLElBQVA7QUFBQSxTQUFSLENBQXRCO0FBQ0g7O0FBTGUsUUFNWEMsT0FOVyxHQU1nQixFQU5oQjtBQUFBLFFBTUZDLE1BTkUsR0FNb0IsRUFOcEI7QUFBQSxRQU1NQyxLQU5OLEdBTXdCLFNBQWxCQSxLQUFrQixDQUFDSixDQUFELEVBQUlLLEdBQUo7QUFBQSxlQUFZTCxFQUFFSyxHQUFGLEVBQU9DLFdBQVAsR0FBcUJDLFFBQXJCLENBQThCVixJQUFJUyxXQUFKLEVBQTlCLENBQVo7QUFBQSxLQU54Qjs7QUFPaEJYLFFBQUlhLE9BQUosQ0FBWTtBQUFBLGVBQUtKLE1BQU1KLENBQU4sRUFBUyxNQUFULEtBQW9CSSxNQUFNSixDQUFOLEVBQVMsTUFBVCxDQUFwQixHQUF1Q0UsUUFBUU8sSUFBUixDQUFhVCxDQUFiLENBQXZDLEdBQXlERyxPQUFPTSxJQUFQLENBQVlULENBQVosQ0FBOUQ7QUFBQSxLQUFaO0FBQ0EsWUFWT1AsV0FVUCxpQkFBY1MsUUFBUVEsTUFBdEI7QUFDQWxCLFFBQUlNLFFBQUosR0FBZUksUUFDVlMsTUFEVSxDQUNIUixNQURHLEVBRVZKLEdBRlUsQ0FFTjtBQUFBLGVBQUtDLEVBQUVDLElBQVA7QUFBQSxLQUZNLENBQWY7QUFHSCxDQVpEOztJQWNNVyxNOzs7Ozs7OzZCQUNHQyxLLEVBQU87QUFDUkEsa0JBQU1DLEtBQU4sQ0FBWUMsT0FBWixHQUFzQixrQkFBRUMsUUFBRixDQUFXLE9BQVgsRUFBb0J0QixNQUFwQixDQUF0QjtBQUNBLG1CQUFPLHVCQUFFLHFFQUFGLEVBQXlFbUIsTUFBTUMsS0FBL0UsQ0FBUDtBQUNIOzs7Ozs7a0JBR1VGLE0iLCJmaWxlIjoiNS5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5pbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4vYXBwJztcbmltcG9ydCB7c2VsVmFyQ29sb3J9IGZyb20gJy4uL3Bsb3RzJztcblxuZXhwb3J0IGxldCBzZWFyY2hJbmRleDtcblxubGV0IHNlYXJjaCA9IHZhbCA9PiB7XG4gICAgbGV0IGFsbCA9IGFwcC5hbGxOb2RlcztcbiAgICBpZiAodmFsID09PSAnJykge1xuICAgICAgICBzZWFyY2hJbmRleCA9IG51bGw7XG4gICAgICAgIHJldHVybiBhcHAudmFsdWVLZXkgPSBhbGwubWFwKG4gPT4gbi5uYW1lKTtcbiAgICB9XG4gICAgbGV0IFttYXRjaGVzLCBvdGhlcnMsIG1hdGNoXSA9IFtbXSwgW10sIChuLCBrZXkpID0+IG5ba2V5XS50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKHZhbC50b0xvd2VyQ2FzZSgpKV07XG4gICAgYWxsLmZvckVhY2gobiA9PiBtYXRjaChuLCAnbmFtZScpIHx8IG1hdGNoKG4sICdsYWJsJykgPyBtYXRjaGVzLnB1c2gobikgOiBvdGhlcnMucHVzaChuKSk7XG4gICAgc2VhcmNoSW5kZXggPSBtYXRjaGVzLmxlbmd0aDtcbiAgICBhcHAudmFsdWVLZXkgPSBtYXRjaGVzXG4gICAgICAgIC5jb25jYXQob3RoZXJzKVxuICAgICAgICAubWFwKG4gPT4gbi5uYW1lKTtcbn07XG5cbmNsYXNzIFNlYXJjaCB7XG4gICAgdmlldyh2bm9kZSkge1xuICAgICAgICB2bm9kZS5hdHRycy5vbmlucHV0ID0gbS53aXRoQXR0cigndmFsdWUnLCBzZWFyY2gpO1xuICAgICAgICByZXR1cm4gbSgnaW5wdXQjc2VhcmNodmFyLmZvcm0tY29udHJvbFtzdHlsZT1tYXJnaW4tYm90dG9tOiA1cHg7IHdpZHRoOiAxMDAlXScsIHZub2RlLmF0dHJzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFNlYXJjaDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9hcHAvdmlld3MvU2VhcmNoLmpzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///5\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar Subpanel = function () {\n    function Subpanel() {\n        _classCallCheck(this, Subpanel);\n    }\n\n    _createClass(Subpanel, [{\n        key: 'oninit',\n        value: function oninit(vnode) {\n            this.hide = false;\n        }\n    }, {\n        key: 'view',\n        value: function view(vnode) {\n            var _this = this;\n\n            var title = vnode.attrs.title;\n            var legend = title === 'Legend';\n            var target = 'collapse' + title;\n            var z = app.zparams;\n            return (0, _mithril2.default)('#' + (legend ? \"legend.legendary\" : \"logdiv.logbox\") + '.panel.panel-default', {\n                style: { display: legend && z.ztime.length + z.zcross.length + z.zdv.length + z.znom.length || !legend && app.logArray.length > 0 ? 'block' : 'none' } }, (0, _mithril2.default)(\".panel-heading\", (0, _mithril2.default)(\"h3.panel-title\", title, (0, _mithril2.default)('span.glyphicon.glyphicon-large.glyphicon-chevron-' + (this.hide ? 'up' : 'down') + '.pull-right[data-target=#' + target + '][data-toggle=collapse][href=#' + target + ']', {\n                style: 'cursor: pointer',\n                onclick: function onclick(_) {\n                    return _this.hide = !_this.hide;\n                } }))), (0, _mithril2.default)('#' + target + '.panel-collapse.collapse.in', (0, _mithril2.default)(\".panel-body\", !legend ? app.logArray.map(function (x) {\n                return (0, _mithril2.default)('p', x);\n            }) : vnode.attrs.buttons.map(function (x) {\n                return (0, _mithril2.default)('#' + x[0] + '.clearfix.' + (z[x[1]].length === 0 ? \"hide\" : \"show\"), (0, _mithril2.default)(\".rectColor\", (0, _mithril2.default)(\"svg[style=width: 20px; height: 20px]\", (0, _mithril2.default)(\"circle[cx=10][cy=10][fill=white][r=9][stroke=black][stroke-width=2]\"))), (0, _mithril2.default)(\".rectLabel\", x[2]));\n            }))));\n        }\n    }]);\n\n    return Subpanel;\n}();\n\nexports.default = Subpanel;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvYXBwL3ZpZXdzL1N1YnBhbmVsLmpzP2ViYWIiXSwibmFtZXMiOlsiYXBwIiwiU3VicGFuZWwiLCJ2bm9kZSIsImhpZGUiLCJ0aXRsZSIsImF0dHJzIiwibGVnZW5kIiwidGFyZ2V0IiwieiIsInpwYXJhbXMiLCJzdHlsZSIsImRpc3BsYXkiLCJ6dGltZSIsImxlbmd0aCIsInpjcm9zcyIsInpkdiIsInpub20iLCJsb2dBcnJheSIsIm9uY2xpY2siLCJtYXAiLCJ4IiwiYnV0dG9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7OztBQUVBOztJQUFZQSxHOzs7Ozs7OztJQUVOQyxROzs7Ozs7OytCQUNLQyxLLEVBQU87QUFDVixpQkFBS0MsSUFBTCxHQUFZLEtBQVo7QUFDSDs7OzZCQUVJRCxLLEVBQU87QUFBQTs7QUFDUixnQkFBSUUsUUFBUUYsTUFBTUcsS0FBTixDQUFZRCxLQUF4QjtBQUNBLGdCQUFJRSxTQUFTRixVQUFVLFFBQXZCO0FBQ0EsZ0JBQUlHLFNBQVMsYUFBYUgsS0FBMUI7QUFDQSxnQkFBSUksSUFBSVIsSUFBSVMsT0FBWjtBQUNBLG1CQUFPLDhCQUFNSCxTQUFTLGtCQUFULEdBQThCLGVBQXBDLDRCQUEyRTtBQUM5RUksdUJBQU8sRUFBQ0MsU0FBU0wsVUFBVUUsRUFBRUksS0FBRixDQUFRQyxNQUFSLEdBQWlCTCxFQUFFTSxNQUFGLENBQVNELE1BQTFCLEdBQW1DTCxFQUFFTyxHQUFGLENBQU1GLE1BQXpDLEdBQWtETCxFQUFFUSxJQUFGLENBQU9ILE1BQW5FLElBQTZFLENBQUNQLE1BQUQsSUFBV04sSUFBSWlCLFFBQUosQ0FBYUosTUFBYixHQUFzQixDQUE5RyxHQUFrSCxPQUFsSCxHQUE0SCxNQUF0SSxFQUR1RSxFQUEzRSxFQUVFLHVCQUFFLGdCQUFGLEVBQ0UsdUJBQUUsZ0JBQUYsRUFDRVQsS0FERixFQUVFLDhFQUFzRCxLQUFLRCxJQUFMLEdBQVksSUFBWixHQUFrQixNQUF4RSxrQ0FBMEdJLE1BQTFHLHNDQUFpSkEsTUFBakosUUFBNEo7QUFDeEpHLHVCQUFPLGlCQURpSjtBQUV4SlEseUJBQVM7QUFBQSwyQkFBSyxNQUFLZixJQUFMLEdBQVksQ0FBQyxNQUFLQSxJQUF2QjtBQUFBLGlCQUYrSSxFQUE1SixDQUZGLENBREYsQ0FGRixFQVFFLDZCQUFNSSxNQUFOLGtDQUNFLHVCQUFFLGFBQUYsRUFBaUIsQ0FBQ0QsTUFBRCxHQUFVTixJQUFJaUIsUUFBSixDQUFhRSxHQUFiLENBQWlCO0FBQUEsdUJBQUssdUJBQUUsR0FBRixFQUFPQyxDQUFQLENBQUw7QUFBQSxhQUFqQixDQUFWLEdBQTZDbEIsTUFBTUcsS0FBTixDQUFZZ0IsT0FBWixDQUFvQkYsR0FBcEIsQ0FBd0IsYUFBSztBQUN2Rix1QkFBTyw2QkFBTUMsRUFBRSxDQUFGLENBQU4sbUJBQXVCWixFQUFFWSxFQUFFLENBQUYsQ0FBRixFQUFRUCxNQUFSLEtBQW1CLENBQW5CLEdBQXVCLE1BQXZCLEdBQWdDLE1BQXZELEdBQ0UsdUJBQUUsWUFBRixFQUNFLHVCQUFFLHNDQUFGLEVBQ0UsdUJBQUUscUVBQUYsQ0FERixDQURGLENBREYsRUFJRSx1QkFBRSxZQUFGLEVBQWdCTyxFQUFFLENBQUYsQ0FBaEIsQ0FKRixDQUFQO0FBSWlDLGFBTHlCLENBQTlELENBREYsQ0FSRixDQUFQO0FBZUg7Ozs7OztrQkFHVW5CLFEiLCJmaWxlIjoiNi5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtIGZyb20gJ21pdGhyaWwnO1xuXG5pbXBvcnQgKiBhcyBhcHAgZnJvbSAnLi4vYXBwJztcblxuY2xhc3MgU3VicGFuZWwge1xuICAgIG9uaW5pdCh2bm9kZSkge1xuICAgICAgICB0aGlzLmhpZGUgPSBmYWxzZTtcbiAgICB9XG5cbiAgICB2aWV3KHZub2RlKSB7XG4gICAgICAgIGxldCB0aXRsZSA9IHZub2RlLmF0dHJzLnRpdGxlO1xuICAgICAgICBsZXQgbGVnZW5kID0gdGl0bGUgPT09ICdMZWdlbmQnO1xuICAgICAgICBsZXQgdGFyZ2V0ID0gJ2NvbGxhcHNlJyArIHRpdGxlO1xuICAgICAgICBsZXQgeiA9IGFwcC56cGFyYW1zO1xuICAgICAgICByZXR1cm4gbShgIyR7bGVnZW5kID8gXCJsZWdlbmQubGVnZW5kYXJ5XCIgOiBcImxvZ2Rpdi5sb2dib3hcIn0ucGFuZWwucGFuZWwtZGVmYXVsdGAsIHtcbiAgICAgICAgICAgIHN0eWxlOiB7ZGlzcGxheTogbGVnZW5kICYmIHouenRpbWUubGVuZ3RoICsgei56Y3Jvc3MubGVuZ3RoICsgei56ZHYubGVuZ3RoICsgei56bm9tLmxlbmd0aCB8fCAhbGVnZW5kICYmIGFwcC5sb2dBcnJheS5sZW5ndGggPiAwID8gJ2Jsb2NrJyA6ICdub25lJ319LFxuICAgICAgICAgICAgICAgICBtKFwiLnBhbmVsLWhlYWRpbmdcIixcbiAgICAgICAgICAgICAgICAgICBtKFwiaDMucGFuZWwtdGl0bGVcIixcbiAgICAgICAgICAgICAgICAgICAgIHRpdGxlLFxuICAgICAgICAgICAgICAgICAgICAgbShgc3Bhbi5nbHlwaGljb24uZ2x5cGhpY29uLWxhcmdlLmdseXBoaWNvbi1jaGV2cm9uLSR7dGhpcy5oaWRlID8gJ3VwJzogJ2Rvd24nfS5wdWxsLXJpZ2h0W2RhdGEtdGFyZ2V0PSMke3RhcmdldH1dW2RhdGEtdG9nZ2xlPWNvbGxhcHNlXVtocmVmPSMke3RhcmdldH1dYCwge1xuICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiAnY3Vyc29yOiBwb2ludGVyJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICBvbmNsaWNrOiBfID0+IHRoaXMuaGlkZSA9ICF0aGlzLmhpZGV9KSkpLFxuICAgICAgICAgICAgICAgICBtKGAjJHt0YXJnZXR9LnBhbmVsLWNvbGxhcHNlLmNvbGxhcHNlLmluYCxcbiAgICAgICAgICAgICAgICAgICBtKFwiLnBhbmVsLWJvZHlcIiwgIWxlZ2VuZCA/IGFwcC5sb2dBcnJheS5tYXAoeCA9PiBtKCdwJywgeCkpIDogdm5vZGUuYXR0cnMuYnV0dG9ucy5tYXAoeCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtKGAjJHt4WzBdfS5jbGVhcmZpeC4ke3pbeFsxXV0ubGVuZ3RoID09PSAwID8gXCJoaWRlXCIgOiBcInNob3dcIn1gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtKFwiLnJlY3RDb2xvclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJzdmdbc3R5bGU9d2lkdGg6IDIwcHg7IGhlaWdodDogMjBweF1cIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCJjaXJjbGVbY3g9MTBdW2N5PTEwXVtmaWxsPXdoaXRlXVtyPTldW3N0cm9rZT1ibGFja11bc3Ryb2tlLXdpZHRoPTJdXCIpKSksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0oXCIucmVjdExhYmVsXCIsIHhbMl0pKTt9KSkpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN1YnBhbmVsO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2FwcC92aWV3cy9TdWJwYW5lbC5qcyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvY3NzL2FwcC5jc3M/MmY3ZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiI3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gcmVtb3ZlZCBieSBleHRyYWN0LXRleHQtd2VicGFjay1wbHVnaW5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL2Fzc2V0cy9jc3MvYXBwLmNzc1xuLy8gbW9kdWxlIGlkID0gN1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvcGtncy9MYWRkYS9kaXN0L2xhZGRhLXRoZW1lbGVzcy5taW4uY3NzP2E2ZTEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hc3NldHMvcGtncy9MYWRkYS9kaXN0L2xhZGRhLXRoZW1lbGVzcy5taW4uY3NzXG4vLyBtb2R1bGUgaWQgPSA4XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///8\n")},function(module,exports){eval("// removed by extract-text-webpack-plugin//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9hc3NldHMvcGtncy9ib290c3RyYXAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzP2ZiNzQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIHJlbW92ZWQgYnkgZXh0cmFjdC10ZXh0LXdlYnBhY2stcGx1Z2luXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9hc3NldHMvcGtncy9ib290c3RyYXAvY3NzL2Jvb3RzdHJhcC10aGVtZS5taW4uY3NzXG4vLyBtb2R1bGUgaWQgPSA5XG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\n__webpack_require__(9);\n\n__webpack_require__(7);\n\n__webpack_require__(8);\n\nvar _mithril = __webpack_require__(0);\n\nvar _mithril2 = _interopRequireDefault(_mithril);\n\nvar _app = __webpack_require__(1);\n\nvar app = _interopRequireWildcard(_app);\n\nvar _plots = __webpack_require__(2);\n\nvar plots = _interopRequireWildcard(_plots);\n\nvar _Panel = __webpack_require__(4);\n\nvar _Panel2 = _interopRequireDefault(_Panel);\n\nvar _Search = __webpack_require__(5);\n\nvar _Search2 = _interopRequireDefault(_Search);\n\nvar _Subpanel = __webpack_require__(6);\n\nvar _Subpanel2 = _interopRequireDefault(_Subpanel);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar or = function or(side, val) {\n  var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'block';\n  var n = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'none';\n\n  return app[side + 'tab'] === val ? y : n;\n};\n\nvar leftpanel = function leftpanel() {\n  return (0, _mithril2.default)(_Panel2.default, { side: 'left', title: 'Data Selection' }, (0, _mithril2.default)(\".btn-toolbar[role=toolbar][style=margin-left: .5em; margin-top: .5em]\", (0, _mithril2.default)(\".btn-group\", (0, _mithril2.default)('button#btnVariables.btn.' + or('left', 'tab1', 'active', 'btn-default') + '[type=button]', {\n    title: 'Click variable name to add or remove the variable pebble from the modeling space.',\n    onclick: function onclick(_) {\n      return app.tabLeft('tab1');\n    } }, \"Variables\"), (0, _mithril2.default)('button#btnSubset.btn.' + or('left', 'tab2', 'active', 'btn-default') + '[type=button]', {\n    onclick: function onclick(_) {\n      return app.tabLeft('tab2');\n    } }, \"Subset\")), (0, _mithril2.default)(\"button#btnSelect.btn.btn-default.ladda-button[data-spinner-color=#000000][data-style=zoom-in][type=button]\", {\n    style: 'display: ' + (app.subset ? 'block' : 'none') + '; float: right; margin-right: 10px',\n    onclick: function onclick(_) {\n      return app.subsetSelect('btnSelect');\n    },\n    title: 'Subset data by the intersection of all selected values.' }, (0, _mithril2.default)(\"span.ladda-label[style=pointer-events: none]\", \"Select\"))), (0, _mithril2.default)('.row-fluid' + (0, _Panel.getClass)({ side: 'left' }), (0, _mithril2.default)('#leftpanelcontent', (0, _mithril2.default)('#leftContentArea[style=height: 453px; overflow: auto]', (0, _mithril2.default)('#tab1[style=display: ' + or('left', 'tab1') + '; padding: 10px 8px; text-align: center]', (0, _mithril2.default)(_Search2.default, { placeholder: 'Search variables and labels' }), (0, _mithril2.default)('#varList[style=display: block]', app.valueKey.map(function (v, i) {\n    return (0, _mithril2.default)('p#' + v.replace(/\\W/g, '_'), {\n      style: {\n        'background-color': app.zparams.zdv.includes(v) ? app.hexToRgba(app.dvColor) : app.zparams.znom.includes(v) ? app.hexToRgba(app.nomColor) : app.nodes.map(function (n) {\n          return n.name;\n        }).includes(v) ? app.hexToRgba(plots.selVarColor) : app.varColor,\n        'border-color': '#000000',\n        'border-style': _Search.searchIndex && i < _Search.searchIndex ? 'solid' : 'none'\n      },\n      onclick: app.clickVar,\n      onmouseover: function onmouseover() {\n        $(this).popover('show');\n        $(\"body div.popover\").addClass(\"variables\");\n        $(\"body div.popover div.popover-content\").addClass(\"form-horizontal\");\n      },\n      onmouseout: \"$(this).popover('hide');\",\n      'data-container': 'body',\n      'data-content': app.popoverContent(app.findNodeIndex(v, true)),\n      'data-html': 'true',\n      'data-original-title': 'Summary Statistics',\n      'data-placement': 'right',\n      'data-toggle': 'popover',\n      'data-trigger': 'hover' }, v);\n  }))), (0, _mithril2.default)('#tab2[style=display: ' + or('left', 'tab2') + '; margin-top: .5em]'), (0, _mithril2.default)('#tab3[style=height: 350px]', (0, _mithril2.default)('p[style=padding: .5em 1em; display: ' + or('left', 'tab3') + ']', {\n    title: \"Select a variable from within the visualization in the center panel to view its summary statistics.\" }, (0, _mithril2.default)('center', (0, _mithril2.default)('b', app.summary.name), (0, _mithril2.default)('br'), (0, _mithril2.default)('i', app.summary.labl)), (0, _mithril2.default)('table', app.summary.data.map(function (tr) {\n    return (0, _mithril2.default)('tr', tr.map(function (td) {\n      return (0, _mithril2.default)('td', {\n        onmouseover: function onmouseover() {\n          this.style['background-color'] = 'aliceblue';\n        },\n        onmouseout: function onmouseout() {\n          this.style['background-color'] = '#f9f9f9';\n        } }, td);\n    }));\n  }))))))));\n};\n\nvar rightpanel = function rightpanel() {\n  var button = function button(id, width, text) {\n    return (0, _mithril2.default)('button#' + id + '.btn.' + or('right', id, 'active', 'btn-default') + '[type=button][style=width: ' + width + ']', {\n      onclick: function onclick(_) {\n        return app.tabRight(id);\n      } }, text);\n  };\n  return (0, _mithril2.default)(_Panel2.default, { side: 'right', title: 'Model Selection' }, (0, _mithril2.default)(\".btn-group.btn-group-justified[aria-label=...][role=group][style=margin-top: .5em]\", button('btnModels', \"33%\", \"Models\"), button('btnSetx', \"34%\", \"Set Covar.\"), button('btnResults', \"33%\", \"Results\")), (0, _mithril2.default)('.row-fluid' + (0, _Panel.getClass)({ side: 'right' }), (0, _mithril2.default)('#rightpanelcontent', (0, _mithril2.default)('#rightContentArea[style=height: 453px; overflow: auto]', (0, _mithril2.default)('#results[style=display: ' + or('right', 'btnResults') + '; margin-top: .5em]', (0, _mithril2.default)(\"#resultsView.container[style=float: right; overflow: auto; width: 80%; background-color: white; white-space: nowrap]\"), (0, _mithril2.default)('#modelView[style=display: none; float: left; width: 20%; background-color: white]'), (0, _mithril2.default)(\"p#resultsHolder[style=padding: .5em 1em]\")), (0, _mithril2.default)('#setx[style=display: ' + or('right', 'btnSetx') + ']'), (0, _mithril2.default)('#models[style=display: ' + or('right', 'btnModels') + '; padding: 6px 12px; text-align: center]')))));\n};\n\nvar Body = function () {\n  function Body() {\n    _classCallCheck(this, Body);\n  }\n\n  _createClass(Body, [{\n    key: 'oninit',\n    value: function oninit() {\n      this.about = false;\n      this.cite = false;\n      this.citeHidden = false;\n    }\n  }, {\n    key: 'oncreate',\n    value: function oncreate() {\n      var extract = function extract(name, key, offset, replace) {\n        key = key + '=';\n        var loc = window.location.toString();\n        var val = loc.indexOf(key) > 0 ? loc.substring(loc.indexOf(key) + offset) : '';\n        var idx = val.indexOf('&');\n        val = idx > 0 ? val.substring(0, idx) : val;\n        console.log(name, ': ', val);\n        if (replace) val = val.replace(/%25/g, '%').replace(/%3A/g, ':').replace(/%2F/g, '/');\n        return val;\n      };\n      // let apikey = extract('apikey', 'key', 4);\n      app.main(extract('fileid', 'dfId', 5), extract('hostname', 'host', 5), extract('ddiurl', 'ddiurl', 7, true), extract('dataurl', 'dataurl', 8, true));\n    }\n  }, {\n    key: 'view',\n    value: function view() {\n      var _this = this;\n\n      return (0, _mithril2.default)('main', (0, _mithril2.default)(\"nav#navbar.navbar.navbar-default.navbar-fixed-top[role=navigation]\", (0, _mithril2.default)(\"a.navbar-brand[style=margin-left: 0]\", (0, _mithril2.default)(\"img[src=/static/images/TwoRavens.png][alt=TwoRavens][width=100][style=margin-left: 2em; margin-top: -0.5em]\", {\n        onmouseover: function onmouseover(_) {\n          return _this.about = true;\n        },\n        onmouseout: function onmouseout(_) {\n          return _this.about = false;\n        } })), (0, _mithril2.default)('#navbarNav[style=padding: 0.5em]', (0, _mithril2.default)('#dataField.field[style=margin-top: 0.5em; text-align: center]', (0, _mithril2.default)('h4#dataName[style=display: inline]', {\n        onclick: function onclick(_) {\n          return _this.cite = _this.citeHidden = !_this.citeHidden;\n        },\n        onmouseout: function onmouseout(_) {\n          return _this.citeHidden || (_this.cite = false);\n        },\n        onmouseover: function onmouseover(_) {\n          return _this.cite = true;\n        } }, \"Dataset Name\"), (0, _mithril2.default)('#cite.panel.panel-default[style=display: ' + (this.cite ? 'block' : 'none') + '; position: absolute; right: 50%; width: 380px; text-align: left; z-index: 50]', (0, _mithril2.default)(\".panel-body\")), (0, _mithril2.default)(\"button#btnEstimate.btn.btn-default.ladda-button.navbar-right[data-spinner-color=#000000][data-style=zoom-in][style=margin-left: 2em; margin-right: 1em]\", {\n        onclick: function onclick(_) {\n          return app.estimate('btnEstimate');\n        } }, (0, _mithril2.default)(\"span.ladda-label\", \"Estimate\")), (0, _mithril2.default)(\"button#btnReset.btn.btn-default.navbar-right[title=Reset][style=margin-left: 2.0em]\", {\n        onclick: app.reset }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-repeat[style=color: #818181; font-size: 1em; pointer-events: none]\")), (0, _mithril2.default)('#transformations.transformTool', {\n        title: 'Construct transformations of existing variables using valid R syntax. For example, assuming a variable named d, you can enter \"log(d)\" or \"d^2\".' }))),\n      /*m('.text-center', {\n        style: {margin: '5px'}\n        }, m(\".btn-group\", [\n        m(`a.btn.btn-default${location.href.endsWith('model') ? '.active' : ''}[href=/model][role=button]`, {oncreate: m.route.link}, \"Model\"),\n        m(`a.btn.btn-default${location.href.endsWith('explore') ? '.active' : ''}[href=/explore][role=button]`, {oncreate: m.route.link}, \"Explore\")\n        ]))*/\n      (0, _mithril2.default)('#about.panel.panel-default[style=display: ' + (this.about ? 'block' : 'none') + '; left: 140px; position: absolute; width: 500px; z-index: 50]', (0, _mithril2.default)('.panel-body', 'TwoRavens v0.1 \"Dallas\" -- The Norse god Odin had two talking ravens as advisors, who would fly out into the world and report back all they observed. In the Norse, their names were \"Thought\" and \"Memory\". In our coming release, our thought-raven automatically advises on statistical model selection, while our memory-raven accumulates previous statistical models from Dataverse, to provide cummulative guidance and meta-analysis.'))), (0, _mithril2.default)('#main.left.carousel.slide.svg-leftpanel.svg-rightpanel[style=overflow: auto]', (0, _mithril2.default)(\"#innercarousel.carousel-inner\", (0, _mithril2.default)('#m0.item.active', (0, _mithril2.default)('svg#whitespace'))), (0, _mithril2.default)(\"#spacetools.spaceTool[style=z-index: 16]\", (0, _mithril2.default)(\"button#btnForce.btn.btn-default[title=Pin the variable pebbles to the page.]\", {\n        onclick: app.forceSwitch }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-pushpin\")), (0, _mithril2.default)(\"button#btnEraser.btn.btn-default[title=Wipe all variables from the modeling space.]\", {\n        onclick: app.erase }, (0, _mithril2.default)(\"span.glyphicon.glyphicon-magnet\"))), (0, _mithril2.default)(_Subpanel2.default, {\n        title: \"Legend\",\n        buttons: [['timeButton', 'ztime', 'Time'], ['csButton', 'zcross', 'Cross Sec'], ['dvButton', 'zdv', 'Dep Var'], ['nomButton', 'znom', 'Nom Var']] }), (0, _mithril2.default)(_Subpanel2.default, { title: \"History\" }), (0, _mithril2.default)('#ticker[style=background: #F9F9F9; bottom: 0; height: 40px; position: fixed; width: 100%; border-top: 1px solid #ADADAD]', (0, _mithril2.default)(\"a#logID[href=somelink][target=_blank]\", \"Replication\")), leftpanel(), rightpanel()));\n    }\n  }]);\n\n  return Body;\n}();\n\n_mithril2.default.route(document.body, '/model', {\n  '/model': Body,\n  '/explore': Body\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},function(module,exports){eval("// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///11\n")},function(module,exports,__webpack_require__){eval('/* WEBPACK VAR INJECTION */(function(global, process) {(function (global, undefined) {\n    "use strict";\n\n    if (global.setImmediate) {\n        return;\n    }\n\n    var nextHandle = 1; // Spec says greater than zero\n    var tasksByHandle = {};\n    var currentlyRunningATask = false;\n    var doc = global.document;\n    var registerImmediate;\n\n    function setImmediate(callback) {\n      // Callback can either be a function or a string\n      if (typeof callback !== "function") {\n        callback = new Function("" + callback);\n      }\n      // Copy function arguments\n      var args = new Array(arguments.length - 1);\n      for (var i = 0; i < args.length; i++) {\n          args[i] = arguments[i + 1];\n      }\n      // Store and register the task\n      var task = { callback: callback, args: args };\n      tasksByHandle[nextHandle] = task;\n      registerImmediate(nextHandle);\n      return nextHandle++;\n    }\n\n    function clearImmediate(handle) {\n        delete tasksByHandle[handle];\n    }\n\n    function run(task) {\n        var callback = task.callback;\n        var args = task.args;\n        switch (args.length) {\n        case 0:\n            callback();\n            break;\n        case 1:\n            callback(args[0]);\n            break;\n        case 2:\n            callback(args[0], args[1]);\n            break;\n        case 3:\n            callback(args[0], args[1], args[2]);\n            break;\n        default:\n            callback.apply(undefined, args);\n            break;\n        }\n    }\n\n    function runIfPresent(handle) {\n        // From the spec: "Wait until any invocations of this algorithm started before this one have completed."\n        // So if we\'re currently running a task, we\'ll need to delay this invocation.\n        if (currentlyRunningATask) {\n            // Delay by doing a setTimeout. setImmediate was tried instead, but in Firefox 7 it generated a\n            // "too much recursion" error.\n            setTimeout(runIfPresent, 0, handle);\n        } else {\n            var task = tasksByHandle[handle];\n            if (task) {\n                currentlyRunningATask = true;\n                try {\n                    run(task);\n                } finally {\n                    clearImmediate(handle);\n                    currentlyRunningATask = false;\n                }\n            }\n        }\n    }\n\n    function installNextTickImplementation() {\n        registerImmediate = function(handle) {\n            process.nextTick(function () { runIfPresent(handle); });\n        };\n    }\n\n    function canUsePostMessage() {\n        // The test against `importScripts` prevents this implementation from being installed inside a web worker,\n        // where `global.postMessage` means something completely different and can\'t be used for this purpose.\n        if (global.postMessage && !global.importScripts) {\n            var postMessageIsAsynchronous = true;\n            var oldOnMessage = global.onmessage;\n            global.onmessage = function() {\n                postMessageIsAsynchronous = false;\n            };\n            global.postMessage("", "*");\n            global.onmessage = oldOnMessage;\n            return postMessageIsAsynchronous;\n        }\n    }\n\n    function installPostMessageImplementation() {\n        // Installs an event handler on `global` for the `message` event: see\n        // * https://developer.mozilla.org/en/DOM/window.postMessage\n        // * http://www.whatwg.org/specs/web-apps/current-work/multipage/comms.html#crossDocumentMessages\n\n        var messagePrefix = "setImmediate$" + Math.random() + "$";\n        var onGlobalMessage = function(event) {\n            if (event.source === global &&\n                typeof event.data === "string" &&\n                event.data.indexOf(messagePrefix) === 0) {\n                runIfPresent(+event.data.slice(messagePrefix.length));\n            }\n        };\n\n        if (global.addEventListener) {\n            global.addEventListener("message", onGlobalMessage, false);\n        } else {\n            global.attachEvent("onmessage", onGlobalMessage);\n        }\n\n        registerImmediate = function(handle) {\n            global.postMessage(messagePrefix + handle, "*");\n        };\n    }\n\n    function installMessageChannelImplementation() {\n        var channel = new MessageChannel();\n        channel.port1.onmessage = function(event) {\n            var handle = event.data;\n            runIfPresent(handle);\n        };\n\n        registerImmediate = function(handle) {\n            channel.port2.postMessage(handle);\n        };\n    }\n\n    function installReadyStateChangeImplementation() {\n        var html = doc.documentElement;\n        registerImmediate = function(handle) {\n            // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n            // into the document. Do so, thus queuing up the task. Remember to clean up once it\'s been called.\n            var script = doc.createElement("script");\n            script.onreadystatechange = function () {\n                runIfPresent(handle);\n                script.onreadystatechange = null;\n                html.removeChild(script);\n                script = null;\n            };\n            html.appendChild(script);\n        };\n    }\n\n    function installSetTimeoutImplementation() {\n        registerImmediate = function(handle) {\n            setTimeout(runIfPresent, 0, handle);\n        };\n    }\n\n    // If supported, we should attach to the prototype of global, since that is where setTimeout et al. live.\n    var attachTo = Object.getPrototypeOf && Object.getPrototypeOf(global);\n    attachTo = attachTo && attachTo.setTimeout ? attachTo : global;\n\n    // Don\'t get fooled by e.g. browserify environments.\n    if ({}.toString.call(global.process) === "[object process]") {\n        // For Node.js before 0.9\n        installNextTickImplementation();\n\n    } else if (canUsePostMessage()) {\n        // For non-IE10 modern browsers\n        installPostMessageImplementation();\n\n    } else if (global.MessageChannel) {\n        // For web workers, where supported\n        installMessageChannelImplementation();\n\n    } else if (doc && "onreadystatechange" in doc.createElement("script")) {\n        // For IE 6–8\n        installReadyStateChangeImplementation();\n\n    } else {\n        // For older browsers\n        installSetTimeoutImplementation();\n    }\n\n    attachTo.setImmediate = setImmediate;\n    attachTo.clearImmediate = clearImmediate;\n}(typeof self === "undefined" ? typeof global === "undefined" ? this : global : self));\n\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(3), __webpack_require__(11)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')},function(module,exports,__webpack_require__){eval("var apply = Function.prototype.apply;\n\n// DOM APIs, for completeness\n\nexports.setTimeout = function() {\n  return new Timeout(apply.call(setTimeout, window, arguments), clearTimeout);\n};\nexports.setInterval = function() {\n  return new Timeout(apply.call(setInterval, window, arguments), clearInterval);\n};\nexports.clearTimeout =\nexports.clearInterval = function(timeout) {\n  if (timeout) {\n    timeout.close();\n  }\n};\n\nfunction Timeout(id, clearFn) {\n  this._id = id;\n  this._clearFn = clearFn;\n}\nTimeout.prototype.unref = Timeout.prototype.ref = function() {};\nTimeout.prototype.close = function() {\n  this._clearFn.call(window, this._id);\n};\n\n// Does not start the time, just sets up the members needed.\nexports.enroll = function(item, msecs) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = msecs;\n};\n\nexports.unenroll = function(item) {\n  clearTimeout(item._idleTimeoutId);\n  item._idleTimeout = -1;\n};\n\nexports._unrefActive = exports.active = function(item) {\n  clearTimeout(item._idleTimeoutId);\n\n  var msecs = item._idleTimeout;\n  if (msecs >= 0) {\n    item._idleTimeoutId = setTimeout(function onTimeout() {\n      if (item._onTimeout)\n        item._onTimeout();\n    }, msecs);\n  }\n};\n\n// setimmediate attaches itself to the global object\n__webpack_require__(12);\nexports.setImmediate = setImmediate;\nexports.clearImmediate = clearImmediate;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3RpbWVycy1icm93c2VyaWZ5L21haW4uanM/YjA4OCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBIiwiZmlsZSI6IjEzLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcGx5ID0gRnVuY3Rpb24ucHJvdG90eXBlLmFwcGx5O1xuXG4vLyBET00gQVBJcywgZm9yIGNvbXBsZXRlbmVzc1xuXG5leHBvcnRzLnNldFRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0VGltZW91dCwgd2luZG93LCBhcmd1bWVudHMpLCBjbGVhclRpbWVvdXQpO1xufTtcbmV4cG9ydHMuc2V0SW50ZXJ2YWwgPSBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIG5ldyBUaW1lb3V0KGFwcGx5LmNhbGwoc2V0SW50ZXJ2YWwsIHdpbmRvdywgYXJndW1lbnRzKSwgY2xlYXJJbnRlcnZhbCk7XG59O1xuZXhwb3J0cy5jbGVhclRpbWVvdXQgPVxuZXhwb3J0cy5jbGVhckludGVydmFsID0gZnVuY3Rpb24odGltZW91dCkge1xuICBpZiAodGltZW91dCkge1xuICAgIHRpbWVvdXQuY2xvc2UoKTtcbiAgfVxufTtcblxuZnVuY3Rpb24gVGltZW91dChpZCwgY2xlYXJGbikge1xuICB0aGlzLl9pZCA9IGlkO1xuICB0aGlzLl9jbGVhckZuID0gY2xlYXJGbjtcbn1cblRpbWVvdXQucHJvdG90eXBlLnVucmVmID0gVGltZW91dC5wcm90b3R5cGUucmVmID0gZnVuY3Rpb24oKSB7fTtcblRpbWVvdXQucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuX2NsZWFyRm4uY2FsbCh3aW5kb3csIHRoaXMuX2lkKTtcbn07XG5cbi8vIERvZXMgbm90IHN0YXJ0IHRoZSB0aW1lLCBqdXN0IHNldHMgdXAgdGhlIG1lbWJlcnMgbmVlZGVkLlxuZXhwb3J0cy5lbnJvbGwgPSBmdW5jdGlvbihpdGVtLCBtc2Vjcykge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gbXNlY3M7XG59O1xuXG5leHBvcnRzLnVuZW5yb2xsID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG4gIGl0ZW0uX2lkbGVUaW1lb3V0ID0gLTE7XG59O1xuXG5leHBvcnRzLl91bnJlZkFjdGl2ZSA9IGV4cG9ydHMuYWN0aXZlID0gZnVuY3Rpb24oaXRlbSkge1xuICBjbGVhclRpbWVvdXQoaXRlbS5faWRsZVRpbWVvdXRJZCk7XG5cbiAgdmFyIG1zZWNzID0gaXRlbS5faWRsZVRpbWVvdXQ7XG4gIGlmIChtc2VjcyA+PSAwKSB7XG4gICAgaXRlbS5faWRsZVRpbWVvdXRJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gb25UaW1lb3V0KCkge1xuICAgICAgaWYgKGl0ZW0uX29uVGltZW91dClcbiAgICAgICAgaXRlbS5fb25UaW1lb3V0KCk7XG4gICAgfSwgbXNlY3MpO1xuICB9XG59O1xuXG4vLyBzZXRpbW1lZGlhdGUgYXR0YWNoZXMgaXRzZWxmIHRvIHRoZSBnbG9iYWwgb2JqZWN0XG5yZXF1aXJlKFwic2V0aW1tZWRpYXRlXCIpO1xuZXhwb3J0cy5zZXRJbW1lZGlhdGUgPSBzZXRJbW1lZGlhdGU7XG5leHBvcnRzLmNsZWFySW1tZWRpYXRlID0gY2xlYXJJbW1lZGlhdGU7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL34vdGltZXJzLWJyb3dzZXJpZnkvbWFpbi5qc1xuLy8gbW9kdWxlIGlkID0gMTNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n")}]);